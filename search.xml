<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mysql主从复制</title>
      <link href="/2022/08/17/Mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>/2022/08/17/Mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="MYSQL-主从复制"><a href="#MYSQL-主从复制" class="headerlink" title="MYSQL_主从复制"></a>MYSQL_主从复制</h1><p><a href="https://blog.csdn.net/m0_62473957/article/details/124140928?ops_request_misc=%7B%22request_id%22:%22166065469816781790759130%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166065469816781790759130&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-124140928-null-null.142%5Ev41%5Epc_rank_v36,185%5Ev2%5Econtrol&utm_term=mysql%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6&spm=1018.2226.3001.4187"> MySQL主从复制_ST Cp的博客-CSDN博客_mysql主从复制</a></p><p><a href="https://blog.csdn.net/main_Scanner01/article/details/124259050"> MySQL主从复制_张三疯学独孤九剑的博客-CSDN博客_mysql主从复制</a></p><h2 id><a href="#" class="headerlink" title></a></h2><p>MysQL主从复制是一个异步的复制过程，底层是基于Mysql数据库自带的二进制日志功能。就是一台或多台MySQL数据 库（slave，即从库）从另一合MySQL 数据库（master，即主库)进行日志的复制然后再解析日志并应用到自身，最 终实现从库的数据和主库的数据保持一致。<strong>MysQL主从复制是MysQL数据库自带功能</strong>，无需借助第三方工具。</p><h2 id="原理剖析"><a href="#原理剖析" class="headerlink" title="原理剖析"></a>原理剖析</h2><h3 id="三个线程"><a href="#三个线程" class="headerlink" title="三个线程"></a>三个线程</h3><p>实际上主从同步的原理就是基于binlog进行数据同步的。在主从复制过程中，会基于<strong>3个线程</strong>来操作，<strong>一个主库线程，两个从库线程</strong>。</p><p><img src="/2022/08/17/Mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/1.png" alt="原理流程"></p><p>二进制日志转储线程（Binlog dump thread）是一个主库线程。当从库线程连接的时候， 主库可以将二进<br>制日志发送给从库，当主库读取事件（Event）的时候，会在 Binlog 上加锁，读取完成之后，再将锁释<br>放掉。</p><p>从库 I&#x2F;O 线程会连接到主库，向主库发送请求更新 Binlog。这时从库的 I&#x2F;O 线程就可以读取到主库的<br>二进制日志转储线程发送的 Binlog 更新部分，并且拷贝到本地的中继日志 （Relay log）。</p><p>从库 SQL 线程会读取从库中的中继日志，并且执行日志中的事件，将从库中的数据与主库保持同步。</p><p>MySQL复制过程分成三步： </p><ul><li>master将改变记录到二进制日志 (binary log) </li><li>slave将master的binary 1og拷贝到它的中继日志 (relay log) </li><li>slave重做中继日志中的事件，将改变应用到自己的数据库中</li></ul><p><img src="/2022/08/17/Mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/2.png" alt="流程"></p><h2 id="复制原理："><a href="#复制原理：" class="headerlink" title="复制原理："></a>复制原理：</h2><p>Mysql 中有一种日志叫做 bin 日志（二进制日志）。这个日志会记录下所有修改了数据库的SQL 语句（insert,update,delete,create&#x2F;alter&#x2F;drop table, grant 等等)。<br>主从复制的原理其实就是把主服务器上的 bin 日志复制到从服务器上执行一遍，这样从服务器上的数据就和主服务器上的数据相同了。</p><h2 id="复制过程"><a href="#复制过程" class="headerlink" title="复制过程"></a>复制过程</h2><ul><li>主节点必须启用二进制日志，记录任何修改了数据库数据的事件。</li><li>从节点开启一个线程（I&#x2F;O Thread)把自己扮演成 mysql 的客户端，通过 mysql 协议，请求主节点的二进制日志文件中的事件</li><li>主节点启动一个线程（dump Thread），检查自己二进制日志中的事件，跟对方请求的位置对比，如果不带请求位置参数，则主节点就会从第一个日志文件中的第一个事件一个一个发送给从节点。</li><li>从节点接收到主节点发送过来的数据把它放置到中继日志（Relay log）文件中。并记录该次请求到主节点的具体哪一个二进制日志文件内部的哪一个位置（主节点中的二进制文件会有多个，在后面详细讲解）。</li><li>从节点启动另外一个线程（sql Thread ），把 Relay log 中的事件读取出来，并在本地再执行一次。</li></ul><h2 id="mysql的主从复制"><a href="#mysql的主从复制" class="headerlink" title="mysql的主从复制"></a>mysql的主从复制</h2><p> 需要至少两台以上服务器来创建数据库，主从复制可以是一主一从，也可以是一主多从</p><h3 id="在linux虚拟机上分别配置两台mysql数据库"><a href="#在linux虚拟机上分别配置两台mysql数据库" class="headerlink" title="在linux虚拟机上分别配置两台mysql数据库"></a>在linux虚拟机上分别配置两台mysql数据库</h3><p><a href="https://blog.csdn.net/weixin_46328119/article/details/119704172">在虚拟机安装MySQL详解_小婷学习日记的博客-CSDN博客_虚拟机部署mysql</a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h2 id="配置-主库Master"><a href="#配置-主库Master" class="headerlink" title="配置-主库Master"></a>配置-主库Master</h2><h3 id="第一步-修改mysql数据库主库配置文件-vim-x2F-etc-x2F-my-cnf"><a href="#第一步-修改mysql数据库主库配置文件-vim-x2F-etc-x2F-my-cnf" class="headerlink" title="第一步 :修改mysql数据库主库配置文件 vim &#x2F;etc&#x2F;my.cnf"></a>第一步 :修改mysql数据库主库配置文件 vim &#x2F;etc&#x2F;my.cnf</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log-bin=mysql-bin <span class="comment">#[必须]启用二进制文件</span></span><br><span class="line">server-id=100 <span class="comment">#[必须] 服务器唯一ID</span></span><br></pre></td></tr></table></figure><h3 id="第二步-重启Mysql服务"><a href="#第二步-重启Mysql服务" class="headerlink" title="第二步:重启Mysql服务"></a>第二步:重启Mysql服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><h3 id="第三步：登录mysql数据库新建权限用户"><a href="#第三步：登录mysql数据库新建权限用户" class="headerlink" title="第三步：登录mysql数据库新建权限用户"></a>第三步：登录mysql数据库新建权限用户</h3><p>登录Mysql数据库，执行下面SQL </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT REPLICATION SLAVE ON ** to <span class="string">&#x27;xiaoming&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;Root@123456&#x27;</span>;</span><br></pre></td></tr></table></figure><p>用户名称和密码并不是固定</p><p>注：上面SQL的作用是创建一个用户xiaoming，密码为ROot@123456，并且给xiaoming用户授予REPLICATION SLAVE 权限。常用于建立复制时所需要用到的用户权限，也就是slave必须被master授权具有该权限的用户，才能通过该用户复制</p><h3 id="第四步：执行sql，记录下结果中file和position的值"><a href="#第四步：执行sql，记录下结果中file和position的值" class="headerlink" title="第四步：执行sql，记录下结果中file和position的值"></a>第四步：执行sql，记录下结果中file和position的值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show master status</span><br></pre></td></tr></table></figure><p><img src="/2022/08/17/Mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/3.png" alt="结果"></p><p>注：上面的SQL的作用是查看master的状态，执行完SQL后不要再执行任何操作</p><h2 id="配置-从库slave"><a href="#配置-从库slave" class="headerlink" title="配置-从库slave"></a>配置-从库slave</h2><h3 id="第一步：修改mysql数据库从库配置文件-vim-x2F-etc-x2F-my-cnf"><a href="#第一步：修改mysql数据库从库配置文件-vim-x2F-etc-x2F-my-cnf" class="headerlink" title="第一步：修改mysql数据库从库配置文件 vim &#x2F;etc&#x2F;my.cnf"></a>第一步：修改mysql数据库从库配置文件 vim &#x2F;etc&#x2F;my.cnf</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id=101 <span class="comment">#[必须] 服务器唯一ID</span></span><br></pre></td></tr></table></figure><h3 id="第二步-重启Mysql服务-1"><a href="#第二步-重启Mysql服务-1" class="headerlink" title="第二步:重启Mysql服务"></a>第二步:重启Mysql服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><h3 id="第三步：登录Mysql数据库，执行下面SQL"><a href="#第三步：登录Mysql数据库，执行下面SQL" class="headerlink" title="第三步：登录Mysql数据库，执行下面SQL"></a>第三步：登录Mysql数据库，执行下面SQL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># host 是主库的ip地址，用刚才在主库创建的权限用户登录master_user</span></span><br><span class="line"><span class="comment"># master_log_file 是刚才主库执行sql:show master status 出现的file文件内容</span></span><br><span class="line"><span class="comment"># master_log 是刚才主库执行sql:show master status 出现的position值的内容</span></span><br><span class="line">change master to master host=<span class="string">&#x27;192.168.138.100&#x27;</span>,master_user=<span class="string">&#x27;xiaoming&#x27;</span> ,master_password= <span class="string">&#x27;Root@123456&#x27;</span>, master_log_file-<span class="string">&#x27;mysql-bin.000001&#x27;</span>,master_log pos=439;</span><br><span class="line"></span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure><h3 id="第四步：查看从库的状态"><a href="#第四步：查看从库的状态" class="headerlink" title="第四步：查看从库的状态"></a>第四步：查看从库的状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show slave status</span><br></pre></td></tr></table></figure><h2 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h2><p>在主数据库中进行增删查改操作，从数据库会复制相应的操作内容</p><p>主数据库进行读写操作，从数据库只能进行读操作，不能进行写操作</p><p>面对日益增加的系统访问量，数据库的吞吐量面临若巨大瓶颈。对于同一时刻有大量并发读操作和较少写操作类型的 应用系统来说，将数据库拆分为主库和从库，主库负责处理事务性的增利改操作，从库负费处理查询操作，能够有效 的避免由数据更新导致的行锁，使得整个系统的查询性能得到极大的改善．</p><p><img src="/2022/08/17/Mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/4.png" alt="主从库转换"></p><h3 id="在项目中实现读写分离"><a href="#在项目中实现读写分离" class="headerlink" title="在项目中实现读写分离"></a>在项目中实现读写分离</h3><h4 id="Sharding-JDBC介绍"><a href="#Sharding-JDBC介绍" class="headerlink" title="Sharding-JDBC介绍"></a>Sharding-JDBC介绍</h4><p>Sharding-JDBC定位为轻量级Java框架，在Java的JDBC层提供的额外服务。它使用客户端直连数据库，以jar包形式 提供服务，无需额外部署和依赖，可理解为增强版的JDBC驱动，完全兼容DBC和各种ORM框架。 使用Sharding-]DBC可以在程序中轻松的实现数据库读写分离</p><ul><li>适用于任何基手JDBC的ORM框架，如：JPA, Hibernate,Mybatis, Spring JDBC Template或直接使用DBC。 </li><li>支持任何第三方的数据库连接池，如：DBCP, C3PO, BonecP, Druid, HikariCP等。</li><li>支持任意实现DBC规范的数据库。目前支持MySQL, Oracle, SQLServer, PostgreSQL以及任何遵循SQL92标准的数据库</li></ul><h3 id="案列"><a href="#案列" class="headerlink" title="案列"></a>案列</h3><h4 id="导入配置"><a href="#导入配置" class="headerlink" title="导入配置"></a>导入配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0-RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置主从数据库数据源"><a href="#配置主从数据库数据源" class="headerlink" title="配置主从数据库数据源"></a>配置主从数据库数据源</h4><p>在pom文件中配置读写分离的规则</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">names:</span></span><br><span class="line">        <span class="string">master,slave</span></span><br><span class="line">      <span class="comment"># 主数据源</span></span><br><span class="line">      <span class="attr">master:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.138.100:3306/rw?characterEncoding=utf-8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="comment"># 从数据源</span></span><br><span class="line">      <span class="attr">slave:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.138.101:3306/rw?characterEncoding=utf-8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">masterslave:</span></span><br><span class="line">      <span class="comment"># 读写分离配置</span></span><br><span class="line">      <span class="attr">load-balance-algorithm-type:</span> <span class="string">round_robin</span> <span class="comment">#轮询</span></span><br><span class="line">      <span class="comment"># 最终的数据源名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">dataSource</span></span><br><span class="line">      <span class="comment"># 主库数据源名称</span></span><br><span class="line">      <span class="attr">master-data-source-name:</span> <span class="string">master</span></span><br><span class="line">      <span class="comment"># 从库数据源名称列表，多个逗号分隔</span></span><br><span class="line">      <span class="attr">slave-data-source-names:</span> <span class="string">slave</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span> <span class="comment">#开启SQL显示，默认false</span></span><br><span class="line">  <span class="comment"># 允许bean定义覆盖配置项     </span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="在配置文件中配置允许bean定义覆盖配置项"><a href="#在配置文件中配置允许bean定义覆盖配置项" class="headerlink" title="在配置文件中配置允许bean定义覆盖配置项"></a>在配置文件中配置允许bean定义覆盖配置项</h4><p>防止druid创建的数据源和引入的Sharding创建数据源发生冲突，配置其能够覆盖</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>配置完成后，不需要更改项目中的任何代码，即可使用mysql的主从复制，从而提高并发压力和查询速度，当使用到redis缓存的时候，也可以使用redis的主从复制，原理跟mysql的主从复制大致相同，这样可以减少数据库压力也可以减少缓存压力</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis6</title>
      <link href="/2022/08/15/redis6/"/>
      <url>/2022/08/15/redis6/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-6"><a href="#Redis-6" class="headerlink" title="Redis 6"></a>Redis 6</h1><h2 id="技术的分类"><a href="#技术的分类" class="headerlink" title="技术的分类"></a>技术的分类</h2><ul><li><p>1、解决功能性的问题：Java、Jsp、RDBMS、Tomcat、HTML、Linux、JDBC、SVN</p></li><li><p>2、解决扩展性的问题：Struts、Spring、SpringMVC、Hibernate、Mybatis</p></li><li><p>3、解决性能的问题：NoSQL、Java线程、Hadoop、Nginx、MQ、ElasticSearch</p></li></ul><h2 id="NoSQL数据库简介"><a href="#NoSQL数据库简介" class="headerlink" title="NoSQL数据库简介"></a>NoSQL数据库简介</h2><p>NoSQL(NoSQL &#x3D; <strong>Not Only SQL</strong> )，意即“不仅仅是SQL”，泛指<strong>非关系型的数据库</strong>。 </p><p>NoSQL 不依赖业务逻辑方式存储，而以简单的key-value模式存储。因此大大的增加了数据库的扩展能力。</p><ul><li><p>不遵循SQL标准。</p></li><li><p>不支持ACID。</p></li><li><p>远超于SQL的性能。</p></li></ul><h3 id="NoSQL适用场景"><a href="#NoSQL适用场景" class="headerlink" title="NoSQL适用场景"></a>NoSQL适用场景</h3><ul><li><p>对数据高并发的读写</p></li><li><p>海量数据的读写</p></li><li><p>对数据高可扩展性的</p></li></ul><h3 id="NoSQL不适用场景"><a href="#NoSQL不适用场景" class="headerlink" title="NoSQL不适用场景"></a><strong>NoSQL不适用场景</strong></h3><ul><li><p>需要事务支持</p></li><li><p>基于sql的结构化查询存储，处理复杂的关系,需要即席查询。</p></li><li><p>用不着sql的和用了sql也不行的情况，请考虑用NoSql</p></li></ul><h3 id="Memcache"><a href="#Memcache" class="headerlink" title="Memcache"></a>Memcache</h3><ul><li><p>很早出现的NoSql数据库</p></li><li><p>数据都在内存中，<strong>一般不持久化</strong> 并不能存放在电脑硬盘上</p></li><li><p>支持简单的key-value模式，支持类型单一</p></li><li><p>一般是作为缓存数据库辅助持久化的数据库</p></li></ul><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ul><li><p>几乎覆盖了Memcached的绝大部分功能</p></li><li><p>数据都在内存中，<strong>支持持久化</strong>，主要用作备份恢复</p></li><li><p>除了支持简单的key-value模式，还支持多种数据结构的存储，比如 list、set、hash、zset等。</p></li><li><p>一般是作为缓存数据库辅助持久化的数据库</p></li></ul><h3 id="Mangdb"><a href="#Mangdb" class="headerlink" title="Mangdb"></a>Mangdb</h3><ul><li><p>高性能、开源、模式自由(schema free)的<strong>文档型数据库</strong></p></li><li><p>数据都在内存中， 如果内存不足，把不常用的数据保存到硬盘</p></li><li><p>虽然是key-value模式，但是对value（尤其是<strong>json</strong>）提供了丰富的查询功能</p></li><li><p>支持二进制数据及大型对象</p></li><li><p>可以根据数据的特点<strong>替代RDBMS</strong> ，成为独立的数据库。或者配合RDBMS，存储特定的数据。</p></li></ul><p>行式数据库</p><p>列式数据库</p><p>NoSQL数据库是以改变数据的存储结构从而提高数据的访问性能来开发的</p><h2 id="Redis概述"><a href="#Redis概述" class="headerlink" title="Redis概述"></a>Redis概述</h2><ul><li><p>Redis是一个开源的key-value存储系统。</p></li><li><p>和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。</p></li><li><p>这些数据类型都支持push&#x2F;pop、add&#x2F;remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。</p></li><li><p>在此基础上，Redis支持各种不同方式的排序。</p></li><li><p>与memcached一样，为了保证效率，数据都是缓存在内存中。</p></li><li><p>区别的是Redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件。<strong>数据持久化</strong></p></li><li><p>并且在此基础上实现了master-slave(主从)同步。</p></li></ul><h3 id="配合关系型数据库做高速缓存"><a href="#配合关系型数据库做高速缓存" class="headerlink" title="配合关系型数据库做高速缓存"></a>配合关系型数据库做高速缓存</h3><ul><li><p>高频次，热门访问的数据，降低数据库IO</p></li><li><p>分布式架构，做session共享</p></li></ul><h3 id="多样的数据结构存储持久化数据"><a href="#多样的数据结构存储持久化数据" class="headerlink" title="多样的数据结构存储持久化数据"></a>多样的数据结构存储持久化数据</h3><p><img src="/2022/08/15/redis6/1.png" alt="缓存结构"></p><h2 id="在linux系统上按照redis"><a href="#在linux系统上按照redis" class="headerlink" title="在linux系统上按照redis"></a>在linux系统上按照redis</h2><h3 id="在官网下载redis安装包"><a href="#在官网下载redis安装包" class="headerlink" title="在官网下载redis安装包"></a>在官网下载redis安装包</h3><p>新版本是7.0</p><p><img src="/2022/08/15/redis6/2.png" alt="redis.jar"></p><p>我使用的腾讯云的宝塔linux面板</p><p>在根目录下创建文件夹opt，将在电脑上下载的安装包上传到linux服务器上即可</p><p><img src="/2022/08/15/redis6/3.png"></p><h3 id="下载C语言环境"><a href="#下载C语言环境" class="headerlink" title="下载C语言环境"></a>下载C语言环境</h3><p>因为编译redis需要c语言环境</p><p>安装C 语言的编译环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">**yum** **ins****tall centos-release-scl scl-utils-build**</span><br><span class="line"></span><br><span class="line">**yum install -y devtoolset-8-toolchain**</span><br><span class="line"></span><br><span class="line">**scl <span class="built_in">enable</span> devtoolset-8 bash**</span><br><span class="line"></span><br><span class="line">**测试 gcc版本** </span><br><span class="line"></span><br><span class="line">**gcc --version**</span><br></pre></td></tr></table></figure><p>宝塔面板自带C语言环境</p><p>查看<strong>gcc –version</strong></p><p><img src="/2022/08/15/redis6/4.png"></p><p><strong>下载redis-7.0.4.tar.gz放&#x2F;opt目录</strong></p><p>  <strong>解压命令：tar -zxvf redis-7.0.4.tar.gz</strong></p><p> <strong>解压完成后进入目录：cd redis-7.0.4.tar.gz</strong></p><p> <strong>在redis-7.0.4.tar.gz目录下再次执行make命令（只是编译好）</strong></p><p><strong>继续进行make install命令</strong></p><h3 id="安装目录：-x2F-usr-x2F-local-x2F-bin"><a href="#安装目录：-x2F-usr-x2F-local-x2F-bin" class="headerlink" title="安装目录：&#x2F;usr&#x2F;local&#x2F;bin"></a>安装目录：&#x2F;usr&#x2F;local&#x2F;bin</h3><p>在&#x2F;usr&#x2F;local&#x2F;bin目录查看是否有对应文件</p><p>查看默认安装目录：</p><p>redis-benchmark:性能测试工具，可以在自己本子运行，看看自己本子性能如何</p><p>redis-check-aof：修复有问题的AOF文件，rdb和aof后面讲</p><p>redis-check-dump：修复有问题的dump.rdb文件</p><p>redis-sentinel：Redis集群使用</p><p>redis-server：Redis服务器启动命令</p><p>redis-cli：客户端，操作入口</p><p>对应文件</p><p><img src="/2022/08/15/redis6/5.png"></p><h3 id="前台启动（不推荐）"><a href="#前台启动（不推荐）" class="headerlink" title="前台启动（不推荐）"></a>前台启动（不推荐）</h3><p>redis-server</p><p>启动成功</p><p><img src="/2022/08/15/redis6/6.png"></p><h3 id="后台启动（推荐）"><a href="#后台启动（推荐）" class="headerlink" title="后台启动（推荐）"></a>后台启动（推荐）</h3><p>将redis目录下的redis.conf文件拷贝一份到&#x2F;etc目录下</p><p>cp redis.conf &#x2F;etc&#x2F;redis.conf</p><p>修改redis.conf(128行)文件将里面的daemonize no 改成 yes，让服务在后台启动</p><p>回到&#x2F;usr&#x2F;local&#x2F;bin目录下执行redis-server &#x2F;etc&#x2F;redis.conf 即可后台启动</p><p>使用查询命令：ps -ef | grep redis查看进程</p><p><img src="/2022/08/15/redis6/7.png"></p><p>即使linux命令窗口关闭redis照样启动</p><p>使用命令redis-cli进入到redis操作客户端</p><p>使用ping命令联通状态成功</p><p><img src="/2022/08/15/redis6/8.png"></p><h3 id="redis关闭"><a href="#redis关闭" class="headerlink" title="redis关闭"></a>redis关闭</h3><ul><li>单实例关闭：redis-cli shutdown</li><li>也可以进入到客户端执行shutdown 关闭</li></ul><p>多实例关闭，指定端口关闭：redis-cli -p 6379 shutdown</p><h2 id="Redis介绍相关知识"><a href="#Redis介绍相关知识" class="headerlink" title="Redis介绍相关知识"></a>Redis介绍相关知识</h2><p>默认16个数据库，类似数组下标从0开始，初始默认使用0号库</p><p>使用命令 select  <dbid>来切换数据库。如: select 8 </dbid></p><p>统一密码管理，所有库同样密码。</p><p>dbsize查看当前数据库的key的数量</p><p>flushdb清空当前库</p><p>flushall通杀全部库</p><p>Redis是单线程+多路IO复用技术</p><p>多路复用是指使用一个线程来检查多个文件描述符（Socket）的就绪状态，比如调用select和poll函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启动线程执行（比如使用线程池）</p><p>串行  vs  多线程+锁（memcached） vs  单线程+多路IO复用(Redis)</p><p>（与Memcache三点不同: 支持多数据类型，支持持久化，单线程+多路IO复用）</p><p><img src="/2022/08/15/redis6/9.png"></p><h2 id="常用五大数据类型"><a href="#常用五大数据类型" class="headerlink" title="常用五大数据类型"></a><strong>常用五大数据类型</strong></h2><p>哪里去获得redis常见数据类型操作命令<a href="http://www.redis.cn/commands.html">http://www.redis.cn/commands.html</a></p><h3 id="Redis-键-key"><a href="#Redis-键-key" class="headerlink" title="Redis 键 (key)"></a>Redis 键 (key)</h3><p>keys *查看当前库所有key  (匹配：keys *1)</p><p>exists key判断某个key是否存在</p><p>type key 查看你的key是什么类型</p><p>del key    删除指定的key数据</p><p><strong>unlink key  根据value选择非阻塞删除</strong></p><p><strong>仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。</strong></p><p>expire key 10  10秒钟：为给定的key设置过期时间</p><p>ttl key 查看还有多少秒过期，-1表示永不过期，-2表示已过期</p><p>select命令切换数据库</p><p>dbsize查看当前数据库的key的数量</p><p>flushdb清空当前库</p><p>flushall通杀全部库</p><h3 id="Redis-字符串-String"><a href="#Redis-字符串-String" class="headerlink" title="Redis 字符串(String)"></a>Redis 字符串(String)</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>String是Redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。</p><p>String类型是二进制安全的。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象。</p><p>String类型是Redis最基本的数据类型，一个Redis中字符串value最多可以是512M</p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li>set  <key><value>添加键值对</value></key></li></ul><p><img src="/2022/08/15/redis6/10.png">                               </p><p>*NX：当数据库中key不存在时，可以将key-value添加数据库</p><p>*XX：当数据库中key存在时，可以将key-value添加数据库，与NX参数互斥</p><p>*EX：key的超时秒数</p><p>*PX：key的超时毫秒数，与EX互斥</p><ul><li><p>get  <key>查询对应键值</key></p></li><li><p>append <key><value>将给定的<value> 追加到原值的末尾</value></value></key></p></li><li><p>strlen <key>获得值的长度</key></p></li><li><p>setnx <key><value>只有在 key 不存在时  设置 key 的值</value></key></p></li><li><p>incr <key></key></p></li></ul><p>将 key 中储存的数字值增1</p><p>只能对数字值操作，如果为空，新增值为1</p><ul><li>decr <key></key></li></ul><p>将 key 中储存的数字值减1</p><p>只能对数字值操作，如果为空，新增值为-1</p><ul><li><p>incrby &#x2F; decrby <key>&lt;步长&gt;将 key 中储存的数字值增减。自定义步长。</key></p></li><li><p>incr <key></key></p></li></ul><p>对存储在指定key的数值执行<strong>原子</strong>的加1操作</p><p>所谓<strong>原子</strong>操作是指不会被线程调度机制打断的操作；</p><p>这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch （切换到另一个线程）。</p><p>（1）在单线程中， 能够在单条指令中完成的操作都可以认为是”原子操作”，因为中断只能发生于指令之间。</p><p>（2）在多线程中，不能被其它进程（线程）打断的操作就叫原子操作。</p><p>Redis单命令的原子性主要得益于Redis的单线程。</p><ul><li>mset <key1><value1><key2><value2> …..</value2></key2></value1></key1></li></ul><p>同时设置一个或多个 key-value对 </p><ul><li>mget <key1><key2><key3> …..</key3></key2></key1></li></ul><p>同时获取一个或多个 value </p><ul><li>msetnx <key1><value1><key2><value2> …..</value2></key2></value1></key1></li></ul><p>同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</p><p>原子性：有一个失败则都失败</p><ul><li>getrange <key>&lt;起始位置&gt;&lt;结束位置&gt;</key></li></ul><p>获得值的范围，类似java中的substring，<strong>前包，后包</strong></p><ul><li>setrange <key>&lt;起始位置&gt;<value></value></key></li></ul><p>用 <value> 覆写<key>所储存的字符串值，从&lt;起始位置&gt;开始(<strong>索引从0****开始</strong>)。</key></value></p><ul><li>setex <key>&lt;过期时间&gt;<value></value></key></li></ul><p>设置键值的同时，设置过期时间，单位秒。</p><ul><li>getset <key><value></value></key></li></ul><p>以新换旧，设置了新值同时获得旧值。 </p><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>String的数据结构为简单动态字符串(Simple Dynamic String,缩写SDS)。是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配.</p><p>​            <img src="/2022/08/15/redis6/11.png">                   </p><p>如图中所示，内部为当前字符串实际分配的空间capacity一般要高于实际字符串长度len。当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容时一次只会多扩1M的空间。需要注意的是字符串最大长度为512M。</p><h3 id="Redis-列表-list"><a href="#Redis-列表-list" class="headerlink" title="Redis 列表(list)"></a>Redis 列表(list)</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>单键多值</p><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p><p>它的底层实际是个<strong>双向链表</strong>，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。</p><p><img src="/2022/08/15/redis6/12.png">                        </p><h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li><p>lpush&#x2F;rpush <key><value1><value2><value3> …. 从左边&#x2F;右边插入一个或多个值。</value3></value2></value1></key></p></li><li><p>lpop&#x2F;rpop <key>从左边&#x2F;右边吐出一个值。值在键在，值光键亡。</key></p></li><li><p>rpoplpush <key1><key2>从<key1>列表右边吐出一个值，插到<key2>列表左边。</key2></key1></key2></key1></p></li><li><p>lrange <key><start><stop></stop>按照索引下标获得元素(从左到右)</start></key></p></li><li><p>lrange mylist 0 -1  0左边第一个，-1右边第一个，（0-1表示获取所有）</p></li><li><p>lindex <key><index>按照索引下标获得元素(从左到右)</index></key></p></li><li><p>llen <key>获得列表长度 </key></p></li><li><p>linsert <key> before <value><newvalue>在<value>的后面插入<newvalue>插入值</newvalue></value></newvalue></value></key></p></li><li><p>lrem <key><n><value>从左边删除n个value(从左到右)</value></n></key></p></li><li><p>lset<key><index><value>将列表key下标为index的值替换成value</value></index></key></p></li></ul><h4 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h4><p>List的数据结构为快速链表quickList。</p><p>首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也即是压缩列表。</p><p>它将所有的元素紧挨着一起存储，分配的是一块连续的内存。</p><p>当数据量比较多的时候才会改成quicklist。</p><p>因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是int类型的数据，结构上还需要两个额外的指针prev和next。</p><p><img src="/2022/08/15/redis6/13.png">                               </p><p>Redis将链表和ziplist结合起来组成了quicklist。也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p><h3 id="Redis集合（Set）"><a href="#Redis集合（Set）" class="headerlink" title="Redis集合（Set）"></a>Redis集合（Set）</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p>Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以<strong>自动排重</strong>的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。</p><p>Redis的Set是string类型的无序集合。它底层其实是一个value为null的hash表，所以添加，删除，查找的**复杂度都是 ** **O(1)**。</p><p>一个算法，随着数据的增加，执行时间的长短，如果是O(1)，数据增加，查找数据的时间不变</p><h4 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li>sadd <key><value1><value2> …..</value2></value1></key></li></ul><p>将一个或多个 member 元素加入到集合 key 中，已经存在的 member 元素将被忽略</p><ul><li><p>smembers <key>取出该集合的所有值。</key></p></li><li><p>sismember <key><value>判断集合<key>是否为含有该<value>值，有1，没有0</value></key></value></key></p></li><li><p>scard<key>返回该集合的元素个数。</key></p></li><li><p>srem <key><value1><value2> …. 删除集合中的某个元素。</value2></value1></key></p></li><li><p>spop <key><strong>随机从该集合中吐出一个值。</strong></key></p></li><li><p>srandmember <key><n>随机从该集合中取出n个值。不会从集合中删除 。</n></key></p></li><li><p>smove <source><destination>value把集合中一个值从一个集合移动到另一个集合</destination></p></li><li><p>sinter <key1><key2>返回两个集合的<strong>交集</strong>元素。</key2></key1></p></li><li><p>sunion <key1><key2>返回两个集合的<strong>并集</strong>元素。</key2></key1></p></li><li><p>sdiff <key1><key2>返回两个集合的<strong>差集</strong>元素(key1中的，不包含key2中的)</key2></key1></p></li></ul><h4 id="数据结构-2"><a href="#数据结构-2" class="headerlink" title="数据结构"></a>数据结构</h4><p>Set数据结构是dict字典，字典是用哈希表实现的。</p><p>Java中HashSet的内部实现使用的是HashMap，只不过所有的value都指向同一个对象。Redis的set结构也是一样，它的内部也使用hash结构，所有的value都指向同一个内</p><h3 id="Redis哈希-Hash"><a href="#Redis哈希-Hash" class="headerlink" title="Redis哈希(Hash)"></a>Redis哈希(Hash)</h3><p>Redis hash 是一个键值对集合。</p><p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p><p>类似Java里面的Map&lt;String,Object&gt;</p><p>用户ID为查找的key，存储的value用户对象包含姓名，年龄，生日等信息，如果用普通的key&#x2F;value结构来存储</p><p>主要有以下2种存储方式：</p><table><thead><tr><th><img src="/2022/08/15/redis6/14.png" alt="image-20220812145432421"></th><th><img src="/2022/08/15/redis6/15.png"></th></tr></thead><tbody><tr><td>每次修改用户的某个属性需要，先反序列化改好后再序列化回去。开销较大。</td><td>用户ID数据冗余</td></tr></tbody></table><table><thead><tr><th><img src="/2022/08/15/redis6/16.png"></th></tr></thead></table><p>​     <strong>通过 key(用户ID) + field(属性标签) 就可以操作对应属性数据了，既不需要重复存储数据，也不会带来序列化和并发修改控制的问题</strong></p><h4 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li><p>hset <key><field><value>给<key>集合中的 <field>键赋值<value> </value></field></key></value></field></key></p></li><li><p>hget <key1><field>从<key1>集合<field>取出 value </field></key1></field></key1></p><p><img src="/2022/08/15/redis6/17.png"></p></li><li><p>hmset <key1><field1><value1><field2><value2>… 批量设置hash的值</value2></field2></value1></field1></key1></p></li><li><p>hexists<key1><field>查看哈希表 key 中，给定域 field 是否存在。 </field></key1></p></li><li><p>hkeys <key>列出该hash集合的所有field</key></p></li><li><p>hvals <key>列出该hash集合的所有value</key></p></li><li><p>hincrby <key><field><increment>为哈希表 key 中的域 field 的值加上增量 1  -1</increment></field></key></p></li><li><p>hsetnx <key><field><value>将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在 .</value></field></key></p></li></ul><h4 id="数据结构-3"><a href="#数据结构-3" class="headerlink" title="数据结构"></a>数据结构</h4><p>Hash类型对应的数据结构是两种：ziplist（压缩列表），hashtable（哈希表）。当field-value长度较短且个数较少时，使用ziplist，否则使用hashtable。</p><h3 id="Redis-有序集合Zset-sorted-set"><a href="#Redis-有序集合Zset-sorted-set" class="headerlink" title="Redis 有序集合Zset(sorted set)"></a>Redis 有序集合Zset(sorted set)</h3><p>Redis有序集合zset与普通集合set非常相似，是一个没有重复元素的字符串集合。</p><p>不同之处是有序集合的每个成员都关联了一个<strong>评分（score),这个评分（score）被用来按照</strong>从最低分到最高分的方式排序**集合中的成员。集合的成员是唯一的，但是评分可以是重复了 。</p><p>因为元素是有序的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。</p><p>访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。</p><h4 id="常用命令-4"><a href="#常用命令-4" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li><p>zadd <key><score1><value1><score2><value2>…</value2></score2></value1></score1></key></p><p>将一个或多个 member 元素及其 score 值加入到有序集 key 当中。</p></li><li><p><strong>zrange <key><start><stop></stop> [WITHSCORES]</start></key></strong>  </p><p>返回有序集 key 中，下标在<start><stop></stop>之间的元素</start></p><p>带WITHSCORES，可以让分数一起和值返回到结果集。</p></li><li><p>zrangebyscore key minmax [withscores] [limit offset count]</p><p>返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。 </p></li><li><p>zrevrangebyscore key maxmin [withscores] [limit offset count]        </p><p>同上，改为从大到小排列。 </p></li><li><p>zincrby <key><increment><value>   为元素的score加上增量</value></increment></key></p></li><li><p>zrem <key><value>删除该集合下，指定值的元素</value></key></p></li><li><p>zcount <key><min><max>统计该集合，分数区间内的元素个数 </max></min></key></p></li><li><p>zrank <key><value>返回该值在集合中的排名，从0开始。</value></key></p></li></ul><h4 id="数据结构-4"><a href="#数据结构-4" class="headerlink" title="数据结构"></a>数据结构</h4><p>SortedSet(zset)是Redis提供的一个非常特别的数据结构，一方面它等价于Java的数据结构key-value Map&lt;String, Double(评分)&gt;，可以给每一个元素value赋予一个权重score，另一方面它又类似于TreeSet，内部的元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素的列表。</p><p>zset底层使用了两个数据结构</p><p>（1）hash field和value的映射表，hash的作用就是关联元素value(field)和权重score(value)，保障元素value的唯一性，可以通过元素value找到相应的score值。</p><p>（2）跳跃表，跳跃表的目的在于给元素value排序，根据score的范围获取元素列表。</p><h5 id="跳跃表（跳表）"><a href="#跳跃表（跳表）" class="headerlink" title="跳跃表（跳表）"></a>跳跃表（跳表）</h5><p>1、简介</p><p>  有序集合在生活中比较常见，例如根据成绩对学生排名，根据得分对玩家排名等。对于有序集合的底层实现，可以用数组、平衡树、链表等。数组不便元素的插入、删除；平衡树或红黑树虽然效率高但结构复杂；链表查询需要遍历所有效率低。Redis采用的是跳跃表。跳跃表效率堪比红黑树，实现远比红黑树简单。</p><p>2、实例</p><p>  对比有序链表和跳跃表，从链表中查询出51</p><p>（1）  有序链表</p><p><img src="/2022/08/15/redis6/18.png">                               </p><p>要查找值为51的元素，需要从第一个元素开始依次查找、比较才能找到。共需要6次比较。</p><p>（2）  跳跃表</p><p> <img src="/2022/08/15/redis6/19.png"></p><p>从第2层开始，1节点比51节点小，向后比较。</p><p>21节点比51节点小，继续向后比较，后面就是NULL了，所以从21节点向下到第1层</p><p>在第1层，41节点比51节点小，继续向后，61节点比51节点大，所以从41向下</p><p>在第0层，51节点为要查找的节点，节点被找到，共查找4次。</p><p>从此可以看出跳跃表比有序链表效率要高</p><h3 id="关于redis重要的配置"><a href="#关于redis重要的配置" class="headerlink" title="关于redis重要的配置"></a>关于redis重要的配置</h3><h4 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h4><p>修改redis.conf(128行)文件将里面的daemonize no 改成 yes</p><p>在进行redis服务器启动的时候需要携带该配置文件</p><h4 id="网络相关配置"><a href="#网络相关配置" class="headerlink" title="网络相关配置"></a>网络相关配置</h4><p>默认情况bind&#x3D;127.0.0.1只能接受本机的访问请求</p><p>不写的情况下，无限制接受任何ip地址的访问</p><p>生产环境肯定要写你应用服务器的地址；服务器是需要远程访问的，所以需要将其注释掉</p><p>如果开启了protected-mode，那么在没有设定bind ip且没有设密码的情况下，Redis只允许接受本机的响应</p><h4 id="protected-mode-支持远程访问"><a href="#protected-mode-支持远程访问" class="headerlink" title="protected-mode 支持远程访问"></a>protected-mode 支持远程访问</h4><p>将本机访问保护模式设置no</p><p>让外部的机器可以访问</p><h3 id="Redis的发布和订阅"><a href="#Redis的发布和订阅" class="headerlink" title="Redis的发布和订阅"></a>Redis的发布和订阅</h3><h4 id="什么是发布和订阅"><a href="#什么是发布和订阅" class="headerlink" title="什么是发布和订阅"></a><strong>什么是发布和订阅</strong></h4><p>Redis 发布订阅 (pub&#x2F;sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</p><p>Redis 客户端可以订阅任意数量的频道。</p><p>1、客户端可以订阅频道如下图</p><p><img src="/2022/08/15/redis6/101.png">                               </p><p>2、当给这个频道发布消息后，消息就会发送给订阅的客户端</p><p> <img src="/2022/08/15/redis6/20.png"></p><h4 id="发布订阅命令实现"><a href="#发布订阅命令实现" class="headerlink" title="发布订阅命令实现"></a>发布订阅命令实现</h4><p>1、 打开一个客户端订阅channel1</p><p>SUBSCRIBE channel1 订阅channel1 频道</p><p><img src="/2022/08/15/redis6/21.png">                               </p><p>2、打开另一个客户端，给channel1发布消息hello</p><p>publish channel1 hello</p><p> <img src="/2022/08/15/redis6/22.png"></p><p>返回的1是订阅者数量</p><p>3、打开第一个客户端可以看到发送的消息</p><p><img src="/2022/08/15/redis6/23.png"> </p><p>注：发布的消息没有持久化，如果在订阅的客户端收不到hello，只能收到订阅后发布的消息</p><h2 id="Redis新数据类型"><a href="#Redis新数据类型" class="headerlink" title="Redis新数据类型"></a>Redis新数据类型</h2><h3 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h3><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><p>现代计算机用二进制（位） 作为信息的基础单位， 1个字节等于8位， 例如“abc”字符串是由3个字节组成， 但实际在计算机存储时将其用二进制表示， “abc”分别对应的ASCII码分别是97、 98、 99， 对应的二进制分别是01100001、 01100010和01100011，如下图</p><p>  <img src="/2022/08/15/redis6/24.png">                             </p><p>合理地使用操作位能够有效地提高内存使用率和开发效率。</p><p>   Redis提供了Bitmaps这个“数据类型”可以实现对位的操作：</p><p>（1）  Bitmaps本身不是一种数据类型， 实际上它就是字符串（key-value） ， 但是它可以对字符串的位进行操作。</p><p>（2）  Bitmaps单独提供了一套命令， 所以在Redis中使用Bitmaps和使用字符串的方法不太相同。 可以把Bitmaps想象成一个以位为单位的数组， 数组的每个单元只能存储0和1， 数组的下标在Bitmaps中叫做偏移量。</p><p> <img src="/2022/08/15/redis6/25.png"></p><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><h5 id="1、setbit"><a href="#1、setbit" class="headerlink" title="1、setbit"></a>1、setbit</h5><p>（1）格式</p><p>setbit<key><offset><value>设置Bitmaps中某个偏移量的值（0或1）</value></offset></key></p><p><img src="/2022/08/15/redis6/26.png">                    </p><p>*offset:偏移量从0开始</p><p>（2）实例</p><p>每个独立用户是否访问过网站存放在Bitmaps中， 将访问的用户记做1， 没有访问的用户记做0， 用偏移量作为用户的id。</p><p>设置键的第offset个位的值（从0算起） ， 假设现在有20个用户，userid&#x3D;1， 6， 11， 15， 19的用户对网站进行了访问， 那么当前Bitmaps初始化结果如图</p><p> <img src="/2022/08/15/redis6/27.png"></p><p>unique:users:20201106代表2020-11-06这天的独立访问用户的Bitmaps</p><p> <img src="/2022/08/15/redis6/28.png"></p><p>注：</p><p>很多应用的用户id以一个指定数字（例如10000） 开头， 直接将用户id和Bitmaps的偏移量对应势必会造成一定的浪费， 通常的做法是每次做setbit操作时将用户id减去这个指定数字。</p><p>在第一次初始化Bitmaps时， 假如偏移量非常大， 那么整个初始化过程执行会比较慢， 可能会造成Redis的阻塞。</p><h5 id="2、getbit"><a href="#2、getbit" class="headerlink" title="2、getbit"></a>2、getbit</h5><p>（1）格式</p><p>getbit<key><offset>获取Bitmaps中某个偏移量的值</offset></key></p><p> <img src="/2022/08/15/redis6/29.png"></p><p>获取键的第offset位的值（从0开始算）</p><p>（2）实例</p><p>获取id&#x3D;8的用户是否在2020-11-06这天访问过， 返回0说明没有访问过：</p><p> <img src="/2022/08/15/redis6/30.png"></p><p>注：因为100根本不存在，所以也是返回0</p><h5 id="3、bitcount"><a href="#3、bitcount" class="headerlink" title="3、bitcount"></a>3、bitcount</h5><p>统计<strong>字符串</strong>被设置为1的bit数。一般情况下，给定的整个字符串都会被进行计数，通过指定额外的 start 或 end 参数，可以让计数只在特定的位上进行。start 和 end 参数的设置，都可以使用负数值：比如 -1 表示最后一个位，而 -2 表示倒数第二个位，start、end 是指bit组的字节的下标数，二者皆包含。</p><p>（1）格式</p><p>bitcount<key>[start end] 统计字符串从start字节到end字节比特值为1的数量</key></p><p><img src="/2022/08/15/redis6/31.png">                               </p><p>（2）实例</p><p>计算2022-11-06这天的独立访问用户数量</p><p> <img src="/2022/08/15/redis6/32.png"></p><p>start和end代表起始和结束字节数， 下面操作计算用户id在第1个字节到第3个字节之间的独立访问用户数， 对应的用户id是11， 15， 19。</p><p> <img src="/2022/08/15/redis6/100.png"></p><p>举例： K1 【01000001 01000000 00000000 00100001】，对应【0，1，2，3】</p><p>bitcount K1 1 2 ： 统计下标1、2字节组中bit&#x3D;1的个数，即01000000 00000000</p><p>–》bitcount K1 1 2 　　–》1</p><p>bitcount K1 1 3 ： 统计下标1、2字节组中bit&#x3D;1的个数，即01000000 00000000 00100001</p><p>–》bitcount K1 1 3　　–》3</p><p>bitcount K1 0 -2 ： 统计下标0到下标倒数第2，字节组中bit&#x3D;1的个数，即01000001 01000000  00000000</p><p>–》bitcount K1 0 -2　　–》3</p><p> 注意：redis的setbit设置或清除的是bit位置，而bitcount计算的是byte位置</p><h5 id="4、bitop"><a href="#4、bitop" class="headerlink" title="4、bitop"></a>4、bitop</h5><p>(1)格式</p><p>bitop and(or&#x2F;not&#x2F;xor) <destkey> [key…]</destkey></p><p>​    <img src="/2022/08/15/redis6/33.png" alt="image-20220812202704726">                           </p><p>bitop是一个复合操作， 它可以做多个Bitmaps的and（交集） 、 or（并集） 、 not（非） 、 xor（异或） 操作并将结果保存在destkey中。</p><p>(2)实例</p><p>2020-11-04 日访问网站的userid&#x3D;1,2,5,9。</p><p>setbit unique:users:20201104 1 1</p><p>setbit unique:users:20201104 2 1</p><p>setbit unique:users:20201104 5 1</p><p>setbit unique:users:20201104 9 1</p><p>2020-11-03 日访问网站的userid&#x3D;0,1,4,9。</p><p>setbit unique:users:20201103 0 1</p><p>setbit unique:users:20201103 1 1</p><p>setbit unique:users:20201103 4 1</p><p>setbit unique:users:20201103 9 1</p><p>计算出两天都访问过网站的用户数量</p><p>bitop and unique:users:and:20201104_03</p><p> unique:users:20201103 unique:users:20201104</p><p> <img src="/2022/08/15/redis6/34.png"></p><p> <img src="/2022/08/15/redis6/35.png"></p><p>计算出任意一天都访问过网站的用户数量（例如月活跃就是类似这种） ， 可以使用or求并集</p><p> <img src="/2022/08/15/redis6/36.png"></p><h4 id="Bitmaps与set对比"><a href="#Bitmaps与set对比" class="headerlink" title="Bitmaps与set对比"></a>Bitmaps与set对比</h4><p><strong>Bitmaps</strong>用于记录活跃的用户更为方便</p><p>假设网站有1亿用户， 每天独立访问的用户有5千万， 如果每天用集合类型和Bitmaps分别存储活跃用户可以得到表</p><table><thead><tr><th>set和Bitmaps存储一天活跃用户对比</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>数据  类型</td><td>每个用户id占用空间</td><td>需要存储的用户量</td><td>全部内存量</td></tr><tr><td>集合  类型</td><td>64位</td><td>50000000</td><td>64位*50000000 &#x3D; 400MB</td></tr><tr><td>Bitmaps</td><td>1位</td><td>100000000</td><td>1位*100000000 &#x3D; 12.5MB</td></tr></tbody></table><p>很明显， 这种情况下使用Bitmaps能节省很多的内存空间， 尤其是随着时间推移节省的内存还是非常可观的</p><table><thead><tr><th>set和Bitmaps存储独立用户空间对比</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>数据类型</td><td>一天</td><td>一个月</td><td>一年</td></tr><tr><td>集合类型</td><td>400MB</td><td>12GB</td><td>144GB</td></tr><tr><td>Bitmaps</td><td>12.5MB</td><td>375MB</td><td>4.5GB</td></tr></tbody></table><p>但Bitmaps并不是万金油， 假如该网站每天的独立访问用户很少， 例如只有10万（大量的僵尸用户） ， 那么两者的对比如下表所示， 很显然， 这时候使用Bitmaps就不太合适了， 因为基本上大部分位都是0。</p><table><thead><tr><th>set和Bitmaps存储一天活跃用户对比（独立用户比较少）</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>数据类型</td><td>每个userid占用空间</td><td>需要存储的用户量</td><td>全部内存量</td></tr><tr><td>集合类型</td><td>64位</td><td>100000</td><td>64位*100000 &#x3D; 800KB</td></tr><tr><td>Bitmaps</td><td>1位</td><td>100000000</td><td>1位*100000000 &#x3D; 12.5MB</td></tr></tbody></table><h3 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h3><h4 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h4><p>在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站PV（PageView页面访问量）,可以使用Redis的incr、incrby轻松实现。</p><p>但像UV（UniqueVisitor，独立访客）、独立IP数、搜索记录数等需要去重和计数的问题如何解决？这种求集合中不重复元素个数的问题称为基数问题。</p><p>解决基数问题有很多种方案：</p><p>（1）数据存储在MySQL表中，使用distinct count计算不重复个数</p><p>（2）使用Redis提供的hash、set、bitmaps等数据结构来处理</p><p>以上的方案结果精确，但随着数据不断增加，导致占用空间越来越大，对于非常大的数据集是不切实际的。</p><p>能否能够降低一定的精度来平衡存储空间？Redis推出了HyperLogLog</p><p>Redis HyperLogLog 是用来做<strong>基数统计</strong>的算法，HyperLogLog 的优点是，在<strong>输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的</strong>。</p><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p><p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p><p>什么是基数?</p><p>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。</p><p>基数集个数：去重之后的数据个数</p><h4 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h4><h5 id="1、pfadd"><a href="#1、pfadd" class="headerlink" title="1、pfadd"></a>1、pfadd</h5><p>向基数集中添加数据，可以同时添加多个，但是添加重复是被去重</p><p>（1）格式</p><p>pfadd <key>&lt; element&gt; [element …]  添加指定元素到 HyperLogLog 中</key></p><p><img src="/2022/08/15/redis6/37.png">                               </p><p>（2）实例</p><p><img src="/2022/08/15/redis6/38.png">                               </p><p>   将所有元素添加到指定HyperLogLog数据结构中。如果执行命令后HLL估计的近似基数发生变化，则返回1，否则返回0。</p><h5 id="2、pfcount"><a href="#2、pfcount" class="headerlink" title="2、pfcount"></a>2、pfcount</h5><p>计算基数集中数据数量</p><p>（1）格式</p><p>pfcount<key> [key …] 计算HLL的近似基数，可以计算多个HLL，比如用HLL存储每天的UV，计算一周的UV可以使用7天的UV合并计算即可</key></p><p><img src="/2022/08/15/redis6/39.png">                               </p><p>（2）实例</p><p><img src="/2022/08/15/redis6/40.png"> </p><h5 id="3、pfmerge"><a href="#3、pfmerge" class="headerlink" title="3、pfmerge"></a>3、pfmerge</h5><p>（1）格式</p><p>pfmerge<destkey><sourcekey> [sourcekey …] 将一个或多个HLL合并后的结果存储在另一个HLL中，比如每月活跃用户可以使用每天的活跃用户来合并计算可得</sourcekey></destkey></p><p><img src="/2022/08/15/redis6/41.png"> </p><p>（2）实例</p><p> <img src="/2022/08/15/redis6/42.png"></p><h3 id="Geospatial"><a href="#Geospatial" class="headerlink" title="Geospatial"></a>Geospatial</h3><p>针对地理信息的操作</p><h4 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h4><p>Redis 3.2 中增加了对GEO类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度。redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作。</p><h4 id="命令-2"><a href="#命令-2" class="headerlink" title="命令"></a><strong>命令</strong></h4><h5 id="1、geoadd"><a href="#1、geoadd" class="headerlink" title="1、geoadd"></a>1、geoadd</h5><p>（1）格式</p><p>geoadd<key>&lt; longitude&gt;<latitude><member> [longitude latitude member…]  添加地理位置（经度，纬度，名称）</member></latitude></key></p><p>  <img src="/2022/08/15/redis6/43.png" alt="image-20220812212248113">                           </p><p>（2）实例</p><p>geoadd china:city 121.47 31.23 shanghai</p><p>geoadd china:city 106.50 29.53 chongqing 114.05 22.52 shenzhen 116.38 39.90 beijing</p><p> <img src="/2022/08/15/redis6/44.png"></p><p>两极无法直接添加，一般会下载城市数据，直接通过 Java 程序一次性导入。</p><p>有效的经度从 -180 度到 180 度。有效的纬度从 -85.05112878 度到 85.05112878 度。</p><p>当坐标位置超出指定范围时，该命令将会返回一个错误。</p><p>已经添加的数据，是无法再次往里面添加的。</p><h5 id="2、geopos"><a href="#2、geopos" class="headerlink" title="2、geopos"></a>2、geopos</h5><p>（1）格式</p><p>geopos <key><member> [member…] 获得指定地区的坐标值</member></key></p><p> <img src="/2022/08/15/redis6/45.png"></p><p>（2）实例</p><p><img src="/2022/08/15/redis6/46.png" alt="image-20220812212355110"></p><h5 id="3、geodist"><a href="#3、geodist" class="headerlink" title="3、geodist"></a>3、geodist</h5><p>（1）格式</p><p>geodist<key><member1><member2> [m|km|ft|mi ] 获取两个位置之间的直线距离</member2></member1></key></p><p> <img src="/2022/08/15/redis6/47.png" alt="image-20220812212409351"></p><p>（2）实例</p><p>获取两个位置之间的直线距离</p><p> <img src="/2022/08/15/redis6/48.png"></p><p>单位：</p><p>m 表示单位为米[默认值]。</p><p>km 表示单位为千米。</p><p>mi 表示单位为英里。</p><p>ft 表示单位为英尺。</p><p>如果用户没有显式地指定单位参数， 那么 GEODIST 默认使用米作为单位</p><h5 id="4、georadius"><a href="#4、georadius" class="headerlink" title="4、georadius"></a>4、georadius</h5><p>（1）格式</p><p>georadius<key>&lt; longitude&gt;<latitude>radius m|km|ft|mi  以给定的经纬度为中心，找出某一半径内的元素</latitude></key></p><p> <img src="/2022/08/15/redis6/49.png"></p><p>经度 纬度 距离 单位</p><p>（2）实例</p><p> <img src="/2022/08/15/redis6/50.png"></p><h2 id="Redis-Jedis-测试"><a href="#Redis-Jedis-测试" class="headerlink" title="Redis_Jedis_测试"></a>Redis_Jedis_测试</h2><h3 id="使用宝塔面板"><a href="#使用宝塔面板" class="headerlink" title="使用宝塔面板"></a>使用宝塔面板</h3><p><a href="https://blog.csdn.net/terrenc_wyp/article/details/123737957">(69条消息) idea连接云服务器上的redis报错：Failed to connect to any host resolved for DNS name.【已解决】_鹏少学Java的博客-CSDN博客</a></p><p>我是报的这个错误</p><p>首先跟着开启6379端口服务并重启防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启6379端口服务</span></span><br><span class="line">firewall-cmd --zone=public --add-port=6379/tcp --permanent</span><br><span class="line"><span class="comment"># 重启防火墙</span></span><br><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure><p>但是还是报错</p><p>腾讯云的宝塔面板需要到控制台开启6379端口访问</p><p><img src="/2022/08/15/redis6/51.png" alt="宝塔linux开启6379防火墙"></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>最后在idea上进行ping连通</p><p><img src="/2022/08/15/redis6/52.png"></p><h4 id="解决控制台日常报错"><a href="#解决控制台日常报错" class="headerlink" title="解决控制台日常报错"></a>解决控制台日常报错</h4><p><img src="/2022/08/15/redis6/53.png"></p><p>这是因为日志的版本不匹配报错</p><p>所以在pom文件中导入对应坐标</p><p>即可解决</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Jedis常用操作"><a href="#Jedis常用操作" class="headerlink" title="Jedis常用操作"></a>Jedis常用操作</h2><h3 id="Jedis-API-Key"><a href="#Jedis-API-Key" class="headerlink" title="Jedis-API:  Key"></a>Jedis-API:  Key</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">jedis.set(<span class="string">&quot;k1&quot;</span>,  <span class="string">&quot;v1&quot;</span>);  </span><br><span class="line">jedis.set(<span class="string">&quot;k2&quot;</span>,  <span class="string">&quot;v2&quot;</span>);  </span><br><span class="line">jedis.set(<span class="string">&quot;k3&quot;</span>,  <span class="string">&quot;v3&quot;</span>);  </span><br><span class="line">Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);  </span><br><span class="line">System.out.println(keys.size());  </span><br><span class="line"><span class="keyword">for</span> (String key : keys) &#123;  </span><br><span class="line">    System.out.println(key);  </span><br><span class="line">&#125;  </span><br><span class="line">System.out.println(jedis.exists(<span class="string">&quot;k1&quot;</span>));  </span><br><span class="line">System.out.println(jedis.ttl(<span class="string">&quot;k1&quot;</span>));          </span><br><span class="line">System.out.println(jedis.get(<span class="string">&quot;k1&quot;</span>));  </span><br></pre></td></tr></table></figure><h3 id="Jedis-API-String"><a href="#Jedis-API-String" class="headerlink" title="Jedis-API:  String"></a>Jedis-API:  String</h3>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jedis.mset(<span class="string">&quot;str1&quot;</span>,<span class="string">&quot;v1&quot;</span>,<span class="string">&quot;str2&quot;</span>,<span class="string">&quot;v2&quot;</span>,<span class="string">&quot;str3&quot;</span>,<span class="string">&quot;v3&quot;</span>);  </span><br><span class="line">System.out.println(jedis.mget(<span class="string">&quot;str1&quot;</span>,<span class="string">&quot;str2&quot;</span>,<span class="string">&quot;str3&quot;</span>));  </span><br></pre></td></tr></table></figure><h3 id="Jedis-API-List"><a href="#Jedis-API-List" class="headerlink" title="Jedis-API:  List"></a>Jedis-API:  List</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jedis.lpush(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;lucy&quot;</span>,<span class="string">&quot;mary&quot;</span>,<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">List&lt;String&gt; list = jedis.lrange(<span class="string">&quot;mylist&quot;</span>,<span class="number">0</span>,-<span class="number">1</span>);  </span><br><span class="line"><span class="keyword">for</span> (String element : list) &#123;  System.out.println(element);  &#125;  </span><br></pre></td></tr></table></figure><h3 id="Jedis-API-set"><a href="#Jedis-API-set" class="headerlink" title="Jedis-API:  set"></a>Jedis-API:  set</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jedis.sadd(<span class="string">&quot;orders&quot;</span>,  <span class="string">&quot;order01&quot;</span>);  </span><br><span class="line">jedis.sadd(<span class="string">&quot;orders&quot;</span>,  <span class="string">&quot;order02&quot;</span>);  </span><br><span class="line">jedis.sadd(<span class="string">&quot;orders&quot;</span>,  <span class="string">&quot;order03&quot;</span>);  </span><br><span class="line">jedis.sadd(<span class="string">&quot;orders&quot;</span>,  <span class="string">&quot;order04&quot;</span>);  </span><br><span class="line">Set&lt;String&gt; smembers = jedis.smembers(<span class="string">&quot;orders&quot;</span>);  </span><br><span class="line"><span class="keyword">for</span> (String order : smembers) &#123;  </span><br><span class="line">    System.out.println(order);  </span><br><span class="line">&#125;  </span><br><span class="line">jedis.srem(<span class="string">&quot;orders&quot;</span>,  <span class="string">&quot;order02&quot;</span>);  </span><br></pre></td></tr></table></figure><h3 id="Jedis-API-hash"><a href="#Jedis-API-hash" class="headerlink" title="Jedis-API:  hash"></a>Jedis-API:  hash</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">jedis.hset(<span class="string">&quot;hash1&quot;</span>,<span class="string">&quot;userName&quot;</span>,<span class="string">&quot;lisi&quot;</span>);  </span><br><span class="line">System.out.println(jedis.hget(<span class="string">&quot;hash1&quot;</span>,<span class="string">&quot;userName&quot;</span>));  </span><br><span class="line">Map&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,String&gt;(); map.put(<span class="string">&quot;telphone&quot;</span>,<span class="string">&quot;13810169999&quot;</span>);  </span><br><span class="line">map.put(<span class="string">&quot;address&quot;</span>,<span class="string">&quot;atguigu&quot;</span>);  </span><br><span class="line">map.put(<span class="string">&quot;email&quot;</span>,<span class="string">&quot;abc@163.com&quot;</span>);  </span><br><span class="line">jedis.hmset(<span class="string">&quot;hash2&quot;</span>,map);  </span><br><span class="line">List&lt;String&gt; result = jedis.hmget(<span class="string">&quot;hash2&quot;</span>,  <span class="string">&quot;telphone&quot;</span>,<span class="string">&quot;email&quot;</span>);  </span><br><span class="line"><span class="keyword">for</span> (String element : result) &#123;  </span><br><span class="line">    System.out.println(element);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="Jedis-API-zset"><a href="#Jedis-API-zset" class="headerlink" title="Jedis-API:  zset"></a>Jedis-API:  zset</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jedis.zadd(<span class="string">&quot;zset01&quot;</span>,  <span class="number">100d</span>, <span class="string">&quot;z3&quot;</span>);  </span><br><span class="line">jedis.zadd(<span class="string">&quot;zset01&quot;</span>, <span class="number">90d</span>,  <span class="string">&quot;l4&quot;</span>);  </span><br><span class="line">jedis.zadd(<span class="string">&quot;zset01&quot;</span>, <span class="number">80d</span>,  <span class="string">&quot;w5&quot;</span>);  </span><br><span class="line">jedis.zadd(<span class="string">&quot;zset01&quot;</span>, <span class="number">70d</span>,  <span class="string">&quot;z6&quot;</span>);     </span><br><span class="line">Set&lt;String&gt; zrange = jedis.zrange(<span class="string">&quot;zset01&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);  </span><br><span class="line"><span class="keyword">for</span> (String e : zrange) &#123;  </span><br><span class="line">    System.out.println(e);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="Redis-Jedis实例-手机验证码"><a href="#Redis-Jedis实例-手机验证码" class="headerlink" title="Redis_Jedis实例 手机验证码"></a>Redis_Jedis实例 手机验证码</h2><p>要求：</p><ul><li>1、输入手机号，点击发送后随机生成6位数字码，2分钟有效</li><li>2、输入验证码，点击验证，返回成功或失败</li><li>3、每个手机号每天只能输入3次</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneCode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送验证码</span></span><br><span class="line">        verifyCode(<span class="string">&quot;13129160209&quot;</span>);</span><br><span class="line"><span class="comment">//        getRedisCode(&quot;13129160209&quot;,&quot;929348&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.验证码的校验</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getRedisCode</span><span class="params">(String phone,String code)</span>&#123;</span><br><span class="line">        <span class="comment">//创建Jedis对象</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;119.91.80.***&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//验证码key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">codeKey</span> <span class="operator">=</span> <span class="string">&quot;verifyCode&quot;</span> + phone + <span class="string">&quot;:code&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">redisCode</span> <span class="operator">=</span> jedis.get(codeKey);</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span> (redisCode.equals(code))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成功！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.设置每个手机每天只能发送三次验证码,将获得的验证码放入redis中并设置过期时间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">verifyCode</span><span class="params">(String phone)</span>&#123;</span><br><span class="line">        <span class="comment">//创建Jedis对象</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;119.91.80.196&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拼接key</span></span><br><span class="line">        <span class="comment">//手机发送次数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">countKey</span> <span class="operator">=</span> <span class="string">&quot;verifyCode&quot;</span> + phone + <span class="string">&quot;:count&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//验证码key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">codeKey</span> <span class="operator">=</span> <span class="string">&quot;verifyCode&quot;</span> + phone + <span class="string">&quot;:code&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//每个手机每天只能发送三次</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">count</span> <span class="operator">=</span> jedis.get(countKey);</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//没有发送次数,第一次发送设置值为1</span></span><br><span class="line">            <span class="comment">//设置可以,过期时间为一天,第一次记录值为1</span></span><br><span class="line">            jedis.setex(countKey,<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Integer.parseInt(count)&lt;=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="comment">//不是第一次发送 发送次数加1</span></span><br><span class="line">            jedis.incr(countKey);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Integer.parseInt(count)&gt;<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="comment">//发送次元大于2了,超出发送次数提示</span></span><br><span class="line">            System.out.println(<span class="string">&quot;今天的发送次数已达上限&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="comment">//执行到三次以上之后总结退出程序</span></span><br><span class="line">            <span class="comment">//因为即便是执行了jedis.close();下面的发生验证码也会执行</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将验证码存放到redis中</span></span><br><span class="line">        <span class="comment">//生成6位验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">vcode</span> <span class="operator">=</span> getCode();</span><br><span class="line">        <span class="comment">//存放在redis中,key为codeKey = &quot;verifyCode&quot; + phone + &quot;:code&quot;;并设置两分钟过期时间</span></span><br><span class="line">        jedis.setex(codeKey,<span class="number">120</span>,vcode);</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1.生成6位数字验证码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCode</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rand</span> <span class="operator">=</span> random.nextInt(<span class="number">10</span>);</span><br><span class="line">            code+=rand;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Springboot整合redis"><a href="#Springboot整合redis" class="headerlink" title="Springboot整合redis"></a>Springboot整合redis</h2><h3 id="导入坐标"><a href="#导入坐标" class="headerlink" title="导入坐标"></a>导入坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里需要导入web组件 因为在redis配置类中引入了对应的类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring2.X集成redis所需common-pool2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置redis文件"><a href="#配置redis文件" class="headerlink" title="配置redis文件"></a>配置redis文件</h3><p>在新版springboot中可以直接使用RedisTemplate对象操作redis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">//key序列化方式</span></span><br><span class="line">        template.setKeySerializer(redisSerializer);</span><br><span class="line">        <span class="comment">//value序列化</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">//value hashmap序列化</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="comment">//解决查询缓存转换异常的问题</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span></span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofSeconds(<span class="number">600</span>))</span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))</span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line">        <span class="type">RedisCacheManager</span> <span class="variable">cacheManager</span> <span class="operator">=</span> RedisCacheManager.builder(factory)</span><br><span class="line">                .cacheDefaults(config)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/redisTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTestController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testRedis</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//设置值到redis</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">        <span class="comment">//从redis获取值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String)redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在网页上访问对应地址出现对应信息</p><h2 id="Redis-事务-锁机制-秒杀"><a href="#Redis-事务-锁机制-秒杀" class="headerlink" title="Redis _事务 _锁机制 _秒杀"></a>Redis _事务 _锁机制 _秒杀</h2><h3 id="redis的事务定义"><a href="#redis的事务定义" class="headerlink" title="redis的事务定义"></a>redis的事务定义</h3><p>Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p><p>Redis事务的主要作用就是<strong>串联多个命令</strong>防止别的命令插队。</p><p>组队中：有事务错误执行则所有事务进行回滚，不继续执行</p><p>执行中：不保证原子性，所有命令能正常执行的正常执行，错误的命令不进行进行</p><h3 id="Multi、Exec、discard"><a href="#Multi、Exec、discard" class="headerlink" title="Multi、Exec、discard"></a>Multi、Exec、discard</h3><p>从输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入Exec后，Redis会将之前的命令队列中的命令依次执行。</p><p>组队的过程中可以通过discard来放弃组队。</p><p>Multi：类似于mysql中的开始事务</p><p>Exec：类型mysql中的提交事务commit</p><p>discard：类型mysql中的回滚事务</p><p><img src="/2022/08/15/redis6/54.png"></p><h3 id="事务的错误处理"><a href="#事务的错误处理" class="headerlink" title="事务的错误处理"></a>事务的错误处理</h3><p>组队中某个命令出现了报告错误，执行时整个的所有队列都会被取消。</p><p><img src="/2022/08/15/redis6/55.png"></p><p>如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚。</p><p><img src="/2022/08/15/redis6/56.png"></p><h3 id="事务冲突问题"><a href="#事务冲突问题" class="headerlink" title="事务冲突问题"></a>事务冲突问题</h3><p>三个请求同时在账号消费，导致负金额，解决此事务冲突使用锁🔒机制</p><p><img src="/2022/08/15/redis6/57.png"></p><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><p>你在进行数据操作的时候，对数据进行上锁，别人都不能操作，只有等你操作完成之后释放锁，别人才能进行操作—-效率较低</p><p><strong>悲观锁(Pessimistic Lock)</strong>, 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。<strong>传统的关系型数据库里边就用到了很多这种锁机制</strong>，比如<strong>行锁</strong>，<strong>表锁</strong>等，<strong>读锁</strong>，<strong>写锁</strong>等，都是在做操作之前先上锁。</p><p><img src="/2022/08/15/redis6/58.png"></p><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p><strong>乐观锁(Optimistic Lock),</strong> 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。<strong>乐观锁适用于多读的应用类型，这样可以提高吞吐量</strong>。Redis就是利用这种check-and-set机制实现事务的。</p><h4 id="WATCH-key-key-…"><a href="#WATCH-key-key-…" class="headerlink" title="WATCH key [key …]"></a>WATCH key [key …]</h4><p>redis中执行乐观锁</p><p>在执行multi之前，先执行watch key1 [key2],可以监视一个(或多个) key ，如果在事务<strong>执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</strong></p><h4 id="unwatch"><a href="#unwatch" class="headerlink" title="unwatch"></a>unwatch</h4><p>取消 WATCH 命令对所有 key 的监视。</p><p>如果在执行 WATCH 命令之后，EXEC 命令或DISCARD 命令先被执行了的话，那么就不需要再执行UNWATCH 了</p><h3 id="Redis事务三大特性"><a href="#Redis事务三大特性" class="headerlink" title="Redis事务三大特性"></a>Redis事务三大特性</h3><h4 id="单独的隔离操作"><a href="#单独的隔离操作" class="headerlink" title="单独的隔离操作"></a>单独的隔离操作</h4><ul><li>事务中的所有命令都会序列化、按顺序地执行。</li><li>事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li></ul><h4 id="没有隔离级别的概念"><a href="#没有隔离级别的概念" class="headerlink" title="没有隔离级别的概念"></a>没有隔离级别的概念</h4><ul><li>队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行</li></ul><h4 id="不保证原子性"><a href="#不保证原子性" class="headerlink" title="不保证原子性"></a>不保证原子性</h4><ul><li>事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚</li></ul><h2 id="秒杀案列"><a href="#秒杀案列" class="headerlink" title="秒杀案列"></a>秒杀案列</h2><p>根据前端页面传输两个参数一个是用户id，一个是产品id进行秒杀</p><p>将用户id作为value进行存放，库存数量根据秒杀递减</p><p>前端jsp页面提交，会进入到servlet请求中，在SecKillServlet中获得参数最后执行调用操作redis的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 秒杀案例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecKillServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SecKillServlet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获得请求参数</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">50000</span>) +<span class="string">&quot;&quot;</span> ;</span><br><span class="line">      <span class="type">String</span> <span class="variable">prodid</span> <span class="operator">=</span>request.getParameter(<span class="string">&quot;prodid&quot;</span>);</span><br><span class="line">      <span class="comment">//传入到对应方法中进行执行redis操作</span></span><br><span class="line">      <span class="type">boolean</span> isSuccess=SecKill_redis.doSecKill(userid,prodid);</span><br><span class="line">      response.getWriter().print(isSuccess);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecKill_redis</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.44.168&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        System.out.println(jedis.ping());</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//秒杀过程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">doSecKill</span><span class="params">(String uid, String prodid)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1 uid和prodid非空判断</span></span><br><span class="line">        <span class="keyword">if</span> (uid == <span class="literal">null</span> || prodid == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        2 连接redis</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.44.168&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 拼接key</span></span><br><span class="line">        <span class="comment">// 3.1 库存key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">kcKey</span> <span class="operator">=</span> <span class="string">&quot;sk:&quot;</span> + prodid + <span class="string">&quot;:qt&quot;</span>;</span><br><span class="line">        <span class="comment">// 3.2 秒杀成功用户key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userKey</span> <span class="operator">=</span> <span class="string">&quot;sk:&quot;</span> + prodid + <span class="string">&quot;:user&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4 获取库存，如果库存null，秒杀还没有开始</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">kc</span> <span class="operator">=</span> jedis.get(kcKey);</span><br><span class="line">        <span class="keyword">if</span> (kc == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;秒杀还没有开始，请等待&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5 判断用户是否重复秒杀操作</span></span><br><span class="line">        <span class="keyword">if</span> (jedis.sismember(userKey, uid)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;已经秒杀成功了，不能重复秒杀&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6 判断如果商品数量，库存数量小于1，秒杀结束</span></span><br><span class="line">        <span class="keyword">if</span> (Integer.parseInt(kc) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;秒杀已经结束了&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        7.1 库存-1</span></span><br><span class="line">        jedis.decr(kcKey);</span><br><span class="line"><span class="comment">//        7.2 把秒杀成功用户添加清单里面</span></span><br><span class="line">        jedis.sadd(userKey,uid);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;秒杀成功了..&quot;</span>);</span><br><span class="line">        jedis.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在进行并发操作的时候会出现超卖和连接超时问题</p><h3 id="连接超时解决"><a href="#连接超时解决" class="headerlink" title="连接超时解决"></a>连接超时解决</h3><h4 id="设置redis连接池"><a href="#设置redis连接池" class="headerlink" title="设置redis连接池"></a>设置redis连接池</h4><p>节省每次连接redis服务带来的消耗，把连接好的实例反复利用。</p><p>通过参数管理连接的行为</p><h5 id="链接池参数"><a href="#链接池参数" class="headerlink" title="链接池参数"></a>链接池参数</h5><ul><li>MaxTotal：控制一个pool可分配多少个jedis实例，通过pool.getResource()来获取；如果赋值为-1，则表示不限制；如果pool已经分配了MaxTotal个jedis实例，则此时pool的状态为exhausted。</li><li>maxIdle：控制一个pool最多有多少个状态为idle(空闲)的jedis实例；</li><li>MaxWaitMillis：表示当borrow一个jedis实例时，最大的等待毫秒数，如果超过等待时间，则直接抛JedisConnectionException；</li><li>testOnBorrow：获得一个jedis实例的时候是否检查连接可用性（ping()）；如果为true，则得到的jedis实例均是可用的；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisPoolUtil</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">JedisPool</span> <span class="variable">jedisPool</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="title function_">JedisPoolUtil</span><span class="params">()</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> JedisPool <span class="title function_">getJedisPoolInstance</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="literal">null</span> == jedisPool) &#123;</span><br><span class="line">         <span class="keyword">synchronized</span> (JedisPoolUtil.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == jedisPool) &#123;</span><br><span class="line">               <span class="type">JedisPoolConfig</span> <span class="variable">poolConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">               poolConfig.setMaxTotal(<span class="number">200</span>);</span><br><span class="line">               poolConfig.setMaxIdle(<span class="number">32</span>);</span><br><span class="line">               poolConfig.setMaxWaitMillis(<span class="number">100</span>*<span class="number">1000</span>);</span><br><span class="line">               poolConfig.setBlockWhenExhausted(<span class="literal">true</span>);</span><br><span class="line">               poolConfig.setTestOnBorrow(<span class="literal">true</span>);  <span class="comment">// ping  PONG</span></span><br><span class="line">             </span><br><span class="line">               jedisPool = <span class="keyword">new</span> <span class="title class_">JedisPool</span>(poolConfig, <span class="string">&quot;192.168.44.168&quot;</span>, <span class="number">6379</span>, <span class="number">60000</span> );</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> jedisPool;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">(JedisPool jedisPool, Jedis jedis)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="literal">null</span> != jedis) &#123;</span><br><span class="line">         jedisPool.returnResource(jedis);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将原本的Jedis对象替换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2 连接redis</span></span><br><span class="line"><span class="comment">//Jedis jedis = new Jedis(&quot;192.168.44.168&quot;,6379);</span></span><br><span class="line"><span class="comment">//通过连接池得到jedis对象</span></span><br><span class="line"><span class="type">JedisPool</span> <span class="variable">jedisPoolInstance</span> <span class="operator">=</span> JedisPoolUtil.getJedisPoolInstance();</span><br><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedisPoolInstance.getResource();</span><br></pre></td></tr></table></figure><h3 id="解决超卖问题"><a href="#解决超卖问题" class="headerlink" title="解决超卖问题"></a>解决超卖问题</h3><p>添加事务进行事务控制</p><h4 id="通过乐观锁-加版本号-解决超卖问题"><a href="#通过乐观锁-加版本号-解决超卖问题" class="headerlink" title="通过乐观锁(加版本号)解决超卖问题"></a>通过乐观锁(加版本号)解决超卖问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecKill_redis</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.44.168&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        System.out.println(jedis.ping());</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//秒杀过程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">doSecKill</span><span class="params">(String uid, String prodid)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1 uid和prodid非空判断</span></span><br><span class="line">        <span class="keyword">if</span> (uid == <span class="literal">null</span> || prodid == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 连接redis</span></span><br><span class="line">        <span class="comment">//Jedis jedis = new Jedis(&quot;192.168.44.168&quot;,6379);</span></span><br><span class="line">        <span class="comment">//通过连接池得到jedis对象</span></span><br><span class="line">        <span class="type">JedisPool</span> <span class="variable">jedisPoolInstance</span> <span class="operator">=</span> JedisPoolUtil.getJedisPoolInstance();</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedisPoolInstance.getResource();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 拼接key</span></span><br><span class="line">        <span class="comment">// 3.1 库存key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">kcKey</span> <span class="operator">=</span> <span class="string">&quot;sk:&quot;</span> + prodid + <span class="string">&quot;:qt&quot;</span>;</span><br><span class="line">        <span class="comment">// 3.2 秒杀成功用户key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userKey</span> <span class="operator">=</span> <span class="string">&quot;sk:&quot;</span> + prodid + <span class="string">&quot;:user&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监视库存</span></span><br><span class="line">        jedis.watch(kcKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4 获取库存，如果库存null，秒杀还没有开始</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">kc</span> <span class="operator">=</span> jedis.get(kcKey);</span><br><span class="line">        <span class="keyword">if</span> (kc == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;秒杀还没有开始，请等待&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5 判断用户是否重复秒杀操作</span></span><br><span class="line">        <span class="keyword">if</span> (jedis.sismember(userKey, uid)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;已经秒杀成功了，不能重复秒杀&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6 判断如果商品数量，库存数量小于1，秒杀结束</span></span><br><span class="line">        <span class="keyword">if</span> (Integer.parseInt(kc) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;秒杀已经结束了&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7 秒杀过程</span></span><br><span class="line">        <span class="comment">//使用事务</span></span><br><span class="line">        <span class="type">Transaction</span> <span class="variable">multi</span> <span class="operator">=</span> jedis.multi();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组队操作</span></span><br><span class="line">        <span class="comment">//将库存量减1</span></span><br><span class="line">        multi.decr(kcKey);</span><br><span class="line">        <span class="comment">//将秒杀成功的用户id加入到userkey中</span></span><br><span class="line">        multi.sadd(userKey, uid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        List&lt;Object&gt; results = multi.exec();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (results == <span class="literal">null</span> || results.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;秒杀失败了....&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.1 库存-1</span></span><br><span class="line">        <span class="comment">//jedis.decr(kcKey);</span></span><br><span class="line">        <span class="comment">//7.2 把秒杀成功用户添加清单里面</span></span><br><span class="line">        <span class="comment">//jedis.sadd(userKey,uid);</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;秒杀成功了..&quot;</span>);</span><br><span class="line">        jedis.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解决乐观锁遗留问题"><a href="#解决乐观锁遗留问题" class="headerlink" title="解决乐观锁遗留问题"></a>解决乐观锁遗留问题</h4><p>当库存量过大（500），访问量过少（2000），并发多的情况下会存在当一个用户秒杀了商品，将乐观锁的版本号从1.0修改到了1.1，但是其他用户的版本号还是1.0，他们并没有拿到新的版本号导致无法进行秒杀活动，但是后续秒杀的用户拿到了新的版本号可以进行秒杀，这样会存在库存没有秒杀完，有库存遗留的问题</p><h5 id="LUA脚本解决遗留问题"><a href="#LUA脚本解决遗留问题" class="headerlink" title="LUA脚本解决遗留问题"></a>LUA脚本解决遗留问题</h5><p>Lua 是一个小巧的<a href="http://baike.baidu.com/item/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80">脚本语言</a>，Lua脚本可以很容易的被C&#x2F;C++ 代码调用，也可以反过来调用C&#x2F;C++的函数，Lua并没有提供强大的库，一个完整的Lua解释器不过200k，所以Lua不适合作为开发独立应用程序的语言，而是作为嵌入式脚本语言。</p><p>很多应用程序、游戏使用LUA作为自己的嵌入式脚本语言，以此来实现可配置性、可扩展性。</p><p>这其中包括魔兽争霸地图、魔兽世界、博德之门、愤怒的小鸟等众多游戏插件或外挂。</p><p><a href="https://www.w3cschool.cn/lua/">https://www.w3cschool.cn/lua/</a></p><h5 id="LUA脚本在Redis中的优势"><a href="#LUA脚本在Redis中的优势" class="headerlink" title="LUA脚本在Redis中的优势"></a>LUA脚本在Redis中的优势</h5><p>将复杂的或者多步的redis操作，写为一个脚本，一次提交给redis执行，减少反复连接redis的次数。提升性能。</p><p>LUA脚本是类似redis事务，有一定的原子性，不会被其他命令插队，可以完成一些redis事务性的操作。</p><p>但是注意redis的lua脚本功能，只有在Redis 2.6以上的版本才可以使用。</p><p>利用lua脚本淘汰用户，解决超卖问题。</p><p>redis 2.6版本以后，通过lua脚本解决<strong>争抢问题</strong>，实际上是<strong>redis</strong> <strong>利用其单线程的特性，用任务队列的方式解决多任务并发问题</strong>。</p><p>编写LUA脚本语言对redis进行高难度操作写成一个语言脚本，可以减少对redis连接的重复，进行一次性语言编写</p><h5 id="配置LUA脚本语言"><a href="#配置LUA脚本语言" class="headerlink" title="配置LUA脚本语言"></a>配置LUA脚本语言</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecKill_redisByScript</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.slf4j.<span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(SecKill_redisByScript.class);</span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">secKillScript</span> <span class="operator">=</span> <span class="string">&quot;local userid=KEYS[1];\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;local prodid=KEYS[2];\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;local qtkey=&#x27;sk:&#x27;..prodid..\&quot;:qt\&quot;;\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;local usersKey=&#x27;sk:&#x27;..prodid..\&quot;:usr\&quot;;\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;local userExists=redis.call(\&quot;sismember\&quot;,usersKey,userid);\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;if tonumber(userExists)==1 then \r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;   return 2;\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;end\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;local num= redis.call(\&quot;get\&quot; ,qtkey);\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;if tonumber(num)&lt;=0 then \r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;   return 0;\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;else \r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;   redis.call(\&quot;decr\&quot;,qtkey);\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;   redis.call(\&quot;sadd\&quot;,usersKey,userid);\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;end\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;return 1&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">secKillScript2</span> <span class="operator">=</span></span><br><span class="line">            <span class="string">&quot;local userExists=redis.call(\&quot;sismember\&quot;,\&quot;&#123;sk&#125;:0101:usr\&quot;,userid);\r\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; return 1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JedisPool</span> <span class="variable">jedispool</span> <span class="operator">=</span> JedisPoolUtil.getJedisPoolInstance();</span><br><span class="line"></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedispool.getResource();</span><br><span class="line">        System.out.println(jedis.ping());</span><br><span class="line"></span><br><span class="line">        Set&lt;HostAndPort&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;HostAndPort&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//doSecKill(&quot;201&quot;,&quot;sk:0101&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">doSecKill</span><span class="params">(String uid, String prodid)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">JedisPool</span> <span class="variable">jedispool</span> <span class="operator">=</span> JedisPoolUtil.getJedisPoolInstance();</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedispool.getResource();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String sha1=  .secKillScript;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sha1</span> <span class="operator">=</span> jedis.scriptLoad(secKillScript);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> jedis.evalsha(sha1, <span class="number">2</span>, uid, prodid);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">reString</span> <span class="operator">=</span> String.valueOf(result);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;0&quot;</span>.equals(reString)) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;已抢空！！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(reString)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;抢购成功！！！！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;2&quot;</span>.equals(reString)) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;该用户已抢过！！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;抢购异常！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        jedis.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调用LUA脚本语言需要将接收前端请求的servlet进行修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecKillServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SecKillServlet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">      <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">50000</span>) +<span class="string">&quot;&quot;</span> ;</span><br><span class="line">      <span class="type">String</span> <span class="variable">prodid</span> <span class="operator">=</span>request.getParameter(<span class="string">&quot;prodid&quot;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//boolean isSuccess=SecKill_redis.doSecKill(userid,prodid);</span></span><br><span class="line">       <span class="comment">//调用脚本语言存在的类中的方法</span></span><br><span class="line">      <span class="type">boolean</span> isSuccess= SecKill_redisByScript.doSecKill(userid,prodid);</span><br><span class="line">      response.getWriter().print(isSuccess);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h2><p>Redis 提供了2个不同形式的持久化方式。</p><ul><li><p>RDB（Redis DataBase）</p></li><li><p>AOF（Append Of File）</p></li></ul><h3 id="Redis持久化之RDB"><a href="#Redis持久化之RDB" class="headerlink" title="Redis持久化之RDB"></a>Redis持久化之RDB</h3><p>在在指定的时间间隔内将内存中的数据集合写入到磁盘中，进行持久化保存</p><p><strong>在指定的时间间隔内将内存中的数据集快照写入磁盘</strong>， 也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里</p><h4 id="备份是如何执行的"><a href="#备份是如何执行的" class="headerlink" title="备份是如何执行的"></a>备份是如何执行的</h4><p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到 一个临时文件中，待持久化过程都结束了，再用这个<strong>临时文件替换上次持久化好的文件</strong>。 整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能 如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。<strong>RDB的缺点是最后一次持久化后的数据可能丢失</strong>。</p><p><a href="https://blog.csdn.net/qq_32131499/article/details/94561780"> 写时复制(Copy On Write)_NeoJoe的博客-CSDN博客_写时复制</a></p><p>linux系统下，关于redis文件在redis的配置文件中临时文件默认叫dump.rdb存放在执行redis服务器目录下</p><h4 id="Fork"><a href="#Fork" class="headerlink" title="Fork"></a>Fork</h4><ul><li><p>Fork的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等） 数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程</p></li><li><p>在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，Linux中引入了“<strong>写时复制技术</strong>”</p><p>写时复制技术：在进行数据同步的时候(相当于将一份数据保存起来)，先创建一个临时文件，将数据存放到临时文件中，数据存放完毕后，将临时文件替换正式文件—-RDB底层原理</p></li><li><p><strong>一般情况父进程和子进程会共用同一段物理内存</strong>，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。</p></li></ul><h4 id="RDB持久化流程"><a href="#RDB持久化流程" class="headerlink" title="RDB持久化流程"></a>RDB持久化流程</h4><p><img src="/2022/08/15/redis6/59.png"></p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><h5 id="配置默认临时文件"><a href="#配置默认临时文件" class="headerlink" title="配置默认临时文件"></a>配置默认临时文件</h5><p>dump.rdb文件</p><p>在redis.conf中 dbfilename 字段可以修改默认文件</p><p>在redis.conf中配置文件名称，默认为dump.rdb</p><h5 id="配置位置"><a href="#配置位置" class="headerlink" title="配置位置"></a>配置位置</h5><p>rdb文件的保存路径，也可以修改。默认为Redis启动时命令行所在的目录下</p><p>dir “自定义目录”</p><h5 id="配置RDB快照，保持策略"><a href="#配置RDB快照，保持策略" class="headerlink" title="配置RDB快照，保持策略"></a>配置RDB快照，保持策略</h5><p>save命令</p><p>格式：save 秒钟 写操作次数</p><p>save 20 6 ：在20秒中至少有6个key进行了写操作，则会将其持久化，存储到临时文件中</p><p>RDB是整个内存的压缩过的Snapshot，RDB的数据结构，可以配置复合的快照触发条件，</p><p><strong>默认是1</strong>分钟内改了1万次，或5分钟内改了10次，或15分钟内改了1次。</p><p>禁用</p><p>不设置save指令，或者给save传入空字符串</p><h5 id="stop-writes-on-bgsave-error-redis-conf中配置"><a href="#stop-writes-on-bgsave-error-redis-conf中配置" class="headerlink" title="stop-writes-on-bgsave-error (redis.conf中配置)"></a>stop-writes-on-bgsave-error (redis.conf中配置)</h5><p>当Redis无法写入磁盘的话，直接关掉Redis的写操作。推荐yes.</p><h5 id="rdbcompression-压缩文件"><a href="#rdbcompression-压缩文件" class="headerlink" title="rdbcompression 压缩文件"></a>rdbcompression 压缩文件</h5><p>对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用<strong>LZF算法</strong>进行压缩。</p><p>如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能。推荐yes.</p><h5 id="rdbchecksum-检查完整性"><a href="#rdbchecksum-检查完整性" class="headerlink" title="rdbchecksum 检查完整性"></a>rdbchecksum 检查完整性</h5><p>在存储快照后，还可以让redis使用CRC64算法来进行数据校验，</p><p>但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能</p><p>推荐yes.</p><h5 id="命令save-VS-bgsave"><a href="#命令save-VS-bgsave" class="headerlink" title="命令save VS bgsave"></a>命令save VS bgsave</h5><ul><li><p>save ：save时只管保存，其它不管，全部阻塞。手动保存。不建议。</p></li><li><p>bgsave：Redis会在后台异步进行快照操作， <strong>快照同时还可以响应客户端请求。</strong></p></li></ul><p>可以通过lastsave 命令获取最后一次成功执行快照的时间</p><h4 id="rdb的备份"><a href="#rdb的备份" class="headerlink" title="rdb的备份"></a>rdb的备份</h4><p>先通过config get dir 查询rdb文件的目录 </p><p>将*.rdb的文件拷贝到别的地方</p><p>rdb的恢复</p><ul><li>关闭Redis</li><li>先把备份的文件拷贝到工作目录下 cp dump2.rdb dump.rdb</li><li>启动Redis, 备份数据会直接加载</li></ul><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>适合大规模的数据恢复</li><li>对数据完整性和一致性要求不高更适合使用</li><li>节省磁盘空间</li><li>恢复速度快</li></ul><p><img src="/2022/08/15/redis6/60.png" alt="image-20220814041441668"></p><h3 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h3><ul><li><p>Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</p></li><li><p>虽然Redis在fork时使用了<strong>写时拷贝技术</strong>,但是如果数据庞大时还是比较消耗性能。</p></li><li><p>在备份周期在一定间隔时间做一次备份，所以如果Redis意外down掉的话，就会丢失最后一次快照后的所有修改。</p></li></ul><h3 id="如何停止保存策略"><a href="#如何停止保存策略" class="headerlink" title="如何停止保存策略"></a>如何停止保存策略</h3><p>动态停止RDB：redis-cli config set save “”#save后给空值，表示禁用保存策略</p><p><img src="/2022/08/15/redis6/61.png"></p><h2 id="Redis数据持久化之AOF"><a href="#Redis数据持久化之AOF" class="headerlink" title="Redis数据持久化之AOF"></a>Redis数据持久化之AOF</h2><p>AOF(Append Only File)</p><p>以<strong>日志</strong>的形式来记录每个<strong>写操作</strong>（增量保存），将Redis执行过的<strong>所有写指令记录下来</strong>(<strong>读操作不记录</strong>)， <strong>只许追加文件但不可以改写文件</strong>，redis启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p><h3 id="AOF的执行流程"><a href="#AOF的执行流程" class="headerlink" title="AOF的执行流程"></a>AOF的执行流程</h3><ul><li><p>（1）客户端的请求写命令会被append追加到AOF缓冲区内；</p></li><li><p>（2）AOF缓冲区根据**AOF持久化策略[always,everysec,no]**将操作sync同步到磁盘的AOF文件中；</p></li><li><p>（3）AOF文件大小超过重写策略或手动重写时，会对AOF文件rewrite重写，压缩AOF文件容量；</p></li><li><p>（4）Redis服务重启时，会重新load加载AOF文件中的写操作达到数据恢复的目的；</p></li></ul><p><img src="/2022/08/15/redis6/62.png" alt="image-20220814042208345"></p><h3 id="AOF默认不开启"><a href="#AOF默认不开启" class="headerlink" title="AOF默认不开启"></a>AOF默认不开启</h3><p>可以在redis.conf中配置文件名称，默认为 appendonly.aof</p><p>AOF文件的保存路径，同RDB的路径一致。</p><h3 id="AOF和RDB同时开启，redis听谁的？"><a href="#AOF和RDB同时开启，redis听谁的？" class="headerlink" title="AOF和RDB同时开启，redis听谁的？"></a>AOF和RDB同时开启，redis听谁的？</h3><p>AOF和RDB同时开启，系统默认取AOF的数据（数据不会存在丢失）</p><h3 id="AOF启动-x2F-修复-x2F-恢复"><a href="#AOF启动-x2F-修复-x2F-恢复" class="headerlink" title="AOF启动&#x2F;修复&#x2F;恢复"></a>AOF启动&#x2F;修复&#x2F;恢复</h3><ul><li><p>AOF的备份机制和性能虽然和RDB不同, 但是备份和恢复的操作同RDB一样，都是拷贝备份文件，需要恢复时再拷贝到Redis工作目录下，启动系统即加载。</p></li><li><p>正常恢复</p><ul><li>修改默认的appendonly no，改为yes</li><li>将有数据的aof文件复制一份保存到对应目录(查看目录：config get dir)</li><li>恢复：重启redis然后重新加载</li></ul></li><li><p>异常恢复</p><ul><li>修改默认的appendonly no，改为yes</li><li>如遇到<strong>AOF</strong>文件损坏**，通过&#x2F;usr&#x2F;local&#x2F;bin&#x2F;**redis-check-aof–fix appendonly.aof进行恢复</li><li>备份被写坏的AOF文件</li><li>恢复：重启redis，然后重新加载</li></ul></li></ul><h3 id="AOF同步频率设置（持久化策略）"><a href="#AOF同步频率设置（持久化策略）" class="headerlink" title="AOF同步频率设置（持久化策略）"></a>AOF同步频率设置（持久化策略）</h3><p>appendfsync always</p><p>始终同步，每次Redis的写入都会立刻记入日志；性能较差但数据完整性比较好</p><p>appendfsync everysec</p><p>每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。</p><p>appendfsync no</p><p>redis不主动进行同步，把同步时机交给操作系统。</p><h3 id="Rewrite压缩"><a href="#Rewrite压缩" class="headerlink" title="Rewrite压缩"></a>Rewrite压缩</h3><h4 id="是什么："><a href="#是什么：" class="headerlink" title="是什么："></a>是什么：</h4><p>AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制, 当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩， 只保留可以恢复数据的最小指令集.可以使用命令bgrewriteaof</p><h4 id="重写原理，如何实现重写"><a href="#重写原理，如何实现重写" class="headerlink" title="重写原理，如何实现重写"></a>重写原理，如何实现重写</h4><p>AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，redis4.0版本后的重写，是指上就是把rdb 的快照，以二级制的形式附在新的aof头部，作为已有的历史数据，替换掉原来的流水账操作。</p><p>no-appendfsync-on-rewrite：</p><p>如果 no-appendfsync-on-rewrite&#x3D;yes ,不写入aof文件只写入缓存，用户请求不会阻塞，但是在这段时间如果宕机会丢失这段时间的缓存数据。（降低数据安全性，提高性能）</p><p>   如果 no-appendfsync-on-rewrite&#x3D;no, 还是会把数据往磁盘里刷，但是遇到重写操作，可能会发生阻塞。（数据安全，但是性能降低）</p><p>触发机制，何时重写</p><p>Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发</p><p>重写虽然可以节约大量磁盘空间，减少恢复时间。但是每次重写还是有一定的负担的，因此设定Redis要满足一定条件才会进行重写。 </p><p>auto-aof-rewrite-percentage：设置重写的基准值，文件达到100%时开始重写（文件是原来重写后文件的2倍时触发）</p><p>auto-aof-rewrite-min-size：设置重写的基准值，<strong>最小文件64MB</strong>。达到这个值开始重写。</p><p>例如：文件达到70MB开始重写，降到50MB，下次什么时候开始重写？100MB</p><p>系统载入时或者上次重写完毕时，Redis会记录此时AOF大小，设为base_size,</p><p>如果Redis的AOF当前大小&gt;&#x3D; base_size +base_size*100% (默认)且当前大小&gt;&#x3D;64mb(默认)的情况下，Redis会对AOF进行重写。 </p><h4 id="重写流程"><a href="#重写流程" class="headerlink" title="重写流程"></a>重写流程</h4><ul><li><p>（1）bgrewriteaof触发重写，判断是否当前有bgsave或bgrewriteaof在运行，如果有，则等待该命令结束后再继续执行。</p></li><li><p>（2）主进程fork出子进程执行重写操作，保证主进程不会阻塞。</p></li><li><p>（3）子进程遍历redis内存中数据到临时文件，客户端的写请求同时写入aof_buf缓冲区和aof_rewrite_buf重写缓冲区保证原AOF文件完整以及新AOF文件生成期间的新的数据修改动作不会丢失。</p></li><li><p>（4）1).子进程写完新的AOF文件后，向主进程发信号，父进程更新统计信息。2).主进程把aof_rewrite_buf中的数据写入到新的AOF文件。</p></li><li><p>（5）使用新的AOF文件覆盖旧的AOF文件，完成AOF重写。</p></li></ul><p><img src="/2022/08/15/redis6/63.png"></p><h3 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h3><p><img src="/2022/08/15/redis6/64.png"></p><ul><li>备份机制更稳健，丢失数据概率更低。</li><li>可读的日志文本，通过操作AOF稳健，可以处理误操作。</li></ul><h3 id="劣势-1"><a href="#劣势-1" class="headerlink" title="劣势"></a>劣势</h3><ul><li>比起RDB占用更多的磁盘空间。</li><li>恢复备份速度要慢。</li><li>每次读写都同步的话，有一定的性能压力。</li><li>存在个别Bug，造成恢复不能。</li></ul><p><img src="/2022/08/15/redis6/65.png"></p><h2 id="用哪个好？"><a href="#用哪个好？" class="headerlink" title="用哪个好？"></a>用哪个好？</h2><p>官方推荐两个都启用。</p><p>如果对数据不敏感，可以选单独用RDB。</p><p>不建议单独用 AOF，因为可能会出现Bug。</p><p>如果只是做纯内存缓存，可以都不用。</p><h3 id="官网建议"><a href="#官网建议" class="headerlink" title="官网建议"></a>官网建议</h3><ul><li>RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储</li><li>AOF持久化方式记录每次对服务器写的操作,当服务器重启的时候会重新执行这些命令来恢复原始的数据,AOF命令以redis协议追加保存每次写的操作到文件末尾. </li><li>Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大</li><li>只做缓存：如果你只希望你的数据在服务器运行的时候存在,你也可以不使用任何持久化方式.</li><li>同时开启两种持久化方式</li><li>在这种情况下,当redis重启的时候会优先载入AOF文件来恢复原始的数据, 因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整.</li><li>RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件。那要不要只使用AOF呢？ </li><li>建议不要，因为RDB更适合用于备份数据库(AOF在不断变化不好备份)， 快速重启，而且不会有AOF可能潜在的bug，留着作为一个万一的手段。</li><li>性能建议<ul><li>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 900 1这条规则。     如果使用AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了。  代价,一是带来了持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。  只要硬盘许可，应该尽量减少AOF  rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上。  默认超过原大小100%大小时重写可以改到适当的数值。</li></ul></li></ul><h2 id="Redis-主从复制"><a href="#Redis-主从复制" class="headerlink" title="Redis_主从复制"></a>Redis_主从复制</h2><p><a href="https://blog.csdn.net/m0_62473957/article/details/124140928?ops_request_misc=%7B%22request_id%22:%22166065469816781790759130%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166065469816781790759130&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-124140928-null-null.142%5Ev41%5Epc_rank_v36,185%5Ev2%5Econtrol&utm_term=mysql%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6&spm=1018.2226.3001.4187">MySQL主从复制_ST Cp的博客-CSDN博客_mysql主从复制</a></p><p>主机数据更新后根据配置和策略， 自动同步到备机的master&#x2F;slaver机制，<strong>Master</strong>以写为主，<strong>Slave</strong>以读为主,主机写，从机读</p><ul><li>读写分离，性能扩展</li><li>容灾快速恢复：当某一台从机死机之后，可以快速切换其他从机，继续服务</li></ul><p>一主多从服务器</p><p><img src="/2022/08/15/redis6/66.png" alt="image-20220814163011564"></p><h3 id="测试主机从机"><a href="#测试主机从机" class="headerlink" title="测试主机从机"></a>测试主机从机</h3><p>主从复制</p><p>拷贝多个redis.conf文件include(写绝对路径)</p><p>开启daemonize yes</p><p>Pid文件名字pidfile</p><p>指定端口port</p><p>Log文件名字</p><p>dump.rdb名字dbfilename</p><p>Appendonly 关掉或者换名字 关闭AOF</p><h3 id="新建redis6379-conf，填写以下内容"><a href="#新建redis6379-conf，填写以下内容" class="headerlink" title="新建redis6379.conf，填写以下内容"></a>新建redis6379.conf，填写以下内容</h3><p>设置一主机两从机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">include /myredis/redis.conf</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line">port 6379</span><br><span class="line">dbfilename dump6379.rdb</span><br></pre></td></tr></table></figure><h3 id="新建redis6380-conf，填写以下内容"><a href="#新建redis6380-conf，填写以下内容" class="headerlink" title="新建redis6380.conf，填写以下内容"></a>新建redis6380.conf，填写以下内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">include /myredis/redis.conf</span><br><span class="line">pidfile /var/run/redis_6380.pid</span><br><span class="line">port 6380</span><br><span class="line">dbfilename dump6381.rdb</span><br></pre></td></tr></table></figure><p>新建redis6381.conf，填写以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">include /myredis/redis.conf</span><br><span class="line">pidfile /var/run/redis_6381.pid</span><br><span class="line">port 6381</span><br><span class="line">dbfilename dump6381.rdb</span><br></pre></td></tr></table></figure><p>根据配置文件启动三个服务器</p><p><img src="/2022/08/15/redis6/67.png" alt="image-20220814180752433"></p><p>slave-priority 10</p><p>设置从机的优先级，值越小，优先级越高，用于选举主机时使用。默认100</p><p>info replication</p><p>打印主从复制的相关信息</p><h3 id="配库（从）不陪主"><a href="#配库（从）不陪主" class="headerlink" title="配库（从）不陪主"></a>配库（从）不陪主</h3><p>slaveof <ip><port></port></ip></p><p>成为某个实例的从服务器</p><p>1、在6380和6381上执行: slaveof 127.0.0.1 6379</p><p>则代表6379是6380和6381的主机，在主机上进行写操作，在从机上可以读取主机写的内容</p><h3 id="主要信息"><a href="#主要信息" class="headerlink" title="主要信息"></a>主要信息</h3><ul><li><p>在主机上进行写操作，在从机上进行读取操作</p></li><li><p>而在从机上不能进行写操作</p></li></ul><p><img src="/2022/08/15/redis6/68.png"></p><ul><li><p>主机挂掉，重启就行，一切如初</p></li><li><p>从机（挂掉）重启需重设：slaveof 127.0.0.1 6379（本地主机地址 端口）</p></li></ul><h3 id="常用三招"><a href="#常用三招" class="headerlink" title="常用三招"></a>常用三招</h3><h4 id="一主二仆"><a href="#一主二仆" class="headerlink" title="一主二仆"></a>一主二仆</h4><p>切入点问题？slave1、slave2是从头开始复制还是从切入点开始复制?比如从k4进来，那之前的k1,k2,k3是否也可以复制？</p><p>从机是否可以写？set可否？ </p><p>主机shutdown后情况如何？从机是上位还是原地待命？</p><p>主机又回来了后，主机新增记录，从机还能否顺利复制？ </p><p>其中一台从机down后情况如何？依照原有它能跟上大部队吗？</p><h4 id="薪火相传"><a href="#薪火相传" class="headerlink" title="薪火相传"></a>薪火相传</h4><p>用 slaveof <ip><port>设置从服务器链条</port></ip></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 6379为主服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在个服务端口配置对应的主服务器</span></span><br><span class="line"><span class="comment"># 6380为6379的从服务器</span></span><br><span class="line"> slaveof 127.0.0.1 6379</span><br><span class="line"><span class="comment"># 6381为6380的从服务器</span></span><br><span class="line">slaveof 127.0.0.1 6380</span><br></pre></td></tr></table></figure><p>这样才能进行薪火相传</p><p>需要设置从服务器链条，即下一个从服务器以上一个从服务器为主机，一直连接到真正的主机</p><p>主服务器只去同步一个从服务器的数据，从服务器像是一个链条结构，由上一个从服务器向下一个从服务器进行数据同步，但是出现其中一个从服务器宕机，则该从服务器后面的从服务器不能够同步到主服务器的数据</p><p>上一个Slave可以是下一个slave的Master，Slave同样可以接收其他 slaves的连接和同步请求，那么该slave作为了链条中下一个的master, 可以有效减轻master的写压力,去中心化降低风险。</p><p>用 slaveof <ip><port></port></ip></p><p>中途变更转向:会清除之前的数据，重新建立拷贝最新的</p><p>风险是一旦某个slave宕机，后面的slave都没法备份</p><p>主机挂了，从机还是从机，无法写数据了</p><h4 id="反客为主"><a href="#反客为主" class="headerlink" title="反客为主"></a>反客为主</h4><p>当一个master宕机后，后面的slave可以立刻升为master，其后面的slave不用做任何修改。</p><p>用 slaveof no one  将从机变为主机。</p><h3 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h3><p>主从服务器进行数据复制——对下面的复制原理进行片名解释</p><ul><li><p>当从服务器连接上主服务器的时候，从服务器主动向主服务器发生进行数据同步消息</p></li><li><p>主服务器连接到从服务器发送过来的同步消息，把主服务器上的数据进行持久化，存放到rdb文件中，把rdb文件发送给从服务器，从服务器拿到rdb文件进行读取</p></li><li><p>每次主服务器进行写操作之后，主服务器主动和从服务器进行数据同步</p></li></ul><p>复制原理</p><ul><li>Slave启动成功连接到master后会发送一个sync命令</li><li>Master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令， 在后台进程执行完毕之后，master将传送整个数据文件到slave,以完成一次完全同步</li><li>全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</li><li>增量复制：Master继续将新的所有收集到的修改命令依次传给slave,完成同步</li><li>但是只要是重新连接master,一次完全同步（全量复制)将被自动执行</li></ul><p><img src="/2022/08/15/redis6/69.png"></p><h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><p><strong>反客为主的自动版</strong>，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库</p><p>在自定义的&#x2F;myredis(和其他主机从机配置文件相同目录)目录下新建<strong>sentinel.conf</strong>文件，名字绝不能错</p><h3 id="配置哨兵，填写内容"><a href="#配置哨兵，填写内容" class="headerlink" title="配置哨兵，填写内容"></a>配置哨兵，填写内容</h3><p>sentinel monitor mymaster 127.0.0.1 6379 1</p><p>其中mymaster为监控对象起的服务器名称， 1 为至少有多少个哨兵同意迁移的数量。</p><h3 id="启动哨兵"><a href="#启动哨兵" class="headerlink" title="启动哨兵"></a>启动哨兵</h3><p>&#x2F;usr&#x2F;local&#x2F;bin</p><p>redis做压测可以用自带的redis-benchmark工具</p><p>执行redis-sentinel &#x2F;myredis&#x2F;sentinel.conf </p><p><img src="/2022/08/15/redis6/70.png" alt="image-20220815121359340"></p><h3 id="当主机挂掉，从机选举中产生新的主机"><a href="#当主机挂掉，从机选举中产生新的主机" class="headerlink" title="当主机挂掉，从机选举中产生新的主机"></a>当主机挂掉，从机选举中产生新的主机</h3><p>(大概10秒左右可以看到哨兵窗口日志，切换了新的主机)</p><p>哪个从机会被选举为主机呢？根据优先级别：slave-priority </p><p>原主机重启后会变为从机。</p><p><img src="/2022/08/15/redis6/71.png" alt="image-20220815121406213"></p><h3 id="复制延时"><a href="#复制延时" class="headerlink" title="复制延时"></a>复制延时</h3><p>由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。</p><h3 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h3><p><img src="/2022/08/15/redis6/72.png" alt="故障恢复"></p><p>优先级在redis.conf中默认：slave-priority 100，值越小优先级越高</p><p>偏移量是指获得原主机数据最全的</p><p>每个redis实例启动后都会随机生成一个40位的runid</p><h3 id="Java操作主从复制"><a href="#Java操作主从复制" class="headerlink" title="Java操作主从复制"></a>Java操作主从复制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> JedisSentinelPool jedisSentinelPool=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>  Jedis <span class="title function_">getJedisFromSentinel</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(jedisSentinelPool==<span class="literal">null</span>)&#123;</span><br><span class="line">            Set&lt;String&gt; sentinelSet=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            sentinelSet.add(<span class="string">&quot;192.168.11.103:26379&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">JedisPoolConfig</span> <span class="variable">jedisPoolConfig</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">            jedisPoolConfig.setMaxTotal(<span class="number">10</span>); <span class="comment">//最大可用连接数</span></span><br><span class="line">jedisPoolConfig.setMaxIdle(<span class="number">5</span>); <span class="comment">//最大闲置连接数</span></span><br><span class="line">jedisPoolConfig.setMinIdle(<span class="number">5</span>); <span class="comment">//最小闲置连接数</span></span><br><span class="line">jedisPoolConfig.setBlockWhenExhausted(<span class="literal">true</span>); <span class="comment">//连接耗尽是否等待</span></span><br><span class="line">jedisPoolConfig.setMaxWaitMillis(<span class="number">2000</span>); <span class="comment">//等待时间</span></span><br><span class="line">jedisPoolConfig.setTestOnBorrow(<span class="literal">true</span>); <span class="comment">//取连接的时候进行一下测试 ping pong</span></span><br><span class="line"></span><br><span class="line">jedisSentinelPool=<span class="keyword">new</span> <span class="title class_">JedisSentinelPool</span>(<span class="string">&quot;mymaster&quot;</span>,sentinelSet,jedisPoolConfig);</span><br><span class="line"><span class="keyword">return</span> jedisSentinelPool.getResource();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> jedisSentinelPool.getResource();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h2><p> Redis集群至少需要3个节点，因为投票容错机制要求超过半数节点认为某个节点挂了该节点才是挂了，所以2个节点无法构成集群。</p><p>要保证集群的高可用，需要每个节点都有从节点，也就是备份节点，所以Redis集群至少需要6台服务器。</p><h3 id="Redis-Cluster（Redis集群）简介"><a href="#Redis-Cluster（Redis集群）简介" class="headerlink" title="Redis Cluster（Redis集群）简介"></a>Redis Cluster（Redis集群）简介</h3><p>redis是一个开源的key value存储系统，受到了广大互联网公司的青睐。redis3.0版本之前只支持单例模式，在3.0版本及以后才支持集群，我这里用的是redis3.0.0版本；<br>redis集群采用P2P模式，是完全去中心化的，不存在中心节点或者代理节点；<br>redis集群是没有统一的入口的，客户端（client）连接集群的时候连接集群中的任意节点（node）即可，集群内部的节点是相互通信的（PING-PONG机制），每个节点都是一个redis实例；<br>为了实现集群的高可用，即判断节点是否健康（能否正常使用），redis-cluster有这么一个投票容错机制：如果集群中超过半数的节点投票认为某个节点挂了，那么这个节点就挂了（fail）。这是判断节点是否挂了的方法；<br>那么如何判断集群是否挂了呢? -&gt; 如果集群中任意一个节点挂了，而且该节点没有从节点（备份节点），那么这个集群就挂了。这是判断集群是否挂了的方法；<br>那么为什么任意一个节点挂了（没有从节点）这个集群就挂了呢？ -&gt; 因为集群内置了16384个slot（哈希槽），并且把所有的物理节点映射到了这16384[0-16383]个slot上，或者说把这些slot均等的分配给了各个节点。当需要在Redis集群存放一个数据（key-value）时，redis会先对这个key进行crc16算法，然后得到一个结果。再把这个结果对16384进行求余，这个余数会对应[0-16383]其中一个槽，进而决定key-value存储到哪个节点中。所以一旦某个节点挂了，该节点对应的slot就无法使用，那么就会导致集群无法正常工作。<br>综上所述，每个Redis集群理论上最多可以有16384个节点。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>容量不够，redis如何进行扩容？</p><p>并发写操作， redis如何分摊？</p><p>另外，主从模式，薪火相传模式，主机宕机，导致ip地址发生变化，应用程序中配置需要修改对应的主机地址、端口等信息。</p><p>之前通过代理主机来解决，但是redis3.0中提供了解决方案。就是无中心化集群配置。</p><h3 id="什么是集群"><a href="#什么是集群" class="headerlink" title="什么是集群"></a>什么是集群</h3><p>Redis 集群实现了对Redis的水平扩容，即启动N个redis节点，将整个数据库分布存储在这N个节点中，每个节点存储总数据的1&#x2F;N。</p><p>Redis 集群通过分区（partition）来提供一定程度的可用性（availability）： 即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。</p><h3 id="删除持久化数据"><a href="#删除持久化数据" class="headerlink" title="删除持久化数据"></a>删除持久化数据</h3><p>将rdb,aof文件都删除掉</p><h3 id="制作6个实例，6379-6380-6381-6389-6390-6391"><a href="#制作6个实例，6379-6380-6381-6389-6390-6391" class="headerlink" title="制作6个实例，6379,6380,6381,6389,6390,6391"></a>制作6个实例，6379,6380,6381,6389,6390,6391</h3><h4 id="配置基本信息"><a href="#配置基本信息" class="headerlink" title="配置基本信息"></a>配置基本信息</h4><p>开启daemonize yes</p><p>Pid文件名字</p><p>指定端口</p><p>Log文件名字</p><p>Dump.rdb名字</p><p>Appendonly 关掉或者换名字</p><h4 id="redis-cluster配置修改"><a href="#redis-cluster配置修改" class="headerlink" title="redis cluster配置修改"></a>redis cluster配置修改</h4><p>cluster-enabled yes  打开集群模式</p><p>cluster-config-file nodes-6379.conf 设定节点配置文件名</p><p>cluster-node-timeout 15000  设定节点失联时间，超过该时间（毫秒），集群自动进行主从切换</p><p>配置六个6379,6380,6381,6389,6390,6391端口号文件</p><p>在一台主机上模拟六个redis服务器就是开启不同的端口号来开启redis服务，实际上一个redis服务器就占用一个linux系统，占用一个主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">include /home/bigdata/redis.conf</span><br><span class="line">port 6379</span><br><span class="line">pidfile <span class="string">&quot;/var/run/redis_6379.pid&quot;</span></span><br><span class="line">dbfilename <span class="string">&quot;dump6379.rdb&quot;</span></span><br><span class="line"><span class="built_in">dir</span> <span class="string">&quot;/home/bigdata/redis_cluster&quot;</span></span><br><span class="line">logfile <span class="string">&quot;/home/bigdata/redis_cluster/redis_err_6379.log&quot;</span></span><br><span class="line">cluster-enabled <span class="built_in">yes</span></span><br><span class="line">cluster-config-file nodes-6379.conf</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure><h4 id="修改好redis6379-conf文件，拷贝多个redis-conf文件"><a href="#修改好redis6379-conf文件，拷贝多个redis-conf文件" class="headerlink" title="修改好redis6379.conf文件，拷贝多个redis.conf文件"></a>修改好redis6379.conf文件，拷贝多个redis.conf文件</h4><p>将6379的配置文件复制6份，并将里面对应6379端口号修改为对应创建实例的端口号</p><p>:%s&#x2F;6379&#x2F;6380：快速替换文件内容将6379替换为6380 </p><h4 id="将六个节点合成一个集群"><a href="#将六个节点合成一个集群" class="headerlink" title="将六个节点合成一个集群"></a>将六个节点合成一个集群</h4><p>组合之前，请确保所有redis实例启动后，nodes-xxxx.conf文件都生成正常。</p><h5 id="合体："><a href="#合体：" class="headerlink" title="合体："></a>合体：</h5><p>需要在linux安装redis环境的src目录下执行命令</p><p>cd &#x2F;opt&#x2F;redis-6.2.1&#x2F;src</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster create --cluster-replicas 1 192.168.11.101:6379 192.168.11.101:6380 192.168.11.101:6381 192.168.11.101:6389 192.168.11.101:6390 192.168.11.101:6391</span><br></pre></td></tr></table></figure><p>此处不要用127.0.0.1， 请用真实IP地址 :你linux服务器的ip地址</p><p>–replicas 1 采用最简单的方式配置集群，一台主机，一台从机，正好三组。</p><p><img src="/2022/08/15/redis6/73.png" alt="image-20220815132717201"></p><p><img src="/2022/08/15/redis6/99.png" alt="image-20220815132731143"></p><h3 id="普通方式登录"><a href="#普通方式登录" class="headerlink" title="普通方式登录"></a>普通方式登录</h3><p>可能直接进入读主机，存储数据时，会出现MOVED重定向操作。所以，应该以集群方式登录。</p><p><img src="/2022/08/15/redis6/74.png" alt="普通方式登录"></p><h3 id="c-采用集群策略连接，设置数据会自动切换到相应的写主机"><a href="#c-采用集群策略连接，设置数据会自动切换到相应的写主机" class="headerlink" title="-c  采用集群策略连接，设置数据会自动切换到相应的写主机"></a>-c  采用集群策略连接，设置数据会自动切换到相应的写主机</h3><p><img src="/2022/08/15/redis6/75.png" alt="集群策略连接"></p><h3 id="通过-cluster-nodes-命令查看集群信息"><a href="#通过-cluster-nodes-命令查看集群信息" class="headerlink" title="通过 cluster nodes 命令查看集群信息"></a>通过 cluster nodes 命令查看集群信息</h3><p><img src="/2022/08/15/redis6/76.png" alt="查看集群信息"></p><h3 id="redis-cluster如何分配这六个节点"><a href="#redis-cluster如何分配这六个节点" class="headerlink" title="redis cluster如何分配这六个节点?"></a>redis cluster如何分配这六个节点?</h3><p>一个集群至少要有三个主节点。</p><p> Redis集群至少需要3个节点，因为投票容错机制要求超过半数节点认为某个节点挂了该节点才是挂了，所以2个节点无法构成集群。</p><p>选项 –cluster-replicas 1 表示我们希望为集群中的每个主节点创建一个从节点。</p><p>分配原则尽量保证每个主数据库运行在不同的IP地址，每个从库和主库不在一个IP地址上。</p><p>保证集群的高可用原则，当主服务器挂掉之后，从服务器可以迅速替代挂掉的主服务器成为新的主服务器，保证一台服务器挂掉之后，其他服务器一样可以提供相应的服务</p><p><img src="/2022/08/15/redis6/77.png" alt="集群分布"></p><h3 id="什么是slots"><a href="#什么是slots" class="headerlink" title="什么是slots"></a>什么是slots</h3><p><strong>[OK] All nodes agree about slots configuration.</strong></p><p><strong>&gt;&gt;&gt; Check for open slots…</strong></p><p><strong>&gt;&gt;&gt; Check slots coverage…</strong></p><p><strong>[OK] All 16384 slots covered.</strong></p><p>一个 Redis 集群包含 16384 个插槽（hash slot）， 数据库中的每个键都属于这 16384 个插槽的其中一个， </p><p>集群使用公式 CRC16(key) % 16384 来计算键 key 属于哪个槽， 其中 CRC16(key) 语句用于计算键 key 的 CRC16 校验和 。</p><p>集群中的每个节点负责处理一部分插槽。 </p><p>举个例子， 如果一个集群可以有三个主节点</p><p>其中：</p><p>节点 1 负责处理 0 号至 5460 号插槽。</p><p>节点 2 负责处理 5461 号至 10922 号插槽。</p><p>节点 3 负责处理 10923 号至 16383 号插槽</p><p> cluster nodes 查看集群信息 对应的节点负责插槽范围</p><p><img src="/2022/08/15/redis6/78.png" alt="查看插槽范围"></p><h3 id="在集群中录入值"><a href="#在集群中录入值" class="headerlink" title="在集群中录入值"></a>在集群中录入值</h3><p>在redis-cli每次录入、查询键值，redis都会计算出该key应该送往的插槽，如果不是该客户端对应服务器的插槽，redis会报错，并告知应前往的redis实例地址和端口。</p><p>redis-cli客户端提供了 –c 参数实现自动重定向。</p><p>如 redis-cli -c –p 6379 登入后，再录入、查询键值对可以自动重定向。</p><p>不在一个slot下的键值，是不能使用mget,mset等多键操作。</p><p><img src="/2022/08/15/redis6/79.png" alt="image-20220815133111544"></p><p>可以通过{}来定义组的概念，从而使key中{}内相同内容的键值对放到一个slot中去</p><p><img src="/2022/08/15/redis6/80.png" alt="image-20220815133127955"></p><h3 id="查询集群中的值"><a href="#查询集群中的值" class="headerlink" title="查询集群中的值"></a>查询集群中的值</h3><p>CLUSTER GETKEYSINSLOT <slot><count> 返回 count 个 slot 槽中的键</count></slot></p><p>查看插槽中的值，只能到对应范围插槽中查看，不能查看其他范围插槽中的值</p><p><img src="/2022/08/15/redis6/81.png" alt="查看插槽"></p><h3 id="故障恢复-1"><a href="#故障恢复-1" class="headerlink" title="故障恢复"></a>故障恢复</h3><p>如果主节点下线？从节点能否自动升为主节点？注意：<strong>15****秒超时</strong></p><p>主节点恢复后，主从关系会如何？主节点回来变成从机。</p><p>如果所有某一段插槽的主从节点都宕掉，redis服务是否还能继续?</p><p>如果某一段插槽的主从都挂掉，而cluster-require-full-coverage 为yes ，那么 ，整个集群都挂掉</p><p>如果某一段插槽的主从都挂掉，而cluster-require-full-coverage 为no ，那么，该插槽数据全都不能使用，也无法存储。其他插槽可以继续使用</p><p>redis.conf中的参数 cluster-require-full-coverage</p><h3 id="集群的Jedis开发"><a href="#集群的Jedis开发" class="headerlink" title="集群的Jedis开发"></a>集群的Jedis开发</h3><p>即使连接的不是主机，集群会自动切换主机存储。主机写，从机读。</p><p>无中心化主从集群。无论从哪台主机写的数据，其他主机上都能读到数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisClusterTest</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">      <span class="comment">//创建对象</span></span><br><span class="line">     Set&lt;HostAndPort&gt;set =<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;HostAndPort&gt;();</span><br><span class="line">      <span class="comment">//集合添加ip 端口信息</span></span><br><span class="line">     set.add(<span class="keyword">new</span> <span class="title class_">HostAndPort</span>(<span class="string">&quot;192.168.31.211&quot;</span>,<span class="number">6379</span>));</span><br><span class="line">      <span class="comment">//效果同上</span></span><br><span class="line">      <span class="comment">//HostAndPort set = new HostAndPort(&quot;192.168.31.211&quot;,6379)</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//生成集群对象</span></span><br><span class="line">     JedisCluster jedisCluster=<span class="keyword">new</span> <span class="title class_">JedisCluster</span>(set);</span><br><span class="line">      <span class="comment">//操作数据</span></span><br><span class="line">     jedisCluster.set(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;v1&quot;</span>);</span><br><span class="line">     System.out.println(jedisCluster.get(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Redis-集群提供了以下好处"><a href="#Redis-集群提供了以下好处" class="headerlink" title="Redis 集群提供了以下好处"></a>Redis 集群提供了以下好处</h3><ul><li>实现扩容</li><li>分摊压力</li><li>无中心配置相对简单</li></ul><h3 id="Redis集群的不足"><a href="#Redis集群的不足" class="headerlink" title="Redis集群的不足"></a>Redis集群的不足</h3><ul><li>多键操作是不被支持的 </li><li>多键的Redis事务是不被支持的。lua脚本不被支持</li><li>由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要迁移至redis cluster，需要整体迁移而不是逐步过渡，复杂度较大。</li></ul><h2 id="Redis应用问题解决"><a href="#Redis应用问题解决" class="headerlink" title="Redis应用问题解决"></a>Redis应用问题解决</h2><p><a href="https://zhuanlan.zhihu.com/p/346651831">什么是缓存雪崩、缓存击穿、缓存穿透？ - 知乎 (zhihu.com)</a></p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>造成缓存穿透的主要原因就是：查询某个 Key 对应的数据，Redis 缓存中没有相应的数据，则直接到数据库中查询。数据库中也不存在要查询的数据，则数据库会返回空，而 Redis 也不会缓存这个空结果。这就造成每次通过这样的 Key 去查询数据都会直接到数据库中查询，Redis 不会缓存空结果。这就造成了缓存穿透的问题。</p><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会压到数据源，从而可能压垮数据源。比如用一个不存在的用户id获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。</p><p><img src="/2022/08/15/redis6/82.png" alt="流程"></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>一个一定不存在缓存及查询不到的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p><p>解决方案：</p><p>（1）  <strong>对空值缓存：</strong>如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟</p><p>（2）  <strong>设置可访问的名单（白名单）：</strong></p><p>使用bitmaps类型定义一个可以访问的名单，名单id作为bitmaps的偏移量，每次访问和bitmap里面的id进行比较，如果访问id不在bitmaps里面，进行拦截，不允许访问。</p><p>（3）  <strong>采用布隆过滤器</strong>：(布隆过滤器（Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量(位图)和一系列随机映射函数（哈希函数）。</p><p>布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。)</p><p>将所有可能存在的数据哈希到一个足够大的bitmaps中，一个一定不存在的数据会被 这个bitmaps拦截掉，从而避免了对底层存储系统的查询压力。</p><p><strong>（4）</strong>  <strong>进行实时监控：</strong>当发现Redis的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务</p><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>其实跟缓存雪崩有点类似，缓存雪崩是大规模的key失效，而缓存击穿是一个热点的Key，有大并发集中对其进行访问，突然间这个Key失效了，导致大并发全部打在数据库上，导致数据库压力剧增。这种现象就叫做缓存击穿。</p><p>key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p><p><img src="/2022/08/15/redis6/83.png" alt="流程"></p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p>key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：缓存被“击穿”的问题。</p><p>解决问题：</p><p>（1）<strong>预先设置热门数据</strong>：在redis高峰访问之前，把一些热门数据提前存入到redis里面，加大这些热门数据key的时长</p><p>（2）<strong>实时调整</strong>：现场监控哪些数据热门，实时调整key的过期时长</p><p>（3）<strong>使用锁</strong>：</p><ul><li>（1）  就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db。</li><li>（2）  先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX）去set一个mutex key</li><li>（3）  当操作返回成功时，再进行load db的操作，并回设缓存,最后删除mutex key；</li><li>（4）  当操作返回失败，证明有线程在load db，当前线程睡眠一段时间再重试整个get缓存的方法。</li></ul><p><img src="/2022/08/15/redis6/84.png" alt="流程"></p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><p>当某一个时刻出现大规模的缓存失效的情况，那么就会导致大量的请求直接打在数据库上面，导致数据库压力巨大，如果在高并发的情况下，可能瞬间就会导致数据库宕机。这时候如果运维马上又重启数据库，马上又会有新的流量把数据库打死。这就是缓存雪崩。</p><p>key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p><p>缓存雪崩与缓存击穿的区别在于这里针对很多key缓存，前者则是某一个key</p><p>正常访问</p><p><img src="/2022/08/15/redis6/85.png" alt="执行过程"></p><p><img src="/2022/08/15/redis6/86.png" alt="执行过程"></p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><p>缓存失效时的雪崩效应对底层系统的冲击非常可怕！</p><p>解决方案：</p><p><strong>（1）</strong>  <strong>构建多级缓存架构：</strong>nginx缓存 + redis缓存 +其他缓存（ehcache等）</p><p><strong>（2）</strong>  <strong>使用锁或队列：</strong></p><p>用加锁或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。不适用高并发情况</p><p><strong>（3）</strong>  <strong>设置过期标志更新缓存：</strong></p><p>记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际key的缓存。</p><p><strong>（4）</strong>  <strong>将缓存失效时间分散开：</strong></p><p>比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效</p><h3 id="分布式锁（挖坑之分布式如何实现）"><a href="#分布式锁（挖坑之分布式如何实现）" class="headerlink" title="分布式锁（挖坑之分布式如何实现）"></a>分布式锁（挖坑之分布式如何实现）</h3><p><a href="https://blog.csdn.net/qq_32519415/article/details/97655997">Redis专题(三).锁的基本概念到Redis分布式锁实现_抓住流浪剑客的小Yi巴的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_43989347/article/details/125315482?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-125315482-blog-106389040.pc_relevant_multi_platform_featuressortv2dupreplace&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-125315482-blog-106389040.pc_relevant_multi_platform_featuressortv2dupreplace&utm_relevant_index=2">redis实现分布式锁_BigTree的学习之路的博客-CSDN博客_redis做分布式锁</a></p><p>分布式锁的概念<br>分布式锁：满足分布式系统或集群模式下多进程可见并且互斥的锁。</p><p>多进程可见：多个JVM都能看得到。比如redis、mysql等，那么所有的JVM进程都能看得到</p><ul><li>互斥锁：只允许一个进程能拿到</li><li>高可用：大多数情况下，获取锁都能获取成功</li><li>高性能：本身加锁后，线程变成了串行执行，从而会影响性能。所以获取锁的步骤上应该高性能</li><li>安全性：获取锁应该考虑异常的情况。获取锁后宕机怎么办？ 死锁怎么办</li></ul><p>分布式锁：当多个进程不在同一个系统中，用分布式锁控制多个进程对资源的访问。</p><p>加一把锁，让内存中的所有服务器都享受到锁的机制</p><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><p>随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的Java API并不能提供分布式锁的能力。为了解决这个问题就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！</p><p>分布式锁主流的实现方案：</p><ol><li><p>基于数据库实现分布式锁</p></li><li><p>基于缓存（Redis等）</p></li><li><p>基于Zookeeper</p></li></ol><p>每一种分布式锁解决方案都有各自的优缺点：</p><ol><li><p>性能：redis最高</p></li><li><p>可靠性：zookeeper最高</p></li></ol><p>这里，我们就基于redis实现分布式锁。</p><h4 id="解决方案：使用redis实现分布式锁"><a href="#解决方案：使用redis实现分布式锁" class="headerlink" title="解决方案：使用redis实现分布式锁"></a>解决方案：使用redis实现分布式锁</h4><p>redis:命令</p><p># set sku:1:info “OK” NX PX 10000</p><p>EX second ：设置键的过期时间为 second 秒。 SET key value EX second 效果等同于 SETEX key second value 。</p><p>PX millisecond ：设置键的过期时间为 millisecond 毫秒。 SET key value PX millisecond 效果等同于 PSETEX key millisecond value 。</p><p>NX ：只在键不存在时，才对键进行设置操作。 SET key value NX 效果等同于 SETNX key value 。</p><p>XX ：只在键已经存在时，才对键进行设置操作。</p><p><img src="/2022/08/15/redis6/87.png" alt="流程"></p><ol><li><p>多个客户端同时获取锁（setnx）</p></li><li><p>获取成功，执行业务逻辑{从db获取数据，放入缓存}，执行完成释放锁（del）</p></li><li><p>其他客户端等待重试</p></li></ol><h4 id="Java中操作锁机制"><a href="#Java中操作锁机制" class="headerlink" title="Java中操作锁机制"></a>Java中操作锁机制</h4><p>在redis中 set num 0</p><p>通过这段代码是通过获得锁来给num的value值加一</p><p>设置过期时间，自动释放锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;testLock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLock</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1获取锁，setne 设置锁的过期时间</span></span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>, <span class="string">&quot;111&quot;</span>,<span class="number">3</span>,TimeUnit.SECONDS);</span><br><span class="line">    <span class="comment">//2获取锁成功、查询num的值</span></span><br><span class="line">    <span class="keyword">if</span>(lock)&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">        <span class="comment">//2.1判断num为空return</span></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(value))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.2有值就转成成int</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(value+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//2.3把redis的num加1</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;num&quot;</span>, ++num);</span><br><span class="line">        <span class="comment">//2.4释放锁，del</span></span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//3获取锁失败、每隔0.1秒再获取</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            testLock();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="锁被误删"><a href="#锁被误删" class="headerlink" title="锁被误删"></a>锁被误删</h4><p><img src="/2022/08/15/redis6/88.png" alt="误删除"></p><p>有两台服务器A，B，锁的自动释放时间为10s，在服务器进行操作，A服务器先操作，A获得锁将其上锁，防止其他服务器抢到，A进行具体操作，但是这时候服务器卡顿，A在10s未完成操作锁被自动释放了，这是B服务器抢到了锁，进行上锁，执行具体操作，这时候A服务器反应过来了，继续完成未完成的操作，之后把锁释放了，而此时释放的锁缺失B服务器上得锁，这叫锁被误删</p><h3 id="优化之UUID防误删"><a href="#优化之UUID防误删" class="headerlink" title="优化之UUID防误删"></a>优化之UUID防误删</h3><p>只能自己服务器删自己服务器锁，不能删其他服务器的锁</p><ul><li>使用uuid表示不同的操作 set lock uuid nx ex 10</li><li>释放锁的时候，先判断当前的uuid和要释放锁的uuid是否相同再进行操作</li></ul><p><img src="/2022/08/15/redis6/89.png" alt="执行流程"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;testLock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLock</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//获得UUID 来判断各服务器中操作的锁是否和当前服务器操作的锁相同</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1获取锁,setne 设置锁的过期时间 将锁的value设置为uuid </span></span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>, uuid,<span class="number">3</span>,TimeUnit.SECONDS);</span><br><span class="line">    <span class="comment">//2获取锁成功、查询num的值</span></span><br><span class="line">    <span class="keyword">if</span>(lock)&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">        <span class="comment">//2.1判断num为空return</span></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(value))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.2有值就转成成int</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(value+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//2.3把redis的num加1</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;num&quot;</span>, ++num);</span><br><span class="line">        <span class="comment">//获得锁的uuid和当前操作的锁的uuid是否相同,相同才可以删除</span></span><br><span class="line">        <span class="keyword">if</span>(uuid.equals((String)redisTemplate.opsForValue().get(<span class="string">&quot;lock&quot;</span>);))</span><br><span class="line">        <span class="comment">//2.4判断uuid是否相同 相同释放锁释放锁，del </span></span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//3获取锁失败、每隔0.1秒再获取</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            testLock();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="缺乏原子性"><a href="#缺乏原子性" class="headerlink" title="缺乏原子性"></a>缺乏原子性</h4><p><img src="/2022/08/15/redis6/90.png" alt="缺乏原子性"></p><h4 id="优化之LUA脚本保证删除的原子性"><a href="#优化之LUA脚本保证删除的原子性" class="headerlink" title="优化之LUA脚本保证删除的原子性"></a>优化之LUA脚本保证删除的原子性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;testLockLua&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLockLua</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1 声明一个uuid ,将做为一个value 放入我们的key所对应的值中</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">    <span class="comment">//2 定义一个锁：lua 脚本可以使用同一把锁，来实现删除！</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">skuId</span> <span class="operator">=</span> <span class="string">&quot;25&quot;</span>; <span class="comment">// 访问skuId 为25号的商品 100008348542</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">locKey</span> <span class="operator">=</span> <span class="string">&quot;lock:&quot;</span> + skuId; <span class="comment">// 锁住的是每个商品的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3 获取锁</span></span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(locKey, uuid, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一种： lock 与过期时间中间不写任何的代码。</span></span><br><span class="line">    <span class="comment">// redisTemplate.expire(&quot;lock&quot;,10, TimeUnit.SECONDS);//设置过期时间</span></span><br><span class="line">    <span class="comment">// 如果true</span></span><br><span class="line">    <span class="keyword">if</span> (lock) &#123;</span><br><span class="line">        <span class="comment">// 执行的业务逻辑开始</span></span><br><span class="line">        <span class="comment">// 获取缓存中的num 数据</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">        <span class="comment">// 如果是空直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(value)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不是空 如果说在这出现了异常！ 那么delete 就删除失败！ 也就是说锁永远存在！</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(value + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// 使num 每次+1 放入缓存</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;num&quot;</span>, String.valueOf(++num));</span><br><span class="line">        <span class="comment">/*使用lua脚本来锁*/</span></span><br><span class="line">        <span class="comment">// 定义lua 脚本</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">        <span class="comment">// 使用redis执行lua执行</span></span><br><span class="line">        DefaultRedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;();</span><br><span class="line">        redisScript.setScriptText(script);</span><br><span class="line">        <span class="comment">// 设置一下返回值类型 为Long</span></span><br><span class="line">        <span class="comment">// 因为删除判断的时候，返回的0,给其封装为数据类型。如果不封装那么默认返回String 类型，</span></span><br><span class="line">        <span class="comment">// 那么返回字符串与0 会有发生错误。</span></span><br><span class="line">        redisScript.setResultType(Long.class);</span><br><span class="line">        <span class="comment">// 第一个要是script 脚本 ，第二个需要判断的key，第三个就是key所对应的值。</span></span><br><span class="line">        redisTemplate.execute(redisScript, Arrays.asList(locKey), uuid);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 其他线程等待 没有获得锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 睡眠 等待一段时间</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="comment">// 睡醒了之后，调用方法。</span></span><br><span class="line">            testLockLua();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="LUA脚本详解"><a href="#LUA脚本详解" class="headerlink" title="LUA脚本详解"></a>LUA脚本详解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义lua 脚本</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="/2022/08/15/redis6/91.png" alt="脚本详解"></p><p>为了确保分布式锁可用，我们至少要确保锁的实现同时<strong>满足以下四个条件</strong>：</p><p>-- 互斥性。在任意时刻，只有一个客户端能持有锁。</p><p>-- 不会发生死锁。即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</p><p>-- 解铃还须系铃人。加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。</p><p>-- 加锁和解锁必须具有原子性。</p><h2 id="Redis6-0新功能"><a href="#Redis6-0新功能" class="headerlink" title="Redis6.0新功能"></a>Redis6.0新功能</h2><h3 id="ACL简介"><a href="#ACL简介" class="headerlink" title="ACL简介"></a>ACL简介</h3><p><a href="https://redis.io/topics/acl">https://redis.io/topics/acl</a></p><p>Redis ACL是Access Control List（访问控制列表）的缩写，该功能允许根据可以执行的命令和可以访问的键来限制某些连接。</p><p>在Redis 5版本之前，Redis 安全规则只有密码控制 还有通过rename 来调整高危命令比如 flushdb ， KEYS* ， shutdown 等。Redis 6 则提供ACL的功能对用户进行更细粒度的权限控制 ：</p><p>（1）接入权限:用户名和密码 </p><p>（2）可以执行的命令 </p><p>（3）可以操作的 KEY</p><h4 id="命令-3"><a href="#命令-3" class="headerlink" title="命令"></a>命令</h4><h5 id="使用acl-list命令展现用户权限列表"><a href="#使用acl-list命令展现用户权限列表" class="headerlink" title="使用acl list命令展现用户权限列表"></a>使用acl list命令展现用户权限列表</h5><p><img src="/2022/08/15/redis6/92.png" alt="查看用户列表"></p><h5 id="使用acl-cat命令"><a href="#使用acl-cat命令" class="headerlink" title="使用acl cat命令"></a>使用acl cat命令</h5><p>（1）查看添加权限指令类别</p><p><img src="/2022/08/15/redis6/93.png" alt="查看权限"></p><p>（2）加参数类型名可以查看类型下具体命令</p><p><img src="/2022/08/15/redis6/94.png" alt="查看命令"></p><h5 id="使用acl-whoami命令查看当前用户"><a href="#使用acl-whoami命令查看当前用户" class="headerlink" title="使用acl whoami命令查看当前用户"></a>使用acl whoami命令查看当前用户</h5><h5 id="使用aclsetuser命令创建和编辑用户ACL"><a href="#使用aclsetuser命令创建和编辑用户ACL" class="headerlink" title="使用aclsetuser命令创建和编辑用户ACL"></a>使用aclsetuser命令创建和编辑用户ACL</h5><p>（1）ACL规则</p><p>下面是有效ACL规则的列表。某些规则只是用于激活或删除标志，或对用户ACL执行给定更改的单个单词。其他规则是字符前缀，它们与命令或类别名称、键模式等连接在一起。</p><table><thead><tr><th>ACL规则</th><th></th><th></th></tr></thead><tbody><tr><td>类型</td><td>参数</td><td>说明</td></tr><tr><td>启动和禁用用户</td><td><strong>on</strong></td><td>激活某用户账号</td></tr><tr><td><strong>off</strong></td><td>禁用某用户账号。注意，已验证的连接仍然可以工作。如果默认用户被标记为off，则新连接将在未进行身份验证的情况下启动，并要求用户使用AUTH选项发送AUTH或HELLO，以便以某种方式进行身份验证。</td><td></td></tr><tr><td>权限的添加删除</td><td><strong>+<command></strong></td><td>将指令添加到用户可以调用的指令列表中</td></tr><tr><td><strong>-<command></strong></td><td>从用户可执行指令列表移除指令</td><td></td></tr><tr><td><strong>+@<category></category></strong></td><td>添加该类别中用户要调用的所有指令，有效类别为@admin、@set、@sortedset…等，通过调用ACL CAT命令查看完整列表。特殊类别@all表示所有命令，包括当前存在于服务器中的命令，以及将来将通过模块加载的命令。</td><td></td></tr><tr><td>-@<actegory></actegory></td><td>从用户可调用指令中移除类别</td><td></td></tr><tr><td><strong>allcommands</strong></td><td>+@all的别名</td><td></td></tr><tr><td><strong>nocommand</strong></td><td>-@all的别名</td><td></td></tr><tr><td>可操作键的添加或删除</td><td><strong>~<pattern></pattern></strong></td><td>添加可作为用户可操作的键的模式。例如~*允许所有的键</td></tr></tbody></table><p>（2）通过命令创建新用户默认权限</p><p>acl setuser user1</p><p>在上面的示例中，我根本没有指定任何规则。如果用户不存在，这将使用just created的默认属性来创建用户。如果用户已经存在，则上面的命令将不执行任何操作。</p><p>（3）设置有用户名、密码、ACL权限、并启用的用户</p><p>acl setuser user2 on &gt;password ~cached:* +get</p><p><img src="/2022/08/15/redis6/95.png" alt="设置用户"></p><p>(4)切换用户，验证权限</p><p><img src="/2022/08/15/redis6/96.png" alt="切换用户"></p><h3 id="IO多线程"><a href="#IO多线程" class="headerlink" title="IO多线程"></a>IO多线程</h3><h4 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h4><p>Redis6终于支撑多线程了，告别单线程了吗？</p><p>IO多线程其实指<strong>客户端交互部分</strong>的<strong>网络IO</strong>交互处理模块<strong>多线程</strong>，而非<strong>执行命令多线程</strong>。Redis6执行命令依然是单线程。</p><h4 id="原理架构"><a href="#原理架构" class="headerlink" title="原理架构"></a>原理架构</h4><p>Redis 6 加入多线程,但跟 Memcached 这种从 IO处理到数据访问多线程的实现模式有些差异。Redis 的多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程。之所以这么设计是不想因为多线程而变得复杂，需要去控制 key、lua、事务，LPUSH&#x2F;LPOP 等等的并发问题。整体的设计大体如下:</p><p><img src="/2022/08/15/redis6/97.png" alt="线程">                               </p><p>另外，多线程IO默认也是不开启的，需要再配置文件中配置</p><p>io-threads-do-reads yes </p><p>io-threads 4</p><h3 id="工具支持-Cluster"><a href="#工具支持-Cluster" class="headerlink" title="工具支持 Cluster"></a>工具支持 Cluster</h3><p>之前<strong>老版Redis想要搭集群需要单独安装ruby环境</strong>，Redis 5 将 redis-trib.rb 的功能集成到 redis-cli 。另外官方 redis-benchmark 工具开始支持 cluster 模式了，通过多线程的方式对多个分片进行压测。</p><p><img src="/2022/08/15/redis6/98.png" alt="开启cluster"></p><h3 id="Redis6新功能还有："><a href="#Redis6新功能还有：" class="headerlink" title="Redis6新功能还有："></a>Redis6新功能还有：</h3><p>1、RESP3新的 Redis 通信协议：优化服务端与客户端之间通信</p><p>2、Client side caching客户端缓存：基于 RESP3 协议实现的客户端缓存功能。为了进一步提升缓存的性能，将客户端经常访问的数据cache到客户端。减少TCP网络交互。</p><p>3、Proxy集群代理模式：Proxy 功能，让 Cluster 拥有像单实例一样的接入方式，降低大家使用cluster的门槛。不过需要注意的是代理不改变 Cluster 的功能限制，不支持的命令还是不会支持，比如跨 slot 的多Key操作。</p><p>4、Modules API</p><p>Redis 6中模块API开发进展非常大，因为Redis Labs为了开发复杂的功能，从一开始就用上Redis模块。Redis可以变成一个框架，利用Modules来构建不同系统，而不需要从头开始写然后还要BSD许可。Redis一开始就是一个向编写各种系统开放的平台。</p>]]></content>
      
      
      <categories>
          
          <category> 缓存中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reids </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞吉外卖day5</title>
      <link href="/2022/08/10/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96day5/"/>
      <url>/2022/08/10/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96day5/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA项目实战瑞吉外卖—day5"><a href="#JAVA项目实战瑞吉外卖—day5" class="headerlink" title="JAVA项目实战瑞吉外卖—day5"></a>JAVA项目实战瑞吉外卖—day5</h1><h2 id="新增套餐"><a href="#新增套餐" class="headerlink" title="新增套餐"></a>新增套餐</h2><p>在套餐的controller进行操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增套餐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmealDto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//需要添加@RequestBody获得请求体里的categot_id</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span>&#123;</span><br><span class="line">    setmealService.saveWithDish(setmealDto);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增套餐成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要的service方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增套餐</span></span><br><span class="line"><span class="comment"> * 同时保存套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmealDto</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDto setmealDto)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存套餐信息,操作setmeal,执行insert操作</span></span><br><span class="line">    <span class="built_in">this</span>.save(setmealDto);</span><br><span class="line">    <span class="comment">//将封装的setmealDto里的setmealId赋值 给菜品信息赋值</span></span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDto.getSetmealDishes();</span><br><span class="line">    <span class="comment">//使用stream()流形式给菜品赋予对应套餐的id值</span></span><br><span class="line">    <span class="comment">//在setmeal_dish菜品套餐关联表中将对应的套餐id赋予到菜品中</span></span><br><span class="line">    setmealDishes.stream().map((item)-&gt;&#123;</span><br><span class="line">        item.setSetmealId(setmealDto.getId());</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存菜品和套餐的关联关系</span></span><br><span class="line">    setmealDishService.saveBatch(setmealDishes);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p> 和之前的基本没什么区别</p><p>就是条件不一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span>&#123;</span><br><span class="line">    <span class="comment">//分特构造器</span></span><br><span class="line">    Page&lt;Setmeal&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">    Page&lt;SetmealDto&gt; dtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;Setmeal&gt;();</span><br><span class="line">    queryWrapper.like(name!=<span class="literal">null</span>,Setmeal::getName,name);</span><br><span class="line">    <span class="comment">//添加排序条件,排序</span></span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    setmealService.page(pageInfo,queryWrapper);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象拷贝,通过查询完pageInfo的信息赋值到dtoPage,再单独设置每个套餐的套餐分类信息</span></span><br><span class="line">    <span class="comment">//records代表的是分页上记录的列表信息</span></span><br><span class="line">    BeanUtils.copyProperties(pageInfo,dtoPage,<span class="string">&quot;records&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Setmeal&gt; records = pageInfo.getRecords();</span><br><span class="line"></span><br><span class="line">    List&lt;SetmealDto&gt; list = records.stream().map((item)-&gt;&#123;</span><br><span class="line">        <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line">        <span class="comment">//对象拷贝,将list中的页面数据拷贝到setmealDto</span></span><br><span class="line">        BeanUtils.copyProperties(item,setmealDto);</span><br><span class="line">        <span class="comment">//根据套餐来获得分类的id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">        <span class="comment">//根据分类id查询数据库</span></span><br><span class="line">        <span class="comment">//获得分类的对象</span></span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">        <span class="keyword">if</span> (category!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//获得分类名称</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            setmealDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setmealDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    dtoPage.setRecords(list);</span><br><span class="line">    <span class="keyword">return</span> R.success(dtoPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除套餐"><a href="#删除套餐" class="headerlink" title="删除套餐"></a>删除套餐</h2><p>单个删除和批量删除共用的同一个接口，只是传入的参数不同但是都是数组类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除套餐,同时需要删除套餐和菜品的关联数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeWithDish</span><span class="params">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询套餐状态,确认是否可以删除</span></span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.in(Setmeal::getId,ids);</span><br><span class="line">    queryWrapper.eq(Setmeal::getStatus,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//如果不能抛出一个业务异常</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.count(queryWrapper);</span><br><span class="line">    <span class="keyword">if</span> (count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;套餐正在售卖中,不能删除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果可以删除,先删除套餐表中的数据</span></span><br><span class="line">    <span class="built_in">this</span>.removeByIds(ids);</span><br><span class="line">    <span class="comment">//删除关系表中的数据</span></span><br><span class="line">    <span class="comment">//根据套餐id，获得对应的菜品id值，再删除对应关系表中数据</span></span><br><span class="line">    LambdaQueryWrapper&lt;SetmealDish&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    lambdaQueryWrapper.in(SetmealDish::getSetmealId,ids);</span><br><span class="line">    setmealDishService.remove(lambdaQueryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手机验证码部分,无法更新</p><p>前端页面无法更新不能做小程序页面</p>]]></content>
      
      
      <categories>
          
          <category> project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞吉外卖day4</title>
      <link href="/2022/08/10/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96day4/"/>
      <url>/2022/08/10/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96day4/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA项目实战瑞吉外卖—day4"><a href="#JAVA项目实战瑞吉外卖—day4" class="headerlink" title="JAVA项目实战瑞吉外卖—day4"></a>JAVA项目实战瑞吉外卖—day4</h1><h2 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h2><h3 id="文件上传介绍"><a href="#文件上传介绍" class="headerlink" title="文件上传介绍"></a>文件上传介绍</h3><p>文件上传，也称为upload，是指将本地图片、视频、音频等文件上传到服务器上，可以供其他用户浏览或下载的过程 文件上传在项目中应用非常广泛，我们经常发微博、发微信朋友國都用到了文件上传功能</p><p>文件上传时，对页面的form表单有如下要求：</p><ul><li>method&#x3D;”post” 采用post方式提交数据   使用页面进行文件上传必须是Post请求</li><li>enctype&#x3D;”multipart&#x2F;form-data” 采用multipart格式上传文件</li><li>type&#x3D;”file” 使用input的file控件上传</li></ul><p>​    举例： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>= <span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/common/upload&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;myFile&quot;</span> <span class="attr">type</span> &quot;<span class="attr">file</span>&quot; /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>服务端要接收客户端页面上传的文件，通常都会使用Apache的两个组件： </p><ul><li>commons-fileupload </li><li>commons-io</li></ul><p>Spring框架在spring-web包中对文件上传进行了封装，大大简化了服务端代码，我们只需要在Controller的方法中声 一个MultipartFile类型的参数即可接收上传的文件，file就是我们上传的文件</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//file是一个临时文件,需要转存到指定位置,否则本次请求完成后临时文件会删除</span></span><br><span class="line">        <span class="comment">//名称必须和前端命名相同 否则无法接收到数据</span></span><br><span class="line">        log.info(file.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件下载介绍"><a href="#文件下载介绍" class="headerlink" title="文件下载介绍"></a>文件下载介绍</h3><p>文件下载，也称为download，是指将文件从服务器传输到本地计算机的过程。</p><p>通过浏览器进行文件下载，通常有两种表现形式：</p><ul><li>以附件形式下载，弹出保存对话框，将文件保存到指定磁盘目录 </li><li>直接在浏览器中打开</li></ul><p>通过浏览器进行文件下载，本质上就是服务端将文件以流的形式写回浏览器的过程。</p><p> @Value(“${reggie.path}”)是yml配置的资源路径</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 图片转存位置</span></span><br><span class="line"><span class="attr">reggie:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">D:\project\ruijiwaimai\imgs\</span></span><br></pre></td></tr></table></figure><p>控制层代码编写</p><p>前端读取数据接口路径</p><p><img src="/2022/08/10/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96day4/Users\29769\AppData\Roaming\Typora\typora-user-images\image-20220809205018348.png" alt="image-20220809205018348"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传和下载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/common&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;reggie.path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String basePath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="comment">//file是一个临时文件，需要转存到指定位置，否则本次请求完成后临时文件会删除</span></span><br><span class="line">        log.info(file.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//原始文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用UUID重新生成文件名，防止文件名称重复造成文件覆盖</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString() + suffix;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个目录对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basePath);</span><br><span class="line">        <span class="comment">//判断当前目录是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">            <span class="comment">//目录不存在，需要创建</span></span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将临时文件转存到指定位置</span></span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + fileName));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(fileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件下载</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/download&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String name, HttpServletResponse response)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//输入流，通过输入流读取文件内容 在本地拿到文件以流的形式读取</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + name));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//输出流，通过输出流将文件写回浏览器</span></span><br><span class="line">            <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置属性</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len = fileInputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                outputStream.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">                outputStream.flush();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            outputStream.close();</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为是根据前端页面的请求路径写的接口，必须要前端约定的配置一样才能完成io流的读取和写入</p><h2 id="新增菜品"><a href="#新增菜品" class="headerlink" title="新增菜品"></a>新增菜品</h2><p>这里进行菜品信息的操作是需要进行两张表的操作</p><ul><li>菜品信息表Dish</li><li>菜品口味表DishFlavor</li></ul><p>因为是操作两张表,未防止数据库出错，所以需要开启事务控制</p><p>@Transactional:在需要事务控制的方法上添加注解</p><p>注意在springboot启动类添加开启事务的功能：@EnableTransactionManagement</p><p>在开发代码之前，需要梳理一下新增菜品时前端页面和服务端的交互过程：  </p><ul><li>1、页面(backend&#x2F;page&#x2F;food&#x2F;add.html)发送ajax请求，请求服务端获取菜品分类数据井展示到下拉框中 </li><li>2、页面发送请求进行国片上传，请求服务端将图片保存到服务器 </li><li>3、页面发送请求进行图片下载，将上传的国片进行回显 </li><li>4、点击保存按钮，发送ajax请求，将菜品相关数据以json形式提交到服务端</li></ul><p>开发新增菜品功能，其实就是服务端编写代码去处理前端发送的四次请求即可</p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>请求服务端获取菜品分类数据井展示到下拉框中 ,根据前端页面返回的Type属性将菜品分类在展示出来</p><p><img src="/2022/08/10/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96day4/Users\29769\AppData\Roaming\Typora\typora-user-images\image-20220809212050613.png" alt="image-20220809212050613"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取菜品分类</span></span><br><span class="line">getDishList () &#123;</span><br><span class="line">  <span class="title function_">getCategoryList</span>(&#123; <span class="string">&#x27;type&#x27;</span>: <span class="number">1</span> &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">dishList</span> = res.<span class="property">data</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据条件查询分类数据</span></span><br><span class="line"><span class="comment"> * 根据前端传递的type属性进行查询</span></span><br><span class="line"><span class="comment"> * type:1---菜品</span></span><br><span class="line"><span class="comment"> * type:2---套餐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> category</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Category&gt;&gt; <span class="title function_">list</span><span class="params">(Category category)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加条件</span></span><br><span class="line">    queryWrapper.eq(category.getType()!=<span class="literal">null</span>,Category::getType,category.getType());</span><br><span class="line">    <span class="comment">//添加排序条件</span></span><br><span class="line">    queryWrapper.orderByAsc(Category::getSort).orderByDesc(Category::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Category&gt; list = categoryService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二步，第三步同上文件上传与下载-因为写的接口一样可以直接调用"><a href="#第二步，第三步同上文件上传与下载-因为写的接口一样可以直接调用" class="headerlink" title="第二步，第三步同上文件上传与下载 因为写的接口一样可以直接调用"></a>第二步，第三步同上文件上传与下载 因为写的接口一样可以直接调用</h3><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><h5 id="将菜品相关数据以json形式提交到服务端"><a href="#将菜品相关数据以json形式提交到服务端" class="headerlink" title="将菜品相关数据以json形式提交到服务端"></a>将菜品相关数据以json形式提交到服务端</h5><p>因为前端返回的数据中含有flavors的数据且是数组类型，原本封装的Dish实体不能将其一起封装成对象，但是其他属性可以封装为Dish对象属性，所以这里需要新一个DTO实体一起接收flavors和Dish属性</p><p>DTO:全称为Data Transfer Object，即数据传输对象，一般用于展示层和服务层之间的数据传输</p><p><img src="/2022/08/10/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96day4/1.png" alt="数据格式"></p><h5 id="封装dto"><a href="#封装dto" class="headerlink" title="封装dto"></a>封装dto</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishDto</span> <span class="keyword">extends</span> <span class="title class_">Dish</span> &#123;</span><br><span class="line"><span class="comment">//里面存放的是菜品口味信息</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;DishFlavor&gt; flavors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编写接口"><a href="#编写接口" class="headerlink" title="编写接口"></a>编写接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;DishMapper, Dish&gt; <span class="keyword">implements</span> <span class="title class_">DishService</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DishFlavorService dishFlavorService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增菜品,同时保存口味数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dishDto</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存菜品信息到dish</span></span><br><span class="line">        <span class="built_in">this</span>.save(dishDto);</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">disId</span> <span class="operator">=</span> dishDto.getId();<span class="comment">//菜品id</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//菜品口味</span></span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用stream流处理,将菜品口味对应到新建立的菜品id上</span></span><br><span class="line">        flavors = flavors.stream().map((item)-&gt;&#123;</span><br><span class="line">            item.setDishId(disId);</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存口味信息到dish_flavor</span></span><br><span class="line">        dishFlavorService.saveBatch(flavors);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><p>这部分的分页查询较为麻烦</p><p>我整理一下自己的思路在注解上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 菜品信息分页查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize,String name)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分特构造器</span></span><br><span class="line">    Page&lt;Dish&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">    <span class="comment">//因为在前端页面上需要得到CategoryName信息,要使用dto来封装</span></span><br><span class="line">    Page&lt;DishDto&gt; dishDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;Dish&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加过滤条件</span></span><br><span class="line">    queryWrapper.like(name!=<span class="literal">null</span>,Dish::getName,name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加排序</span></span><br><span class="line">    queryWrapper.orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进行分页查询</span></span><br><span class="line">    dishService.page(pageInfo,queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象拷贝</span></span><br><span class="line">    <span class="comment">//将pageInfo的属性信息拷贝到dishDtoPage中,但是要忽视records列表覆盖,records列表记录着菜品详情信息</span></span><br><span class="line">    <span class="comment">//records的详情信息我们需要自己整理,需要多添加一个CategoryName属性,才能在前端页面显示出菜品分类名</span></span><br><span class="line">    BeanUtils.copyProperties(pageInfo,dishDtoPage,<span class="string">&quot;records&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将菜品信息拿出来,根据records流信息查询到分类id,由分类id获得属性名</span></span><br><span class="line">    List&lt;Dish&gt; records = pageInfo.getRecords();</span><br><span class="line">    <span class="comment">//将查询的数据封装到DishDto属性的list中,含有菜品详细信息以及菜品分类名信息</span></span><br><span class="line">    <span class="comment">//使用lambda表达式对菜品信息进行整理,一一对应上分类菜品的名称,列如:川菜....</span></span><br><span class="line">    List&lt;DishDto&gt; list = records.stream().map((item)-&gt;&#123;</span><br><span class="line">        <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">        BeanUtils.copyProperties(item,dishDto);</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();<span class="comment">//分类id</span></span><br><span class="line">        <span class="comment">//根据id查询分类对象 因为需要查询到菜品分类的名称所以要调用categoryService来查询到对应的数据</span></span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">        <span class="keyword">if</span> (category!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            dishDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回封装好的dto数据</span></span><br><span class="line">        <span class="keyword">return</span> dishDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给原本dishDtoPage的records赋值并且携带CategoryName</span></span><br><span class="line">    dishDtoPage.setRecords(list);</span><br><span class="line">    <span class="keyword">return</span> R.success(dishDtoPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改菜品"><a href="#修改菜品" class="headerlink" title="修改菜品"></a>修改菜品</h2><p>操作两张表需要进行事务处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新菜品信息 同时更新菜品的口味信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dishDto</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新dish表信息,菜品基本信息更新</span></span><br><span class="line">    <span class="built_in">this</span>.updateById(dishDto);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新菜品口味信息</span></span><br><span class="line">    <span class="comment">//先清理原来菜品的口味信息---dishFlavor表的delete操作</span></span><br><span class="line">    LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(DishFlavor::getDishId,dishDto.getId());</span><br><span class="line">    dishFlavorService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加当前提交的口味信息---dishFlavor表的insert操作</span></span><br><span class="line">    List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用stream流处理,将菜品口味对应到新建立的菜品id上</span></span><br><span class="line">    flavors = flavors.stream().map((item)-&gt;&#123;</span><br><span class="line">        item.setDishId(dishDto.getId());</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    dishFlavorService.saveBatch(flavors);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除菜品"><a href="#删除菜品" class="headerlink" title="删除菜品"></a>删除菜品</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 逻辑删除</span></span><br><span class="line"><span class="comment">     * 关联到套餐</span></span><br><span class="line"><span class="comment">     * 如果套餐在售卖且含有菜品,则菜品不能够删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">deleteByIdWithFlavor</span><span class="params">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据菜品id在stemeal_dish表中查出哪些套餐包含该菜品</span></span><br><span class="line">        LambdaQueryWrapper&lt;SetmealDish&gt; setmealDishLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        setmealDishLambdaQueryWrapper.in(SetmealDish::getDishId,ids);</span><br><span class="line">        </span><br><span class="line">        List&lt;SetmealDish&gt; SetmealDishList = setmealDishService.list(setmealDishLambdaQueryWrapper);</span><br><span class="line">        <span class="comment">//如果菜品没有关联套餐，直接删除就行 </span></span><br><span class="line">        <span class="keyword">if</span> (SetmealDishList.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//这个deleteByIds中已经做了菜品起售不能删除的判断力</span></span><br><span class="line">            dishService.deleteByIds(ids);</span><br><span class="line">            LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">            queryWrapper.in(DishFlavor::getDishId,ids);</span><br><span class="line">            dishFlavorService.remove(queryWrapper);</span><br><span class="line">            <span class="keyword">return</span> R.success(<span class="string">&quot;菜品删除成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果菜品有关联套餐，并且该套餐正在售卖，那么不能删除</span></span><br><span class="line">        <span class="comment">//得到与删除菜品关联的套餐id</span></span><br><span class="line">        ArrayList&lt;Long&gt; Setmeal_idList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (SetmealDish setmealDish : SetmealDishList) &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">setmealId</span> <span class="operator">=</span> setmealDish.getSetmealId();</span><br><span class="line">            Setmeal_idList.add(setmealId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询出与删除菜品相关联的套餐</span></span><br><span class="line">        LambdaQueryWrapper&lt;Setmeal&gt; setmealLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        setmealLambdaQueryWrapper.in(Setmeal::getId,Setmeal_idList);</span><br><span class="line">        List&lt;Setmeal&gt; setmealList = setmealService.list(setmealLambdaQueryWrapper);</span><br><span class="line">        <span class="comment">//对拿到的所有套餐进行遍历，然后拿到套餐的售卖状态，如果有套餐正在售卖那么删除失败</span></span><br><span class="line">        <span class="keyword">for</span> (Setmeal setmeal : setmealList) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> setmeal.getStatus();</span><br><span class="line">            <span class="keyword">if</span> (status == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> R.error(<span class="string">&quot;删除的菜品中有关联在售套餐,删除失败！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//要删除的菜品关联的套餐没有在售，可以删除</span></span><br><span class="line">        <span class="comment">//这下面的代码并不一定会执行,因为如果前面的for循环中出现status == 1,那么下面的代码就不会再执行</span></span><br><span class="line">        dishService.deleteByIds(ids);</span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.in(DishFlavor::getDishId,ids);</span><br><span class="line">        dishFlavorService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除菜品口味信息</span></span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper1 = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper1.in(DishFlavor::getDishId,ids);</span><br><span class="line">        dishFlavorService.remove(queryWrapper1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;菜品删除成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询菜品有没有在售卖的状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteByIds</span><span class="params">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">    <span class="comment">//构造条件查询器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//先查询该菜品是否在售卖，如果是则抛出业务异常</span></span><br><span class="line">    queryWrapper.in(ids != <span class="literal">null</span>, Dish::getId, ids);</span><br><span class="line">    List&lt;Dish&gt; list = <span class="built_in">this</span>.list(queryWrapper);</span><br><span class="line">    <span class="keyword">for</span> (Dish dish : list) &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> dish.getStatus();</span><br><span class="line">        <span class="comment">//如果不是在售卖,则可以删除</span></span><br><span class="line">        <span class="keyword">if</span> (status == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.removeById(dish.getId());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//此时应该回滚,因为可能前面的删除了，但是后面的是正在售卖</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;删除菜品中有正在售卖菜品,无法全部删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启售停售"><a href="#启售停售" class="headerlink" title="启售停售"></a>启售停售</h2><p>启售停售功能是一个更新操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对菜品批量或者是单个 进行停售或者是起售</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="comment">//这个参数这里一定记得加注解才能获取到参数，否则这里非常容易出问题</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">status</span><span class="params">(<span class="meta">@PathVariable(&quot;status&quot;)</span> Integer status,<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">    <span class="comment">//log.info(&quot;status:&#123;&#125;&quot;,status);</span></span><br><span class="line">    <span class="comment">//log.info(&quot;ids:&#123;&#125;&quot;,ids);</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.in(ids !=<span class="literal">null</span>,Dish::getId,ids);</span><br><span class="line">    <span class="comment">//根据数据进行批量查询</span></span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Dish dish : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dish != <span class="literal">null</span>)&#123;</span><br><span class="line">            dish.setStatus(status);</span><br><span class="line">            dishService.updateById(dish);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;售卖状态修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞吉外卖day3</title>
      <link href="/2022/08/10/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96day3/"/>
      <url>/2022/08/10/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96day3/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA项目实战瑞吉外卖—day3"><a href="#JAVA项目实战瑞吉外卖—day3" class="headerlink" title="JAVA项目实战瑞吉外卖—day3"></a>JAVA项目实战瑞吉外卖—day3</h1><h2 id="公共字段自动填充功能"><a href="#公共字段自动填充功能" class="headerlink" title="公共字段自动填充功能"></a>公共字段自动填充功能</h2><p>Mybatis Plus公共字段自动填充，也就是在插入或者更新的时候位指定字段赋予指定的值，使用它的好处就是对这些字段进行处理，避免重复代码</p><p>这种代码设置为自动填充即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置创建时间为当前</span></span><br><span class="line">employee.setCreateTime(LocalDateTime.now());</span><br><span class="line"><span class="comment">//设置更新时间为当前时间</span></span><br><span class="line">employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line"><span class="comment">//通过当前登录的Session中获得用户id</span></span><br><span class="line"><span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line"><span class="comment">//设置创建人</span></span><br><span class="line">employee.setCreateUser(empId);</span><br><span class="line"><span class="comment">//设置更新人</span></span><br><span class="line">employee.setUpdateUser(empId);</span><br></pre></td></tr></table></figure><p>实现步骤：</p><ul><li>在实体类的属性上加入@TableField注解，指定自动填充的策略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入时,进行自动填充</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入或更新时,进行自动填充</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入时,进行自动填充</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入或更新时,进行自动填充</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Long updateUser;</span><br></pre></td></tr></table></figure><ul><li>按照框架要求编写元数据对象处理器，在此类中统一为公共字段赋值，且此类需要实现MetaObjectHandler接口<ul><li>但是实现该接口无法获得HttpSession，从而无法得到用户的id属性，则填充字段的createUser&#x2F;updateUser暂时设置为死属性</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">metaObject.setValue(<span class="string">&quot;createUser&quot;</span>, <span class="number">1L</span>);</span><br><span class="line">metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, <span class="number">1L</span>);</span><br></pre></td></tr></table></figure><h3 id="功能完善之ThreadLocal线程知识补充"><a href="#功能完善之ThreadLocal线程知识补充" class="headerlink" title="功能完善之ThreadLocal线程知识补充"></a>功能完善之ThreadLocal线程知识补充</h3><p>使用ThreadLocal来根据线程获得之前存储在Session中的用户id，在执行公共字段填充的时候将用户id值进行填充</p><p>在学习ThreadLocal之前，我们需要先确认一个事情，就是客户端发送的每次http请求，对应的在服务端都会分配一个新 的线程来处理，在处理过程中涉及到下面类中的方法都属于相同的一个线程： </p><ul><li>1、LoginCheckFilter的doFilter方法 </li><li>2、EmployeeController的update方法 </li><li>3、MyMetaObjectHandler的updateFill方法</li></ul><p>可以在上面的三个方法中分别加入下面代码（获取当前线程id）： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">log.info(<span class="string">&quot;线程id:&#123;&#125;&quot;</span>,id);</span><br></pre></td></tr></table></figure><p> 执行编辑员工功能进行验证，通过观察控制台输出可以发现， 一次请求对应的线程id是相同的</p><p><img src="/2022/08/10/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96day3/1.png" alt="image-20220809141133245"></p><h4 id="什么是ThreadLocal"><a href="#什么是ThreadLocal" class="headerlink" title="什么是ThreadLocal?"></a>什么是ThreadLocal?</h4><ul><li>ThreadLocal并不是一个Thread，而是Thread的局部变量。当使用ThreadLocal维护变量时，ThreadLocal为每个使用该 变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。 ThreadLocal为每个线程提供单独一份存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，线程外则不 能访问。</li><li>ThreadLocal常用方法：<ul><li>public void set(T value) 设置当前线程的线程局部变量的值 </li><li>public T get( 返回当前线程所对应的线程局部变量的值</li></ul></li><li>以在LoginCheckFilter的doFilter方法中获取当前登录用户id，并调用ThreadLocal的set方法来设置当前线程的线 变量的值（用户id），然后在MyMetaobjectHandler的updateFill方法中调用ThreadLocal的get方法来获得当前 对应的线程局部变量的值（用户id）</li></ul><h3 id="实现步骤：获得同线程存储的数据"><a href="#实现步骤：获得同线程存储的数据" class="headerlink" title="实现步骤：获得同线程存储的数据"></a>实现步骤：获得同线程存储的数据</h3><ul><li>1、编写BaseContext工具类，基于ThreadLocal封装的工具类 </li><li>2、在Login CheckFilter的doFilter方法中调用BaseContex来设置当前登录用户的id </li><li>3、在MyMetaobjectHandler的方法中调用BaseContex获取登灵用户的id</li></ul><h4 id="在拦截器中，同线程下记录用户已登录的id属性值"><a href="#在拦截器中，同线程下记录用户已登录的id属性值" class="headerlink" title="在拦截器中，同线程下记录用户已登录的id属性值"></a>在拦截器中，同线程下记录用户已登录的id属性值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line"><span class="comment">//将登录用户的id值记录到线程块中</span></span><br><span class="line">BaseContext.setCurrentId(empId);</span><br></pre></td></tr></table></figure><h4 id="在设置公共字段填充的时候，调用登录用户的id属性值"><a href="#在设置公共字段填充的时候，调用登录用户的id属性值" class="headerlink" title="在设置公共字段填充的时候，调用登录用户的id属性值"></a>在设置公共字段填充的时候，调用登录用户的id属性值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义元数据处理器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MyMetaObjectHandler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: XD</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022/8/9 13:34</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Blog</span>: null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入操作自动填充</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;公共字段填充[[save]。。。。&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">        log.info(<span class="string">&quot;线程id:&#123;&#125;&quot;</span>,id);</span><br><span class="line"></span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新操作自动填充</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段填充[[update]。。。。&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">        log.info(<span class="string">&quot;线程id:&#123;&#125;&quot;</span>,id);</span><br><span class="line"></span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分类管理业务"><a href="#分类管理业务" class="headerlink" title="分类管理业务"></a>分类管理业务</h2><h3 id="新增分类"><a href="#新增分类" class="headerlink" title="新增分类"></a>新增分类</h3><p>查看前端请求路径，配置对应请求接口即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;category:&#123;&#125;&quot;</span>,category);</span><br><span class="line">    categoryService.save(category);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增分类成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分类信息分页查询"><a href="#分类信息分页查询" class="headerlink" title="分类信息分页查询"></a>分类信息分页查询</h4><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>需要将实体的isDeleted字段注释或者在category表中添加一个isDeleted字段不然会错误sql</p><p>在开发代码之前，需要梳理一下整个程序的执行过程：</p><ul><li>页面发送ajax请求，将分页查询繁数(page. pagesize)提交到服务端 </li><li>服务端Controller接收页面提交的数据并调用Service查询数据 </li><li>Service调用Mapper操作数据库，查询分页数据</li><li>controller将查询到的分页数据响应给页面 </li><li>页面接收到分页数据井通过ElementUI的Table組件展示到页面上</li></ul><p>这根员信息分类一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分特构造器</span></span><br><span class="line">    Page&lt;Category&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;Category&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加排序条件,根据sort排序</span></span><br><span class="line">    queryWrapper.orderByAsc(Category::getSort);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进行分页查询</span></span><br><span class="line">    categoryService.page(pageInfo,queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除分类"><a href="#删除分类" class="headerlink" title="删除分类"></a>删除分类</h3><p>这里老师没有使用restful风格传参，是使用参数传递的方式进行删除</p><h4 id="restful风格删除"><a href="#restful风格删除" class="headerlink" title="restful风格删除"></a>restful风格删除</h4><p>将前端接口的参数注释，拼接一个restful Url进行发送请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除当前列的接口</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">deleCategory</span> = (<span class="params">id</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/category/&#x27;</span>+id,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">    <span class="comment">// params: &#123; id &#125;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后端在路径参数上获得值需要添加注解@PathVariables</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;删除分类id为&#123;&#125;&quot;</span>,id);</span><br><span class="line">    categoryService.removeById(id);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h4><p>直接为传参形式即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;删除分类id为&#123;&#125;&quot;</span>,id);</span><br><span class="line">    categoryService.removeById(id);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="功能完善"><a href="#功能完善" class="headerlink" title="功能完善"></a>功能完善</h3><p>删除分类是判断当前分类是否关联了菜品或者套装，如果有即不能删除</p><h4 id="读取菜品和套餐"><a href="#读取菜品和套餐" class="headerlink" title="读取菜品和套餐"></a>读取菜品和套餐</h4><p>判断菜品和套餐的字段categoryId有没有分类的字段</p><h4 id="配置自定义异常处理类"><a href="#配置自定义异常处理类" class="headerlink" title="配置自定义异常处理类"></a>配置自定义异常处理类</h4><p>将数据库表关联的删除信息都抛出这个异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomException</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置全局异常处理类"><a href="#配置全局异常处理类" class="headerlink" title="配置全局异常处理类"></a>配置全局异常处理类</h4><p>集中处理自定义异常</p><p>返回异常信息给前端页面显示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义异常出来方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler(CustomException.class)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(<span class="meta">@NotNull</span> CustomException ex)</span>&#123;</span><br><span class="line">    log.error(ex.getMessage());</span><br><span class="line">    <span class="keyword">return</span> R.error(ex.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id删除分类,删除之前需要进行判断,当前分类有没有关联菜品或者套装</span></span><br><span class="line"><span class="comment"> * 如果有则不能删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//菜品匹配</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; dishLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加查询条件,根据分类id进行查询</span></span><br><span class="line">    dishLambdaQueryWrapper.eq(Dish::getCategoryId,id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐匹配</span></span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; setmealLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加查询条件,根据分类id进行查询</span></span><br><span class="line">    setmealLambdaQueryWrapper.eq(Setmeal::getCategoryId,id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询出来分类关联的菜品数</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> dishService.count(dishLambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询出来分类关联的套餐数</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">count1</span> <span class="operator">=</span> setmealService.count(setmealLambdaQueryWrapper);</span><br><span class="line">    <span class="comment">//查询当前分类有没有关联菜品</span></span><br><span class="line">    <span class="keyword">if</span> (count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//已关联菜品,无法删除,抛出业务异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;当前分类关联了菜品,不能删除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询当前分类有没有关联套餐</span></span><br><span class="line">    <span class="keyword">if</span> (count1&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//已关联套餐,无法删除,抛出业务异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;当前分类关联了套餐,不能删除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正常删除</span></span><br><span class="line">    <span class="built_in">super</span>.removeById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改分类"><a href="#修改分类" class="headerlink" title="修改分类"></a>修改分类</h3><p>根据前端请求返回对应接口为PutMapping</p><p>在点击修改按钮的时候，实现的数据回显没有查询接口即可实现是因为前端在读取列表数据的时候，进行数据保存，点击修改的时候实际是给模型数据赋值，才能完成数据回显</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;修改分类信息：&#123;&#125;&quot;</span>,category);</span><br><span class="line"></span><br><span class="line">    categoryService.updateById(category);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;修改分类信息成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞吉外卖day2</title>
      <link href="/2022/08/10/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96day2/"/>
      <url>/2022/08/10/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96day2/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA项目实战瑞吉外卖—day2"><a href="#JAVA项目实战瑞吉外卖—day2" class="headerlink" title="JAVA项目实战瑞吉外卖—day2"></a>JAVA项目实战瑞吉外卖—day2</h1><h2 id="新增员工"><a href="#新增员工" class="headerlink" title="新增员工"></a>新增员工</h2><p>执行过程</p><ul><li>页面发生ajax请求，将新增员工页面中输入的数据以json的形式提交到服务器</li><li>服务端Controller接收页面提交的数据并调用Service将数据进行保存</li><li>Service调用Mapper操作数据库，保存数据</li></ul><p>根据前端请求地址为Post没加任何参数，所以只用PostMapping就可以了</p><h3 id="编写新增员工接口"><a href="#编写新增员工接口" class="headerlink" title="编写新增员工接口"></a>编写新增员工接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增员工</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;员工消息:&#123;&#125;&quot;</span>,employee.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置初始密码,但是不能以明文方式存储,需要进行MD5加密</span></span><br><span class="line">    employee.setPassword(DigestUtils.md5DigestAsHex(<span class="string">&quot;123456&quot;</span>.getBytes()));</span><br><span class="line">    <span class="comment">//设置创建时间为当前</span></span><br><span class="line">    employee.setCreateTime(LocalDateTime.now());</span><br><span class="line">    <span class="comment">//设置更新时间为当前时间</span></span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    <span class="comment">//通过当前登录的Session中获得用户id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    <span class="comment">//设置创建人</span></span><br><span class="line">    employee.setCreateUser(empId);</span><br><span class="line">    <span class="comment">//设置更新人</span></span><br><span class="line">    employee.setUpdateUser(empId);</span><br><span class="line">    employeeService.save(employee);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增员工成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在设置当前创建人的时候，因为在Session域中存放的是当前登录用户的id并且是Long类型，需要转换类型且将id写入新创建的员工信息表内</p><h3 id="新增员工逻辑判断"><a href="#新增员工逻辑判断" class="headerlink" title="新增员工逻辑判断"></a>新增员工逻辑判断</h3><p>在新增用户的时候，需要进行账号校验，因为账号是唯一登录信息,进行检验的时候，不能用重复的用户账号，需要抛出异常，但是传统的try catch太过于臃肿，所以写了全局异常处理器，集中处理异常</p><p>部分校验：手机号，身份证号等前端已经校验完成</p><p>@ControllerAdvice(annotations &#x3D; {RestController.class, Controller.class})：指定含有该注解的进行异常捕捉<br>@RestControllerAdvice：只捕捉RestController注解的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice(annotations = &#123;RestController.class, Controller.class&#125;)</span></span><br><span class="line"><span class="comment">//@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SQLIntegrityConstraintViolationException.class</span></span><br><span class="line"><span class="comment">     * 数据库唯一字段重复异常处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException ex)</span>&#123;</span><br><span class="line">        log.error(ex.getMessage());</span><br><span class="line">        <span class="keyword">if</span> (ex.getMessage().contains(<span class="string">&quot;Duplicate entry&quot;</span>))&#123;</span><br><span class="line">            String[] split = ex.getMessage().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> split[<span class="number">2</span>] + <span class="string">&quot;已存在&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> R.error(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="员工信息分页查询"><a href="#员工信息分页查询" class="headerlink" title="员工信息分页查询"></a>员工信息分页查询</h2><p>执行过程</p><ul><li>1、页面发送ajax请求，将分页查询拳数(page pagesize name)捉交到服务端</li><li>2、服务端Controller接收页面提交的数据并调用Service查询数据</li><li>3、Service调用Mapper操作数据库，查询分页数据</li><li>4、 Controller将查询到的分页数据响应给页面</li><li>5、页面接收到分页数据并通过Elementui的Table组件展示到页面上</li></ul><h3 id="编写MyBatisPlus分页插件"><a href="#编写MyBatisPlus分页插件" class="headerlink" title="编写MyBatisPlus分页插件"></a>编写MyBatisPlus分页插件</h3><p>需要使用@Configuration注解指定该类是配置类</p><p>使用@Bean标签将MybatisPlusInterceptor交给spring管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写分页接口"><a href="#编写分页接口" class="headerlink" title="编写分页接口"></a>编写分页接口</h3><p>在页面上展示有条件查询的部分，当数据多的时候，条件查询数也需要分页显示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询</span></span><br><span class="line"><span class="comment"> * 按条件分页查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize,String name)</span>&#123;</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;page = &#123;&#125;,pageSize = &#123;&#125;,name = &#123;&#125;&quot;</span>,page,pageSize,name);</span><br><span class="line">    <span class="comment">//构造分页构造器</span></span><br><span class="line">    <span class="type">Page</span> <span class="variable">pageInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(page,pageSize);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加过滤条件</span></span><br><span class="line">    queryWrapper.like(StringUtils.isNotEmpty(name),Employee::getName,name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加排序条件</span></span><br><span class="line">    queryWrapper.orderByDesc(Employee::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行查询</span></span><br><span class="line">    employeeService.page(pageInfo,queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端接收数据是需要查询出来的的list数组，这里将后台查询数据库的员工数据传递给前端的tableData，这样才能在列表上显示</p><p><img src="/2022/08/10/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96day2/1.png" alt="前端数据接收"></p><p>前端使用的是element-ui的分页组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;pageList&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:page-sizes</span>=<span class="string">&quot;[10, 20, 30, 40]&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:page-size</span>=<span class="string">&quot;pageSize&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">layout</span>=<span class="string">&quot;total, sizes, prev, pager, next, jumper&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:total</span>=<span class="string">&quot;counts&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:current-page.sync</span>=<span class="string">&quot;page&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">size-change</span>=<span class="string">&quot;handleSizeChange&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="启用-x2F-禁用账号"><a href="#启用-x2F-禁用账号" class="headerlink" title="启用&#x2F;禁用账号"></a>启用&#x2F;禁用账号</h2><p>在员工管理列表页面，可以对某个员工账号进行启用或者禁用。账号禁用的员工不能登录系统，启用后的员工可以正常登录。</p><p>需要注意的是，只有管理员(admin用户)可以对其他用户进行启用，禁用操作，普通用户不显示启用和禁用按钮</p><h3 id="设置只有admin用户显示启用-x2F-禁用按钮"><a href="#设置只有admin用户显示启用-x2F-禁用按钮" class="headerlink" title="设置只有admin用户显示启用&#x2F;禁用按钮"></a>设置只有admin用户显示启用&#x2F;禁用按钮</h3><p>钩子函数将当前登录用户的信息赋值给模型数据</p><p>index.html</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>()</span><br><span class="line">    <span class="comment">//获得当前登录员工的账号,并赋值给模型数据user</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">user</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;userInfo&#x27;</span>)).<span class="property">username</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">           <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">class</span>=<span class="string">&quot;delBut non&quot;</span></span></span><br><span class="line"><span class="tag">           @<span class="attr">click</span>=<span class="string">&quot;statusHandle(scope.row)&quot;</span></span></span><br><span class="line"><span class="tag">           &lt;!<span class="attr">--</span>判断是否为<span class="attr">admin</span>用户 <span class="attr">--</span>&gt;</span></span><br><span class="line">v-if=&quot;user === &#x27;admin&#x27;&quot;</span><br><span class="line">&gt;</span><br><span class="line">&#123;&#123; scope.row.status == &#x27;1&#x27; ? &#x27;禁用&#x27; : &#x27;启用&#x27; &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="启用-x2F-禁用账号开发流程"><a href="#启用-x2F-禁用账号开发流程" class="headerlink" title="启用&#x2F;禁用账号开发流程"></a>启用&#x2F;禁用账号开发流程</h3><ul><li>页面发送ajax请求，将参数(id，status)提交到服务端</li><li>的味道Controller接收页面提交的数据并调用Service更新数据</li><li>Service调用Mapper操作数据库</li></ul><h4 id="编写update接口"><a href="#编写update接口" class="headerlink" title="编写update接口"></a>编写update接口</h4><p>因为修改状态信息就是更新信息可以和编辑按钮共用update方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id修改用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(HttpServletRequest request,<span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line">    log.info(employee.toString());</span><br><span class="line"></span><br><span class="line">    <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    employee.setUpdateUser(empId);</span><br><span class="line">    employeeService.updateById(employee);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;修改成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>因为后端给前端返回的id类型为long类型，而js在数字16位之后便会四舍五入，导致id不匹配无法进行精确修改,解决办法</p><h5 id="设置消息转换器"><a href="#设置消息转换器" class="headerlink" title="设置消息转换器"></a>设置消息转换器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩展mvc框架的消息转换器</span></span><br><span class="line"><span class="comment"> * 将java Long date等类型进行格式转换</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> converters</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建消息转换器对象</span></span><br><span class="line">    <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">messageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">    <span class="comment">//设置对象转换器,底层使用Jackson将Java对象转换为Json</span></span><br><span class="line">    messageConverter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line">    <span class="comment">//将上面的消息转换器对象追加到mvc框架的转换器容器集合中</span></span><br><span class="line">    converters.add(<span class="number">0</span>, messageConverter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="！！！！原来将静态文件放在static目录下没有配置静态资源映射"><a href="#！！！！原来将静态文件放在static目录下没有配置静态资源映射" class="headerlink" title="！！！！原来将静态文件放在static目录下没有配置静态资源映射"></a>！！！！原来将静态文件放在static目录下没有配置静态资源映射</h4><p>但是在续写消息转换器的时候，运用到了过滤器所以原本在static能访问的静态资源不能访问，禁用掉资源映射也不行，还是将静态资源放出在resource目录下配置静态资源映射即可访问，原因需要去学习—–todo</p><h2 id="编辑员工信息"><a href="#编辑员工信息" class="headerlink" title="编辑员工信息"></a>编辑员工信息</h2><ul><li>在开发代码之前需要梳理一下操作过程和对应的程序的执行流程：</li><li>1.点击编辑按钮时．页面跳转到add html 并在url中携带参数 [员工id] </li><li>2.在add.htm(页面获取ur中的参数 员工id] </li><li>3.发送ajax请求，请求服务端，周时提交员工id参数 </li><li>4.服务端接收请求，根据员工查询员工信息，将员工信息以jison形式响应给页面 </li><li>5.页面接收服务端响应的json数据， 通过VUE的数据绑定进行员工信息回显 </li><li>6.点击保存按钮．发送司ax请求，将页面中的员工信息以json方式提交给服务蠩 </li><li>7.服务端接收员工信息，并进行处理，完成后给页面响应 </li><li>8.页面接收到服务端响应信息后进行相应处理</li></ul><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><p>在打开新增或者编辑窗口的时候，钩子函数触发去查询有没有id属性，有id属性位编辑页面，根据查询出来的id值，通过根据id查询得到所对应的员工信息，再根据init方法将员工信息赋值给this.ruleForm &#x3D; res.data 进行数据回显，而编辑过后的信息进行提交则是更新操作，和启用&#x2F;禁用账号共同使用update接口，因为参数是实体类，所以能够更新信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">id</span> = <span class="title function_">requestUrlParam</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">actionType</span> = <span class="variable language_">this</span>.<span class="property">id</span> ? <span class="string">&#x27;edit&#x27;</span> : <span class="string">&#x27;add&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">id</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="根据id查询接口"><a href="#根据id查询接口" class="headerlink" title="根据id查询接口"></a>根据id查询接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;根据员工id查询数据.....&quot;</span>);</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeService.getById(id);</span><br><span class="line">    <span class="keyword">if</span> (employee!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> R.success(employee);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;没有查询到员工信息&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="init方法"><a href="#init方法" class="headerlink" title="init方法"></a>init方法</h3><p>通过queryEmployeeById函数来获得id值对应的账号信息将其赋值到 this.ruleForm 进行数据回显</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> init () &#123;</span><br><span class="line">  <span class="title function_">queryEmployeeById</span>(<span class="variable language_">this</span>.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">String</span>(res.<span class="property">code</span>) === <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">ruleForm</span> = res.<span class="property">data</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">sex</span> = res.<span class="property">data</span>.<span class="property">sex</span> === <span class="string">&#x27;0&#x27;</span> ? <span class="string">&#x27;女&#x27;</span> : <span class="string">&#x27;男&#x27;</span></span><br><span class="line">      <span class="comment">// this.ruleForm.password = &#x27;&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="解析get请求地址上的id属性"><a href="#解析get请求地址上的id属性" class="headerlink" title="解析get请求地址上的id属性"></a>解析get请求地址上的id属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取url地址上面的参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">requestUrlParam</span>(<span class="params">argname</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> url = location.<span class="property">href</span></span><br><span class="line">  <span class="comment">//进行?分割已经按&amp;切片 取出id属性值</span></span><br><span class="line">  <span class="keyword">var</span> arrStr = url.<span class="title function_">substring</span>(url.<span class="title function_">indexOf</span>(<span class="string">&quot;?&quot;</span>)+<span class="number">1</span>).<span class="title function_">split</span>(<span class="string">&quot;&amp;&quot;</span>)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;arrStr.<span class="property">length</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">var</span> loc = arrStr[i].<span class="title function_">indexOf</span>(argname+<span class="string">&quot;=&quot;</span>)</span><br><span class="line">      <span class="keyword">if</span>(loc!=-<span class="number">1</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> arrStr[i].<span class="title function_">replace</span>(argname+<span class="string">&quot;=&quot;</span>,<span class="string">&quot;&quot;</span>).<span class="title function_">replace</span>(<span class="string">&quot;?&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞吉外卖day1</title>
      <link href="/2022/08/10/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96day1/"/>
      <url>/2022/08/10/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96day1/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA项目实战瑞吉外卖—day1"><a href="#JAVA项目实战瑞吉外卖—day1" class="headerlink" title="JAVA项目实战瑞吉外卖—day1"></a>JAVA项目实战瑞吉外卖—day1</h1><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p><img src="/2022/08/10/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96day1/1.png" alt="技术概览"></p><h2 id="数据库环境搭建"><a href="#数据库环境搭建" class="headerlink" title="数据库环境搭建"></a>数据库环境搭建</h2><p><img src="/2022/08/10/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96day1/2.png" alt="数据库表"></p><h2 id="导入前端页面资源"><a href="#导入前端页面资源" class="headerlink" title="导入前端页面资源"></a>导入前端页面资源</h2><p>因为创建的是maven初始化项目，没有自带的springboot文件目录，前端页面有些访问被禁止，静态资源的访问方法有两种</p><h2 id="后端开发"><a href="#后端开发" class="headerlink" title="后端开发"></a>后端开发</h2><h3 id="创建SpringMVC静态资源页面访问拦截器"><a href="#创建SpringMVC静态资源页面访问拦截器" class="headerlink" title="创建SpringMVC静态资源页面访问拦截器"></a>创建SpringMVC静态资源页面访问拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置静态资源映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始进行静态资源映射...&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/backend/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/backend/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/front/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/front/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在resource目录下创建static目录"><a href="#在resource目录下创建static目录" class="headerlink" title="在resource目录下创建static目录"></a>在resource目录下创建static目录</h3><p>将静态资源文件放进去，因为springboot框架自动开放static资源访问</p><h3 id="编写springboot通用模板"><a href="#编写springboot通用模板" class="headerlink" title="编写springboot通用模板"></a>编写springboot通用模板</h3><p>MVC三层架构</p><p> <img src="/2022/08/10/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96day1/3.png" alt="目录结构"></p><h3 id="编写通用返回类"><a href="#编写通用返回类" class="headerlink" title="编写通用返回类"></a>编写通用返回类</h3><h4 id="返回一个通用结果类，服务端响应的所有结果最终都是包装成这种类型返回给前端页面"><a href="#返回一个通用结果类，服务端响应的所有结果最终都是包装成这种类型返回给前端页面" class="headerlink" title="返回一个通用结果类，服务端响应的所有结果最终都是包装成这种类型返回给前端页面"></a>返回一个通用结果类，服务端响应的所有结果最终都是包装成这种类型返回给前端页面</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code; <span class="comment">//编码：1成功，0和其它数字为失败</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//错误信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">//数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">//动态数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">success</span><span class="params">(T object)</span> &#123;</span><br><span class="line">        R&lt;T&gt; r = <span class="keyword">new</span> <span class="title class_">R</span>&lt;T&gt;();</span><br><span class="line">        r.data = object;</span><br><span class="line">        r.code = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.msg = msg;</span><br><span class="line">        r.code = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R&lt;T&gt; <span class="title function_">add</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="登录接口编写"><a href="#登录接口编写" class="headerlink" title="登录接口编写"></a>登录接口编写</h3><p>个人认为将业务方法写在service层中更好，controller注解调用更为简便</p><p>写完项目会进行优化——–TODO</p><h4 id="使用MD5加密方式校验密码"><a href="#使用MD5加密方式校验密码" class="headerlink" title="使用MD5加密方式校验密码"></a>使用MD5加密方式校验密码</h4><p>数据库中不能存在明文密码在，使用MD5加密，最好添加盐值混淆密码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.使用MD5加密方式将密码进行加密</span></span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> employee.getPassword();</span><br><span class="line">password = DigestUtils.md5DigestAsHex(password.getBytes());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 盐值  混淆密码  加密</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> <span class="string">&quot;passwordAc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> employee.getPassword();</span><br><span class="line"><span class="comment">//2.对代码进行加密</span></span><br><span class="line"><span class="type">String</span> <span class="variable">newPassword</span> <span class="operator">=</span> DigestUtils.md5DigestAsHex((salt + password).getBytes());</span><br></pre></td></tr></table></figure><p>这样在数据库中混淆密码进行安全保护</p><h4 id="判断用户是否正常-能否进行登录"><a href="#判断用户是否正常-能否进行登录" class="headerlink" title="判断用户是否正常 能否进行登录"></a>判断用户是否正常 能否进行登录</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.根据页面提交的员工名username查询数据库</span></span><br><span class="line">LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper.eq(Employee::getUsername,employee.getUsername());</span><br><span class="line"><span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> employeeService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.如果没有该员工返回登陆失败结果</span></span><br><span class="line"><span class="keyword">if</span> (emp == <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.密码对比,如果密码不一致返回登陆失败结果</span></span><br><span class="line"><span class="keyword">if</span> (!emp.getPassword().equals(password))&#123;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.员工状态,如果为禁用状态,则返回员工以禁用的结果</span></span><br><span class="line"><span class="keyword">if</span> (emp.getStatus() == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;该员工以禁用&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.登录成功,将员工的id存入session并返回登录成功结果</span></span><br><span class="line">request.getSession().setAttribute(<span class="string">&quot;employee&quot;</span>,emp.getId());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> R.success(emp);</span><br></pre></td></tr></table></figure><h3 id="登出接口编写"><a href="#登出接口编写" class="headerlink" title="登出接口编写"></a>登出接口编写</h3><p>根据前端页面返回的请求是POST，所以编写接口也应该未POST</p><p>1.移除用户登录态</p><p>2.跳转到登录页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登出 清除用户登录态</span></span><br><span class="line"><span class="comment"> * 清除保存在session中的员工id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">logout</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    request.getSession().removeAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完善登录接口"><a href="#完善登录接口" class="headerlink" title="完善登录接口"></a>完善登录接口</h3><h4 id="设置登录-SpringMVC-拦截器或者javaweb过滤器"><a href="#设置登录-SpringMVC-拦截器或者javaweb过滤器" class="headerlink" title="设置登录(SpringMVC)拦截器或者javaweb过滤器"></a>设置登录(SpringMVC)拦截器或者javaweb过滤器</h4><p>这里使用的是过滤器记得在启动类入口添加@ServletComponentScan注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReggieApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ReggieApplication.class,args);</span><br><span class="line">        log.info(<span class="string">&quot;项目启动成功......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>未登录无法查看管理窗口页面，需要跳转到登录页面</p><h4 id="后端过滤器"><a href="#后端过滤器" class="headerlink" title="后端过滤器"></a>后端过滤器</h4><p><img src="/2022/08/10/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96day1/4.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(filterName = &quot;LoginCheckFilter&quot;, urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//路径比较资源类 路径匹配器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">PATH_MATCHER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获得本次请求的URI</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置不需要登录即可访问的地址</span></span><br><span class="line">        String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/front/**&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.检查本次请求是否需要放行</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">check</span> <span class="operator">=</span> check(urls, requestURI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.如果不需要出来直接放行</span></span><br><span class="line">        <span class="keyword">if</span> (check) &#123;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.判断登录状态，如果已登录，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>)!=<span class="literal">null</span>)&#123;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.如果是未登录的状态则返回未登录的结果,通过输出流的方式向客户端页面响应数据</span></span><br><span class="line">        response.getWriter().write(JSON.toJSONString(R.error(<span class="string">&quot;NOTLOGIN&quot;</span>)));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路径匹配，是否需要放行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> urls</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestURI</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String[] urls, String requestURI)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String url : urls) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> PATH_MATCHER.match(url, requestURI);</span><br><span class="line">            <span class="keyword">if</span> (match) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里通过后端进行页面路径访问判断，从而得出哪些路径需要进行拦截，在根据前端的拦截器实现拦截页面跳转到登录界面，根据前后端传输数据”NOTLOGIN”来响应页面跳转</p><h4 id="前端拦截器"><a href="#前端拦截器" class="headerlink" title="前端拦截器"></a>前端拦截器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> === <span class="number">0</span> &amp;&amp; res.<span class="property">data</span>.<span class="property">msg</span> === <span class="string">&#x27;NOTLOGIN&#x27;</span>) &#123;<span class="comment">// 返回登录页面</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---/backend/page/login/login.html---&#x27;</span>)</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;userInfo&#x27;</span>)</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">top</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;/backend/page/login/login.html&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>这里的路径匹配器我理解不了</p><p>&#x2F;**是允许访问目录及子目录下的所有文件，意思为放行，放行还怎么拦截</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//路径比较资源类 路径匹配器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">PATH_MATCHER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity</title>
      <link href="/2022/07/27/SpringSecurity/"/>
      <url>/2022/07/27/SpringSecurity/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h1><p><a href="https://spring.io/projects/spring-security">Spring Security (spring.io)</a></p><h2 id="Spring-Security核心功能"><a href="#Spring-Security核心功能" class="headerlink" title="Spring Security核心功能"></a>Spring Security核心功能</h2><p>关于安全方面的两个主要区域是认证和授权（或者访问控制），这两点也是Spring Security核心功能</p><ul><li>用户认证：验证某个用户是否为系统中的合法主体，也就是说用户能否访问该系统。用户认证一般要求用户提供用户名和密码。系统通过校验用户名和密码来完成认证过程。</li><li>用户授权：验证谋而用户是否有权限执行某一操作。在一个系统中，不同用户所具有的权限是不同的。</li></ul><h3 id="SpringSecurity特点"><a href="#SpringSecurity特点" class="headerlink" title="SpringSecurity特点"></a>SpringSecurity特点</h3><ul><li><p>和Spring无缝整合。</p></li><li><p>全面的权限控制。</p></li><li><p>专门为Web开发而设计。</p><ul><li><p>旧版本不能脱离Web环境使用。</p></li><li><p>新版本对整个框架进行了分层抽取，分成了核心模块和Web模块。单独引入核心模块就可以脱离Web环境。</p></li></ul></li><li><p>重量级。</p></li></ul><h3 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h3><p>Apache旗下的轻量级权限控制框架。<br>特点：</p><ul><li>轻量级。Shiro主张的理念是把复杂的事情变简单。针对对性能有更高要求的互联网应用有更好表现。</li><li>通用性。</li><li>好处：不局限于Web环境，可以脱离Web环境使用。</li><li>缺陷：在Web环境下一些特定的需求需要手动编写代码定制。</li></ul><h3 id="和Shiro的区别"><a href="#和Shiro的区别" class="headerlink" title="和Shiro的区别"></a>和Shiro的区别</h3><p>Shiro - 轻量级</p><p>SpringSecurity - 重量级</p><p>相对于 Shiro，在 SSM 中整合 Spring Security 都是比较麻烦的操作，所以，Spring Security 虽然功能比 Shiro 强大，但是使用反而没有 Shiro 多（Shiro 虽然功能没有 Spring Security 多，但是对于大部分项目而言，Shiro 也够用了）。</p><p>自从有了 Spring Boot 之后，Spring Boot 对于 Spring Security 提供了自动化配置方案，可以使用更少的配置来使用 Spring Security。 因此，一般来说，常见的安全管理技术栈的组合是这样的：</p><ul><li><p>SSM + Shiro</p></li><li><p>Spring Boot&#x2F;Spring Cloud + Spring Security</p><p>以上只是一个推荐的组合而已，如果单纯从技术上来说，无论怎么组合，都是可以运行的</p></li></ul><h3 id="测试security"><a href="#测试security" class="headerlink" title="测试security"></a>测试security</h3><h4 id="导入对应security坐标和web坐标"><a href="#导入对应security坐标和web坐标" class="headerlink" title="导入对应security坐标和web坐标"></a>导入对应security坐标和web坐标</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="编写controller类"><a href="#编写controller类" class="headerlink" title="编写controller类"></a>编写controller类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello security&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h4><p>设置端口为8080</p><p>启动springboot项目访问页面链接会进入到security的拦截界面不能直接访问hello</p><p><img src="/2022/07/27/SpringSecurity/1.png" alt="登录拦截"></p><h4 id="需要进行登录"><a href="#需要进行登录" class="headerlink" title="需要进行登录"></a>需要进行登录</h4><p>默认的用户名：user<br>密码在项目启动的时候在控制台会打印，注意每次启动的时候密码都回发生变化！</p><p>登录完成才能访问到对应的信息</p><h2 id="SpringSecurity-基本原理"><a href="#SpringSecurity-基本原理" class="headerlink" title="SpringSecurity 基本原理"></a>SpringSecurity 基本原理</h2><p>SpringSecurity 本质是一个过滤器链：</p><p>在启动springboot项目的时候可以看见一整条过滤器链(每个过滤器按顺序执行完成后才能正常启动)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter</span><br><span class="line">        org.springframework.security.web.context.SecurityContextPersistenceFilter</span><br><span class="line">        org.springframework.security.web.header.HeaderWriterFilter</span><br><span class="line">        org.springframework.security.web.csrf.CsrfFilter</span><br><span class="line">        org.springframework.security.web.authentication.logout.LogoutFilter</span><br><span class="line">        org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter</span><br><span class="line">        org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter</span><br><span class="line">        org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter</span><br><span class="line">        org.springframework.security.web.savedrequest.RequestCacheAwareFilter</span><br><span class="line">        org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter</span><br><span class="line">        org.springframework.security.web.authentication.AnonymousAuthenticationFilter</span><br><span class="line">        org.springframework.security.web.session.SessionManagementFilter</span><br><span class="line">        org.springframework.security.web.access.ExceptionTranslationFilter</span><br><span class="line">        org.springframework.security.web.access.intercept.FilterSecurityInterceptor</span><br></pre></td></tr></table></figure><h3 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h3><p><a href="https://blog.csdn.net/xinzhifu1/article/details/106356958?ops_request_misc=%7B%22request_id%22:%22165882126916780366526577%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165882126916780366526577&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-106356958-null-null.142%5Ev34%5Edown_rank,185%5Ev2%5Econtrol&utm_term=%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8%E7%9A%84%E5%8C%BA%E5%88%AB&spm=1018.2226.3001.4187">过滤器 和 拦截器的 6个区别，别再傻傻分不清了_程序员小富的博客-CSDN博客_过滤器和拦截器</a></p><p><a href="https://blog.csdn.net/qq_42924666/article/details/109563400?ops_request_misc=%7B%22request_id%22:%22165882126916780366526577%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165882126916780366526577&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-109563400-null-null.142%5Ev34%5Edown_rank,185%5Ev2%5Econtrol&utm_term=%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8%E7%9A%84%E5%8C%BA%E5%88%AB&spm=1018.2226.3001.4187"> 过滤器和拦截器的区别_至今没搞明白的博客-CSDN博客_过滤器和拦截器的区别</a></p><p>过滤器(Filter)和拦截器(Interceptor)</p><p>Spring 的拦截器与 Servlet 的Filter 有相似之处，比如二者都是 AOP编程思想的体现， 都能实现权限检查、日志记录等。不同的是： </p><ul><li>使用范围不同：Filter 是 Servlet 规范规定的，只能用于 Web 程序中。而拦截器既 可以用于 web程序，也可以用于 Application、Swing 程序中。 </li><li>口 规范不同：Filter 是在 Servlet 规范中定义的，是Serviet 容器支持的。而拦截器是 在 Spring 容器内的，是 Spring 框架支特的。</li><li>使用的资源不同：同其他的代码块一样，拦截器也是一个Spring 的组件，归 Spring 管理，配置在 Spring 文件中，因此能使用 Spring 里的任何资源、对象，例如 Sersice 对象、数据源、事务管理等，通过1oC 注入到拦截器即可：而Filter 则不能。 </li><li>深度不同：Filter 在只在 Servlet 前后起作用。而拦截器能够深入到方法前后、异常 抛出前后等，因此拦我器的使用具有更大的弹性。所以在 Spring 构架的程序中， 要优先使用拦截器.</li></ul><p><strong>1、实现原理不同</strong><br>过滤器和<a href="https://so.csdn.net/so/search?q=%E6%8B%A6%E6%88%AA%E5%99%A8&spm=1001.2101.3001.7020">拦截器</a> 底层实现方式大不相同，过滤器 是基于函数回调的，拦截器 则是基于Java的反射机制（动态代理）实现的。<br><strong>2、使用范围不同</strong><br>我们看到过滤器 实现的是 javax.<a href="https://so.csdn.net/so/search?q=servlet&spm=1001.2101.3001.7020">servlet</a>.Filter 接口，而这个接口是在Servlet规范中定义的，也就是说过滤器Filter 的使用要依赖于Tomcat等容器，导致它只能在web程序中使用。<br>而拦截器(Interceptor) 它是一个Spring组件，并由Spring容器管理，并不依赖Tomcat等容器，是可以单独使用的。不仅能应用在web程序中，也可以用于Application、Swing等程序中。<br><strong>3、触发时机不同</strong><br>过滤器Filter是在请求进入容器后，但在进入servlet之前进行预处理，请求结束是在servlet处理完以后。</p><p>拦截器 Interceptor 是在请求进入servlet后，在进入Controller之前进行预处理的，Controller 中渲染了对应的视图之后请求结束。<br><strong>4、拦截的请求范围不同</strong><br>过滤器Filter执行了两次，拦截器Interceptor只执行了一次。这是因为过滤器几乎可以对所有进入容器的请求起作用，而拦截器只会对Controller中请求或访问static目录下的资源请求起作用。<br><strong>5、注入Bean情况不同</strong><br>这是因为加载顺序导致的问题，拦截器加载的时间点在springcontext之前，而Bean又是由spring进行管理。<br><strong>6、控制执行顺序不同</strong><br>过滤器用@Order注解控制执行顺序，通过@Order控制过滤器的级别，值越小级别越高越先执行。<br>拦截器默认的执行顺序，就是它的注册顺序，也可以通过Order手动设置控制，值越小越先执行</p><h3 id="三个重要的过滤器"><a href="#三个重要的过滤器" class="headerlink" title="三个重要的过滤器"></a>三个重要的过滤器</h3><ul><li>FilterSecurityInterceptor：是一个方法级的权限过滤器, 基本位于过滤链的最底部。</li></ul><p><img src="/2022/07/27/SpringSecurity/2.png" alt="拦截器"></p><p>super.beforeInvocation(fi) 表示查看之前的filter 是否通过。<br>fi.getChain().doFilter(fi.getRequest(), fi.getResponse());表示真正的调用后台的服务</p><ul><li><p>ExceptionTranslationFilter：是个异常过滤器，用来处理在认证授权过程中抛出的异常</p><p><img src="/2022/07/27/SpringSecurity/3.png" alt="拦截器"></p></li><li><p>UsernamePasswordAuthenticationFilter ：对&#x2F;login的POST请求做拦截，校验表单中用户名，密码。</p></li></ul><p><img src="/2022/07/27/SpringSecurity/5.png" alt="拦截器"></p><h3 id="两个重要接口"><a href="#两个重要接口" class="headerlink" title="两个重要接口"></a>两个重要接口</h3><h4 id="UserDetailsService接口讲解"><a href="#UserDetailsService接口讲解" class="headerlink" title="UserDetailsService接口讲解"></a>UserDetailsService接口讲解</h4><p>当什么也没有配置的时候，账号和密码是由Spring Security定义生成的。而在实际项目中账号和密码都是从数据库中查询出来的。 所以我们要通过自定义逻辑控制认证逻辑。</p><p>继承接口实现从数据库匹配用户账号密码</p><p>如果需要自定义逻辑时，只需要实现UserDetailsService接口即可</p><p>返回值是UserDetail</p><p>这个类是系统默认的用户“主体” ：包含了用户在数据库字段的各种信息</p><h4 id="PasswordEncoder-接口讲解"><a href="#PasswordEncoder-接口讲解" class="headerlink" title="PasswordEncoder 接口讲解"></a>PasswordEncoder 接口讲解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示把参数按照特定的解析规则进行解析 </span></span><br><span class="line">String <span class="title function_">encode</span><span class="params">(CharSequence rawPassword)</span>; </span><br><span class="line"><span class="comment">// 表示验证从存储中获取的编码密码与编码后提交的原始密码是否匹配。如果密码匹配，则返回true；如果不匹配，则返回false。第一个参数表示需要被解析的密码。第二个参数表示存储的密码。 </span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(CharSequence rawPassword, String encodedPassword)</span>; </span><br><span class="line"><span class="comment">// 表示如果解析的密码能够再次进行解析且达到更安全的结果则返回true，否则返回false。默认返回false。 </span></span><br><span class="line"><span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">upgradeEncoding</span><span class="params">(String encodedPassword)</span> &#123; </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="web权限方案"><a href="#web权限方案" class="headerlink" title="web权限方案"></a>web权限方案</h2><ul><li>认证</li><li>授权</li></ul><h3 id="设置登录的用户名和密码"><a href="#设置登录的用户名和密码" class="headerlink" title="设置登录的用户名和密码"></a>设置登录的用户名和密码</h3><h4 id="1-通过配置application文件"><a href="#1-通过配置application文件" class="headerlink" title="1.通过配置application文件"></a>1.通过配置application文件</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.security.user.name</span>=<span class="string">02</span></span><br><span class="line"><span class="attr">spring.security.user.password</span>=<span class="string">nian0209</span></span><br></pre></td></tr></table></figure><p>使用配置的账号密码可以登录</p><h4 id="2-通过配置类"><a href="#2-通过配置类" class="headerlink" title="2.通过配置类"></a>2.通过配置类</h4><ul><li>直接创建BCryptPasswordEncoder对象在访问的时候会出现对象匹配不上的问题报错无法访问</li><li>有两种解决办法<ul><li>第一种：返回一个PasswordEncoder对象将其注入到spring容器中</li><li>修改代码：auth.inMemoryAuthentication().passwordEncoder(passwordEncoder).withUser(“02”).password(password).roles(“admin”);</li></ul></li></ul><p>在Spring Security5.7版本中将弃用WebSecurityConfigurerAdapter接口类</p><p><a href="https://blog.csdn.net/weixin_50711803/article/details/125692999?ops_request_misc=%7B%22request_id%22:%22165882869816780366567976%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165882869816780366567976&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-125692999-null-null.142%5Ev34%5Edown_rank,185%5Ev2%5Econtrol&utm_term=WebSecurityConfigurerAdapter%E4%BD%95%E6%97%B6%E8%A2%AB%E5%BC%83%E7%94%A8&spm=1018.2226.3001.4187"> Spring Security 弃用WebSecurityConfigurerAdapter_鲨雕东西的博客-CSDN博客</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    PasswordEncoder <span class="title function_">password</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">BCryptPasswordEncoder</span> <span class="variable">passwordEncoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">        <span class="comment">//将密码进行加密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> passwordEncoder.encode(<span class="string">&quot;nian0209&quot;</span>);</span><br><span class="line">        <span class="comment">//将用户信息设置到内存中去</span></span><br><span class="line">        auth.inMemoryAuthentication().withUser(<span class="string">&quot;02&quot;</span>).password(password).roles(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line"><span class="comment">//  第二种      auth.inMemoryAuthentication().passwordEncoder(passwordEncoder).withUser(&quot;02&quot;).password(password).roles(&quot;admin&quot;);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-自定义编写实现类—–继承UserDetailsService"><a href="#3-自定义编写实现类—–继承UserDetailsService" class="headerlink" title="3.自定义编写实现类—–继承UserDetailsService"></a>3.自定义编写实现类—–继承UserDetailsService</h4><p> 这里并没有连接数据库测试，没有对应的用户账号密码匹配，只是模拟了用户登录，而且只有密码匹配规则，所以在登录的时候，只要密码输入正确即可登录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;UserDetailsService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUserDetailService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">//借助AuthorityUtils职责工具类生成角色</span></span><br><span class="line">        List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;role&quot;</span>);</span><br><span class="line">        <span class="comment">//返回一个对象信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;02&quot;</span>,<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;nian0209&quot;</span>),auths);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfigTest</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    PasswordEncoder <span class="title function_">password</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//设置自己写的实现类并设置密码编码</span></span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(password());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置数据库访问"><a href="#配置数据库访问" class="headerlink" title="配置数据库访问"></a>配置数据库访问</h3><h4 id="配置数据库访问相关坐标"><a href="#配置数据库访问相关坐标" class="headerlink" title="配置数据库访问相关坐标"></a>配置数据库访问相关坐标</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="comment">#mysql数据库连接</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">?</span></span><br></pre></td></tr></table></figure><h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Users</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mapper接口"><a href="#mapper接口" class="headerlink" title="mapper接口"></a>mapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Users&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;UserDetailsService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUserDetailService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据用户名这个参数来进行条件判断,匹配对应的账户信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用userMapper,根据用户名查询数据库</span></span><br><span class="line">        QueryWrapper&lt;Users&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//where username = ?</span></span><br><span class="line">        wrapper.eq(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> userMapper.selectOne(wrapper);</span><br><span class="line">        <span class="comment">//判断数据库理有没有这个用户</span></span><br><span class="line">        <span class="keyword">if</span> (users == <span class="literal">null</span>)&#123; <span class="comment">//没有这个用户，认证失败</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名不存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//借助AuthorityUtils职责工具类生成角色</span></span><br><span class="line">        List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;role&quot;</span>);</span><br><span class="line">        <span class="comment">//从数据库查询的结果来返回user对象,得到对应的用户名和密码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(users.getUsername(),<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(users.getPassword()),auths);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承WebSecurityConfigurerAdapter类重写configure方法实现"><a href="#继承WebSecurityConfigurerAdapter类重写configure方法实现" class="headerlink" title="继承WebSecurityConfigurerAdapter类重写configure方法实现"></a>继承WebSecurityConfigurerAdapter类重写configure方法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfigTest</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    PasswordEncoder <span class="title function_">password</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 身份认证接口</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//设置自己写的实现类并设置密码编码</span></span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(password());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BCryptPasswordEncoder是Spring Security官方推荐的密码解析器，平时多使用这个解析器。<br>BCryptPasswordEncoder是对bcrypt强散列方法的具体实现。是基于Hash算法实现的单向加密。可以通过strength控制加密强度，默认10.</p><h3 id="设置自定义页面"><a href="#设置自定义页面" class="headerlink" title="设置自定义页面"></a>设置自定义页面</h3><h4 id="编写自定义页面连接方法"><a href="#编写自定义页面连接方法" class="headerlink" title="编写自定义页面连接方法"></a>编写自定义页面连接方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfigTest</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    PasswordEncoder <span class="title function_">password</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//设置自己写的实现类并设置密码编码</span></span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(password());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用HttpSecurity参数,来选择自定义的登录页面设置</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//自定义自己编写的登录页面</span></span><br><span class="line">        http.formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;/login.html&quot;</span>) <span class="comment">//登录页面设置</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)  <span class="comment">//登录访问路径</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>).permitAll()  <span class="comment">//登录成功之后跳转的路径</span></span><br><span class="line">                .and().authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/test/hello&quot;</span>,<span class="string">&quot;/user/login&quot;</span>).permitAll()  <span class="comment">//设置哪些路径可以直接访问</span></span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and().csrf().disable(); <span class="comment">//关闭csrf防护</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写登录页面"><a href="#编写登录页面" class="headerlink" title="编写登录页面"></a>编写登录页面</h4><p>用户名和密码的name必须和实体类中定义的一样</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user/login&quot;</span>  <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="基于角色或权限进行访问控制"><a href="#基于角色或权限进行访问控制" class="headerlink" title="基于角色或权限进行访问控制"></a>基于角色或权限进行访问控制</h3><h4 id="hasAuthority-方法"><a href="#hasAuthority-方法" class="headerlink" title="hasAuthority 方法"></a>hasAuthority 方法</h4><p>如果当前的主体具有指定的权限，则返回 true,否则返回false</p><h5 id="在配置类中设置有哪些权限可以访问当前访问地址"><a href="#在配置类中设置有哪些权限可以访问当前访问地址" class="headerlink" title="在配置类中设置有哪些权限可以访问当前访问地址"></a>在配置类中设置有哪些权限可以访问当前访问地址</h5><p>.antMatchers(“&#x2F;test&#x2F;index”).hasAnyAuthority(“admins”)&#x2F;&#x2F;设置权限为admins才问&#x2F;test&#x2F;index</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用HttpSecurity参数,来选择自定义的登录页面设置</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//自定义自己编写的登录页面</span></span><br><span class="line">    http.formLogin()</span><br><span class="line">            .loginPage(<span class="string">&quot;/login.html&quot;</span>) <span class="comment">//登录页面设置</span></span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)  <span class="comment">//登录访问路径</span></span><br><span class="line">            .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>).permitAll()  <span class="comment">//登录成功之后跳转的路径</span></span><br><span class="line">            .and().authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/test/hello&quot;</span>,<span class="string">&quot;/user/login&quot;</span>).permitAll()  <span class="comment">//设置哪些路径可以直接访问</span></span><br><span class="line">            .antMatchers(<span class="string">&quot;/test/index&quot;</span>).hasAuthority(<span class="string">&quot;admins&quot;</span>)<span class="comment">//设置权限为admins才问/test/index</span></span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and().csrf().disable(); <span class="comment">//关闭csrf防护</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="在UserDetailService，把返回User对象设置权限"><a href="#在UserDetailService，把返回User对象设置权限" class="headerlink" title="在UserDetailService，把返回User对象设置权限"></a>在UserDetailService，把返回User对象设置权限</h5><p>AuthorityUtils.commaSeparatedStringToAuthorityList(“admins”)设置权限角色为：admins</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//借助AuthorityUtils职责工具类将返回的用户设置角色</span></span><br><span class="line">List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;admins&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="hasAnyAuthority方法"><a href="#hasAnyAuthority方法" class="headerlink" title="hasAnyAuthority方法"></a>hasAnyAuthority方法</h4><p>如果当前的主体有任何提供的角色（给定的作为一个逗号分隔的字符串列表）的话，返回true.</p><p>一个用户拥有两个角色且其中一个角色能访问这个地址,就可以访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用HttpSecurity参数,来选择自定义的登录页面设置</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//自定义自己编写的登录页面</span></span><br><span class="line">    http.formLogin()</span><br><span class="line">            .loginPage(<span class="string">&quot;/login.html&quot;</span>) <span class="comment">//登录页面设置</span></span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)  <span class="comment">//登录访问路径</span></span><br><span class="line">            .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>).permitAll()  <span class="comment">//登录成功之后跳转的路径</span></span><br><span class="line">            .and().authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/test/hello&quot;</span>,<span class="string">&quot;/user/login&quot;</span>).permitAll()  <span class="comment">//设置哪些路径可以直接访问</span></span><br><span class="line">            <span class="comment">//设置拥有权限manager,admins其中一个就能问/test/index</span></span><br><span class="line">            .antMatchers(<span class="string">&quot;/test/index&quot;</span>).hasAnyAuthority(<span class="string">&quot;admins&quot;</span>,<span class="string">&quot;manager&quot;</span>)</span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and().csrf().disable(); <span class="comment">//关闭csrf防护</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="hasRole-方法"><a href="#hasRole-方法" class="headerlink" title="hasRole 方法"></a>hasRole 方法</h4><p>如果用户具备给定角色就允许访问,否则出现403。<br>如果当前主体具有指定的角色，则返回true。</p><p>给用户设置多个角色</p><p>设置角色名前带ROLE_前缀</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置权限和角色</span></span><br><span class="line">List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;admins,ROLE_sale&quot;</span>);</span><br></pre></td></tr></table></figure><p>设置访问权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//自定义自己编写的登录页面</span></span><br><span class="line">    http.formLogin()</span><br><span class="line">            .loginPage(<span class="string">&quot;/login.html&quot;</span>) <span class="comment">//登录页面设置</span></span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)  <span class="comment">//登录访问路径</span></span><br><span class="line">            .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>).permitAll()  <span class="comment">//登录成功之后跳转的路径</span></span><br><span class="line">            .and().authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/test/hello&quot;</span>,<span class="string">&quot;/user/login&quot;</span>).permitAll()  <span class="comment">//设置哪些路径可以直接访问</span></span><br><span class="line">            .antMatchers(<span class="string">&quot;/test/index&quot;</span>).hasRole(<span class="string">&quot;admins&quot;</span>)<span class="comment">//用户具备admins角色才能访问</span></span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and().csrf().disable(); <span class="comment">//关闭csrf防护</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="hasAnyRole"><a href="#hasAnyRole" class="headerlink" title="hasAnyRole"></a>hasAnyRole</h4><p>表示用户具备任何一个条件都可以访问。</p><h5 id="设置可访问的角色"><a href="#设置可访问的角色" class="headerlink" title="设置可访问的角色"></a>设置可访问的角色</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用HttpSecurity参数,来选择自定义的登录页面设置</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//自定义自己编写的登录页面</span></span><br><span class="line">    http.formLogin()</span><br><span class="line">            .loginPage(<span class="string">&quot;/login.html&quot;</span>) <span class="comment">//登录页面设置</span></span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)  <span class="comment">//登录访问路径</span></span><br><span class="line">            .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>).permitAll()  <span class="comment">//登录成功之后跳转的路径</span></span><br><span class="line">            .and().authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/test/hello&quot;</span>,<span class="string">&quot;/user/login&quot;</span>).permitAll()  <span class="comment">//设置哪些路径可以直接访问</span></span><br><span class="line">            <span class="comment">//.antMatchers(&quot;/test/index&quot;).hasAuthority(&quot;admins&quot;)//设置权限为admins才问/test/index</span></span><br><span class="line">            <span class="comment">//设置拥有权限manager,admins其中一个就能问/test/index</span></span><br><span class="line">            <span class="comment">//.antMatchers(&quot;/test/index&quot;).hasAnyAuthority(&quot;admins&quot;,&quot;manager&quot;)</span></span><br><span class="line">            <span class="comment">//.antMatchers(&quot;/test/index&quot;).hasRole(&quot;admins&quot;)//用户具备admins角色才能访问</span></span><br><span class="line">            <span class="comment">//用户具备&quot;admins&quot;,&quot;role&quot;两个角色其中一个就可以访问</span></span><br><span class="line">            .antMatchers(<span class="string">&quot;/test/index&quot;</span>).hasAnyRole(<span class="string">&quot;admins&quot;</span>,<span class="string">&quot;role&quot;</span>)</span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and().csrf().disable(); <span class="comment">//关闭csrf防护</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="用户service"><a href="#用户service" class="headerlink" title="用户service"></a>用户service</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;UserDetailsService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUserDetailService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用userMapper,根据用户名查询数据库</span></span><br><span class="line">        QueryWrapper&lt;Users&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//where username = ?</span></span><br><span class="line">        wrapper.eq(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> userMapper.selectOne(wrapper);</span><br><span class="line">        <span class="comment">//判断数据库理有没有这个用户</span></span><br><span class="line">        <span class="keyword">if</span> (users == <span class="literal">null</span>)&#123; <span class="comment">//没有这个用户，认证失败</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名不存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//借助AuthorityUtils职责工具类将返回的用户设置角色</span></span><br><span class="line">        List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;admins,ROLE_sale&quot;</span>);</span><br><span class="line">        <span class="comment">//从数据库查询的结果来返回user对象,得到对应的用户名和密码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(users.getUsername(),<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(users.getPassword()),auths);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义403没有权限访问页面"><a href="#自定义403没有权限访问页面" class="headerlink" title="自定义403没有权限访问页面"></a>自定义403没有权限访问页面</h3><p>需要有对应的页面</p><p>403是因为角色没有对应权限访问该页面所以出403错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置403没有权限访问的页面</span></span><br><span class="line">http.exceptionHandling().accessDeniedPage(<span class="string">&quot;/unauth.html&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="注解的使用"><a href="#注解的使用" class="headerlink" title="注解的使用"></a>注解的使用</h2><p>hasRole（role）    用户拥有指定的角色权限时返回true<br>hasAnyRole（[role1，role2]）    用户拥有任意一个指定的角色权限时返回true<br>hasAuthority（authority）    用户拥有指定的权限时返回true<br>hasAnyAuthority（[authority1,authority2]）    用户拥有任意一个指定的权限时返回true</p><h3 id="Secured"><a href="#Secured" class="headerlink" title="@Secured"></a>@Secured</h3><ul><li><p>@Secured(“ROLE_VIEWER”) 表示只有拥有ROLE_VIEWER角色的用户，才能够访问getUsername()方法。</p></li><li><p>@Secured({ “ROLE_DBA”, “ROLE_ADMIN” }) 表示用户拥有”ROLE_DBA”, “ROLE_ADMIN” 两个角色中的任意一个角色，均可访问</p></li></ul><p>判断是否具有角色，另外需要注意的是这里匹配的字符串需要添加前缀“ROLE_“。<br>使用注解先要开启注解功能！</p><h4 id="在启动类或者配置类上添加启动注解开发的注解"><a href="#在启动类或者配置类上添加启动注解开发的注解" class="headerlink" title="在启动类或者配置类上添加启动注解开发的注解"></a>在启动类或者配置类上添加启动注解开发的注解</h4><p>@EnableGlobalMethodSecurity(securedEnabled&#x3D;true)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableGlobalMethodSecurity(securedEnabled=true)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringsecurityApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringsecurityApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在controller层使用注解开发"><a href="#在controller层使用注解开发" class="headerlink" title="在controller层使用注解开发"></a>在controller层使用注解开发</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;update&quot;)</span></span><br><span class="line"><span class="meta">@Secured(&#123;&quot;ROLE_sale&quot;,&quot;manager&quot;&#125;)</span>     <span class="comment">//@Secured(&#123;&quot;ROLE_sale&quot;,&quot;manager&quot;&#125;) //用户具有&quot;ROLE_sale&quot;角色,或&quot;manager&quot;的权限其中之一才能访问</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello update&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在userServiceDetail中设置用户角色"><a href="#在userServiceDetail中设置用户角色" class="headerlink" title="在userServiceDetail中设置用户角色"></a>在userServiceDetail中设置用户角色</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//借助AuthorityUtils职责工具类将返回的用户设置角色sale 权限admins</span></span><br><span class="line">List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;admins,ROLE_sale&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="PreAuthorize"><a href="#PreAuthorize" class="headerlink" title="@PreAuthorize"></a>@PreAuthorize</h3><p>@PreAuthorize：注解适合<strong>进入方法前</strong>的权限验证， </p><p>@PreAuthorize可以将登录用户的roles&#x2F;permissions参数传到方法中。</p><h4 id="先开启注解功能：-EnableGlobalMethodSecurity-prePostEnabled-x3D-true"><a href="#先开启注解功能：-EnableGlobalMethodSecurity-prePostEnabled-x3D-true" class="headerlink" title="先开启注解功能： @EnableGlobalMethodSecurity(prePostEnabled &#x3D; true)"></a>先开启注解功能： @EnableGlobalMethodSecurity(prePostEnabled &#x3D; true)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableGlobalMethodSecurity(securedEnabled=true,prePostEnabled = true)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringsecurityApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringsecurityApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在controller层使用注解开发-1"><a href="#在controller层使用注解开发-1" class="headerlink" title="在controller层使用注解开发"></a>在controller层使用注解开发</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;update&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;admins&#x27;)&quot;)</span> <span class="comment">//用户具备admins权限才能访问</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello update&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PostAuthorize"><a href="#PostAuthorize" class="headerlink" title="@PostAuthorize"></a>@PostAuthorize</h3><p>先开启注解功能： @EnableGlobalMethodSecurity(prePostEnabled &#x3D; true) </p><p>和@PreAuthorize的开启注解一样,使用也类似</p><p>@PostAuthorize 注解使用并不多，在<strong>方法执行后</strong>再进行权限验证，适合验证带有返回值的权限.</p><p>方法执行完毕再进行校验</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;update&quot;)</span></span><br><span class="line"><span class="meta">@PostAuthorize(&quot;hasAnyAuthority(&#x27;menu:system&#x27;)&quot;)</span> <span class="comment">//访问web页面,执行完update方法之后，再进行校验 控制台会打印update.... 但是没有menu:system权限，无法访问</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;update.....&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello update&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PostFilter"><a href="#PostFilter" class="headerlink" title="@PostFilter"></a>@PostFilter</h3><p>对返回的数据进行过滤</p><p>@PostFilter ：权限验证之后对数据进行过滤 留下用户名是admin1的数据<br>表达式中的 filterObject 引用的是方法返回值List中的某一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;getAll&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;admins&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@PostFilter(&quot;filterObject.username == &#x27;admin1&#x27;&quot;)</span> <span class="comment">//过滤掉username不对于admin1</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Users&gt; <span class="title function_">getAllUser</span><span class="params">()</span> &#123;</span><br><span class="line">    ArrayList&lt;Users&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Users</span>(<span class="number">12</span>,<span class="string">&quot;admin1&quot;</span>,<span class="string">&quot;1111&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Users</span>(<span class="number">22</span>, <span class="string">&quot;admin2&quot;</span>, <span class="string">&quot;888&quot;</span>));</span><br><span class="line">    System.out.println(list); </span><br><span class="line">    <span class="keyword">return</span> list;<span class="comment">//return的是admin1的信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PreFilter"><a href="#PreFilter" class="headerlink" title="@PreFilter"></a>@PreFilter</h3><p>@PreFilter: <strong>进入控制器之前</strong>对数据进行过滤</p><p>将id能整除二的保留,其他过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;getTestPreFilter&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ROLE_管理员&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@PreFilter(value = &quot;filterObject.id%2==0&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;UserInfo&gt; <span class="title function_">getTestPreFilter</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;UserInfo&gt; list)</span> &#123;</span><br><span class="line">    list.forEach(t -&gt; &#123;</span><br><span class="line">        System.out.println(t.getId() + <span class="string">&quot;\t&quot;</span> + t.getUsername());</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用户注销"><a href="#用户注销" class="headerlink" title="用户注销"></a>用户注销</h3><p>登录成功后跳转到success页面，在用户登录的情况下，可以访问该用户对应角色后权限能访问的页面，退出登录后，无法访问之前需要相应权限或角色的页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//使用HttpSecurity参数,来选择自定义的登录页面设置</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户注销</span></span><br><span class="line">        http.logout().logoutUrl(<span class="string">&quot;/logout&quot;</span>).logoutSuccessUrl(<span class="string">&quot;/test/hello&quot;</span>).permitAll();</span><br><span class="line">        <span class="comment">//设置403没有权限访问的页面</span></span><br><span class="line">        http.exceptionHandling().accessDeniedPage(<span class="string">&quot;/unauth.html&quot;</span>);</span><br><span class="line">        <span class="comment">//自定义自己编写的登录页面</span></span><br><span class="line">        http.formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;/login.html&quot;</span>) <span class="comment">//登录页面设置</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)  <span class="comment">//登录访问路径</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">&quot;/success.html&quot;</span>).permitAll()  <span class="comment">//登录成功之后跳转的路径</span></span><br><span class="line">                .and().authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;/test/hello&quot;</span>, <span class="string">&quot;/user/login&quot;</span>).permitAll()  <span class="comment">//设置哪些路径可以直接访问</span></span><br><span class="line">                <span class="comment">//.antMatchers(&quot;/test/index&quot;).hasAuthority(&quot;admins&quot;)//设置权限为admins才问/test/index</span></span><br><span class="line">                <span class="comment">//设置拥有权限manager,admins其中一个就能问/test/index</span></span><br><span class="line">                <span class="comment">//.antMatchers(&quot;/test/index&quot;).hasAnyAuthority(&quot;admins&quot;,&quot;manager&quot;)</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/test/index&quot;</span>).hasRole(<span class="string">&quot;sale&quot;</span>)<span class="comment">//用户具备sale角色才能访问</span></span><br><span class="line">                <span class="comment">//用户具备&quot;admins&quot;,&quot;role&quot;两个角色其中一个就可以访问</span></span><br><span class="line"><span class="comment">//                .antMatchers(&quot;/test/index&quot;).hasAnyRole(&quot;admins&quot;,&quot;role&quot;)</span></span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and().csrf().disable(); <span class="comment">//关闭csrf防护</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于安全登录的数据库记住我"><a href="#基于安全登录的数据库记住我" class="headerlink" title="基于安全登录的数据库记住我"></a>基于安全登录的数据库记住我</h2><p><img src="/2022/07/27/SpringSecurity/7.png" alt="验证过程"></p><h3 id="设置登录页面"><a href="#设置登录页面" class="headerlink" title="设置登录页面"></a>设置登录页面</h3><p>记住我的name标签必须为：remember-me</p><p>设置记住我复选框选项</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user/login&quot;</span>  <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember-me&quot;</span>&gt;</span>自动登录</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfigTest</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入数据源</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PersistentTokenRepository <span class="title function_">persistentTokenRepository</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//使用jdbc模板操作数据库生成的token</span></span><br><span class="line">        <span class="type">JdbcTokenRepositoryImpl</span> <span class="variable">jdbcTokenRepository</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTokenRepositoryImpl</span>();</span><br><span class="line">        <span class="comment">// 赋值数据源</span></span><br><span class="line">        jdbcTokenRepository.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">// 自动创建表,第一次执行会创建，以后要执行就要删除掉！</span></span><br><span class="line">        <span class="comment">// 自己建表就不要打开</span></span><br><span class="line"><span class="comment">//        jdbcTokenRepository.setCreateTableOnStartup(true);</span></span><br><span class="line">        <span class="keyword">return</span> jdbcTokenRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    PasswordEncoder <span class="title function_">password</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//设置自己写的实现类并设置密码编码</span></span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(password());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用HttpSecurity参数,来选择自定义的登录页面设置</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户注销</span></span><br><span class="line">        http.logout().logoutUrl(<span class="string">&quot;/logout&quot;</span>).logoutSuccessUrl(<span class="string">&quot;/test/hello&quot;</span>).permitAll();</span><br><span class="line">        <span class="comment">//设置403没有权限访问的页面</span></span><br><span class="line">        http.exceptionHandling().accessDeniedPage(<span class="string">&quot;/unauth.html&quot;</span>);</span><br><span class="line">        <span class="comment">//自定义自己编写的登录页面</span></span><br><span class="line">        http.formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;/login.html&quot;</span>) <span class="comment">//登录页面设置</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)  <span class="comment">//登录访问路径</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">&quot;/success.html&quot;</span>).permitAll()  <span class="comment">//登录成功之后跳转的路径</span></span><br><span class="line">                .and().authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;/test/hello&quot;</span>, <span class="string">&quot;/user/login&quot;</span>).permitAll()  <span class="comment">//设置哪些路径可以直接访问</span></span><br><span class="line">                <span class="comment">//.antMatchers(&quot;/test/index&quot;).hasAuthority(&quot;admins&quot;)//设置权限为admins才问/test/index</span></span><br><span class="line">                <span class="comment">//设置拥有权限manager,admins其中一个就能问/test/index</span></span><br><span class="line">                <span class="comment">//.antMatchers(&quot;/test/index&quot;).hasAnyAuthority(&quot;admins&quot;,&quot;manager&quot;)</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/test/index&quot;</span>).hasRole(<span class="string">&quot;sale&quot;</span>)<span class="comment">//用户具备sale角色才能访问</span></span><br><span class="line">                <span class="comment">//用户具备&quot;admins&quot;,&quot;role&quot;两个角色其中一个就可以访问</span></span><br><span class="line"><span class="comment">//                .antMatchers(&quot;/test/index&quot;).hasAnyRole(&quot;admins&quot;,&quot;role&quot;)</span></span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and().rememberMe().tokenRepository(persistentTokenRepository())<span class="comment">//设置记住我</span></span><br><span class="line">                .tokenValiditySeconds(<span class="number">60</span>)<span class="comment">//设置token存活时间 单位秒</span></span><br><span class="line">                .userDetailsService(userDetailsService)<span class="comment">//设置服务类</span></span><br><span class="line">                .and().csrf().disable(); <span class="comment">//关闭csrf防护</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟跨网站脚本（XSS）相比，XSS利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。 跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去运行。这利用了web中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。 从Spring Security 4.0开始，默认情况下会启用CSRF保护，以防止CSRF攻击应用程序，Spring Security CSRF会针对PATCH，POST，PUT和DELETE方法进行防护</p><h3 id="预防CSRF跨站攻击"><a href="#预防CSRF跨站攻击" class="headerlink" title="预防CSRF跨站攻击"></a>预防CSRF跨站攻击</h3><p>不够明白</p><p><a href="https://docs.microsoft.com/zh-cn/aspnet/web-api/overview/security/preventing-cross-site-request-forgery-csrf-attacks">防止 ASP.NET MVC 中的跨站点请求伪造 (CSRF) 攻击 | Microsoft Docs</a></p><p>在登录页面添加一个隐藏域：</p><p> &lt;input type&#x3D;”hidden”th:if&#x3D;”${_csrf}!&#x3D;null”th:value&#x3D;”${_csrf.token}”name&#x3D;”_csrf”&#x2F;&gt;<br>关闭安全配置的类中的csrf &#x2F;&#x2F; http.csrf().disable();</p><h2 id="微服务权限授权"><a href="#微服务权限授权" class="headerlink" title="微服务权限授权"></a>微服务权限授权</h2><p>待更~</p><p>等待springcloud</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springsecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git精通</title>
      <link href="/2022/07/23/Git%E7%B2%BE%E9%80%9A/"/>
      <url>/2022/07/23/Git%E7%B2%BE%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="Git精通-—-git分布式版本控制工具"><a href="#Git精通-—-git分布式版本控制工具" class="headerlink" title="Git精通 — git分布式版本控制工具"></a>Git精通 — git分布式版本控制工具</h1><p><a href="https://zhuanlan.zhihu.com/p/30044692">Git使用教程,最详细，最傻瓜，最浅显，真正手把手教 - 知乎 (zhihu.com)</a></p><p><strong>查看了黑马的markdown笔记已经博主塞班呢的笔记并借助了相关图片</strong></p><p><a href="https://blog.csdn.net/a18307096730/article/details/124586216?spm=1001.2014.3001.5502"> Git（分布式版本控制工具）_塞班呢的博客-CSDN博客_git是什么工具</a></p><h2 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h2><p>在官网下载并安装git工具 </p><p>Git Gui:Git提供的图形界面更具</p><p>Git Bash:Git提供的命令行工具</p><p>在用户目录下新建文件.bashrc配置git相关内容</p><hr><p>用于输出git提交日志</p><p>alias git-log&#x3D;’git log –pretty&#x3D;oneline –all –graph –abbrev-commit’</p><p>用于输出当前目录所有文件寄基本信息</p><p>alias ll&#x3D;’ls -al’</p><hr><h3 id="git工作流程"><a href="#git工作流程" class="headerlink" title="git工作流程"></a>git工作流程</h3><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/1.png" alt="git工作流程"></p><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><ol><li>clone（克隆）: 从远程仓库中克隆代码到本地仓库</li><li>checkout （检出）:从本地仓库中检出一个仓库分支然后进行修订</li><li>add（添加）: 在提交前先将代码提交到暂存区</li><li>commit（提交）: 提交到本地仓库。本地仓库中保存修改的各个历史版本</li><li>fetch (抓取) ： 从远程库，抓取到本地仓库，不进行任何的合并动作，一般操作比较少。</li><li>pull (拉取) ： 从远程库拉到本地库，自动进行合并(merge)，然后放到到工作区，相当于fetch+merge</li><li>push（推送） : 修改完成后，需要和团队成员共享代码时，将代码推送到远程仓库</li></ol><h3 id="首先配置全局"><a href="#首先配置全局" class="headerlink" title="首先配置全局"></a>首先配置全局</h3><ol><li>打开Git Bash</li><li>设置用户信息</li></ol><ul><li><p>git config –global user.name “itcast”</p></li><li><p>git config –global user.email “<a href="mailto:&#x68;&#x65;&#x6c;&#108;&#111;&#x40;&#105;&#x74;&#99;&#97;&#x73;&#x74;&#x2e;&#99;&#x6e;">&#x68;&#x65;&#x6c;&#108;&#111;&#x40;&#105;&#x74;&#99;&#97;&#x73;&#x74;&#x2e;&#99;&#x6e;</a>”</p></li></ul><p>设置自己的全局信息</p><h2 id="配置本地仓库"><a href="#配置本地仓库" class="headerlink" title="配置本地仓库"></a>配置本地仓库</h2><p>要使用Git对我们的代码进行版本控制，首先需要获得本地仓库</p><p>1）在电脑的任意位置创建一个空目录（例如test）作为我们的本地Git仓库</p><p>2）进入这个目录中，点击右键打开Git bash窗口</p><p>3）执行命令git init</p><p>4）如果创建成功后可在文件夹下看到隐藏的.git目录。</p><p>本人在用户目录下创建了git_repository目录 在文件夹内git bash执行git仓库初始化 会产生一个.git文件夹代表初始化成功</p><h3 id="基础操作指令"><a href="#基础操作指令" class="headerlink" title="基础操作指令"></a>基础操作指令</h3><p>git工作目录下对文件的修改(增加，删除，更新)会存在几个状态，这些修改的状态会随着我们执行Git的命令二发生变化</p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/2.png" alt="git工作目录"></p><h4 id="状态之间的变换"><a href="#状态之间的变换" class="headerlink" title="状态之间的变换"></a>状态之间的变换</h4><ul><li>git add   (工作区  –&gt;  暂存区)</li><li>git commit  (暂存区 –&gt;本地仓库)</li></ul><h4 id="查看修改的状态"><a href="#查看修改的状态" class="headerlink" title="查看修改的状态"></a>查看修改的状态</h4><ul><li>git status</li></ul><h4 id="添加工作区到暂存区"><a href="#添加工作区到暂存区" class="headerlink" title="添加工作区到暂存区"></a>添加工作区到暂存区</h4><p>将多个文件或一个文件转移至暂存区</p><ul><li>git add .    —–&gt;后面跟点就是将所有文件专业至暂存区</li><li>git add filename  ——&gt;跟文件名称 就是将单个文件转移至暂存区</li></ul><h4 id="提交暂存区至本地仓库"><a href="#提交暂存区至本地仓库" class="headerlink" title="提交暂存区至本地仓库"></a>提交暂存区至本地仓库</h4><p>提交暂存区内容到本地仓库的当前分支 <strong>重点</strong></p><ul><li>git commit -m ‘注释内容’ &#x2F;&#x2F; 注释内容要写</li></ul><h4 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a>查看提交日志</h4><p>在之前的githome(git的按照位置)配置了git-log的参数 后续还可以添加</p><p>命名形式：git log [option]</p><ul><li>options<ul><li>–all 显示所有分支</li><li>–pretty&#x3D;oneline 将提交信息显示为一行</li><li>–abbrev-commit  使得输出的commitId更简洁</li><li>–graph  以图的形式显示</li></ul></li></ul><h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><p>切换版本</p><ul><li><p>git reset –hard commitID</p><ul><li>commitID 可以使用 git log 指令查看</li></ul></li><li><p>如何查看已经删除的记录</p><ul><li>git reflog</li><li>可以查看到已经删除的提交记录</li></ul></li></ul><h4 id="将文件夹添加至忽略列表"><a href="#将文件夹添加至忽略列表" class="headerlink" title="将文件夹添加至忽略列表"></a>将文件夹添加至忽略列表</h4><p>创建.gitignore文件 在文件里写入希望被忽略的文件结尾名</p><p>例如:</p><ul><li>txt，cv文件后缀需要被忽略<ul><li>则在.gitignore文件中添加 ✳*.txt，✳*.cv文件</li></ul></li><li>最后进行 git add.</li><li>git commit -m ‘忽略xt，cv文件’</li></ul><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><p>在操作分支的时候，重点是提交：<strong>必须写清楚注释 git commit -m ‘注释内容’</strong> </p><ul><li><p>查看分支：git branch</p></li><li><p>创建分支：git branch 分支名</p></li><li><p>切换分支：git checkout 分支名</p><ul><li>创建并切换分支：git checkout -b 分支名</li></ul></li><li><p>合并分支：git merge 分支名称</p><ul><li>将分支(分支名称)合并到当前分支上 一般是其他分支合并到master分支上</li></ul></li><li><p>删除分支</p><ul><li>不能删除当前分支，只能删除其他分支</li><li>git btanch -d b1 删除分支时，需要进行各种检查</li><li>git branch -D b1 不做任何检查，强制删除</li></ul></li><li><p>解决冲突</p><ul><li>当两个分支上对文件的修改可能会存在冲突，列如同时修改了同一个文件的同一行，这是就需要手动解决冲突，解决步骤如下：<ul><li>处理文件中的冲突的地方</li><li>将解决完成冲突的文件加入暂存区(add)</li><li>提交到仓库(commit)</li></ul></li></ul><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/3.png" alt="解决冲突"></p></li></ul><h4 id="开发中分支的使用原则和流程"><a href="#开发中分支的使用原则和流程" class="headerlink" title="开发中分支的使用原则和流程"></a>开发中分支的使用原则和流程</h4><p>几乎所有的版本控制系统都以某种形式支持分支，使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的bug修改，开发新的功能，以免影响开发主线</p><p>在开发中，一般有如下分支使用原则与流程</p><ul><li>master（生产） 分支 线上分支，主分支，中小规模项目作为线上运行的应用对应的分支; </li><li>develop(开发）分支 是从master创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线要求，都可 以在此版本进行开发，阶段开发完成后，需要是合并到master分支,准备上线。</li><li>feature&#x2F;xxxx分支 从develop创建的分支， 一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完成后合并到 develop分支。</li><li>hotfix&#x2F;xxxx分支 从master派生的分支，一股作为线上bug修复使用，修复完成后需要合并到master、test. develop分支 。</li><li>还有一些其他分支，在此不再详述，例如test分支（用于代码测试）、pre分支（预上线分支）等等</li></ul><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/4.png" alt="分支流程"></p><h2 id="配置远程仓库"><a href="#配置远程仓库" class="headerlink" title="配置远程仓库"></a>配置远程仓库</h2><h3 id="注册gitee"><a href="#注册gitee" class="headerlink" title="注册gitee"></a>注册gitee</h3><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/5.png" alt="注册"></p><h3 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h3><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/6.png" alt="创建仓库"></p><h3 id="仓库创建完成后显示仓库地址"><a href="#仓库创建完成后显示仓库地址" class="headerlink" title="仓库创建完成后显示仓库地址"></a>仓库创建完成后显示仓库地址</h3><p>如图</p><p><strong><u>必须选择ssh</u></strong></p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/7.png" alt="ssh地址"></p><h3 id="配置SSH密钥"><a href="#配置SSH密钥" class="headerlink" title="配置SSH密钥"></a>配置SSH密钥</h3><ul><li>生成SSH公钥<ul><li>ssh-keygen -t rsa</li><li>不断回车<ul><li>如果公钥已经存在，则自动覆盖</li></ul></li></ul></li><li>Gitee设置账户共公钥<ul><li>获取公钥<ul><li>cat ~&#x2F;.ssh&#x2F;id_rsa.pub</li></ul></li></ul></li></ul><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/8.png" alt="配置ssh密钥"></p><ul><li>验证是否配置成功<ul><li>ssh -T <a href="mailto:&#x67;&#105;&#116;&#x40;&#x67;&#105;&#x74;&#x65;&#x65;&#46;&#x63;&#111;&#109;">&#x67;&#105;&#116;&#x40;&#x67;&#105;&#x74;&#x65;&#x65;&#46;&#x63;&#111;&#109;</a></li></ul></li></ul><h3 id="操作远程仓库"><a href="#操作远程仓库" class="headerlink" title="操作远程仓库"></a>操作远程仓库</h3><h4 id="此操作是先初始化本地库，然后与已创建的远程库进行对接。"><a href="#此操作是先初始化本地库，然后与已创建的远程库进行对接。" class="headerlink" title="此操作是先初始化本地库，然后与已创建的远程库进行对接。"></a><strong>此操作是先初始化本地库，然后与已创建的远程库进行对接</strong>。</h4><p>我们要将本地仓库和远程仓库连接起来，一般一个本地仓库对应一个远程仓库远侧，远程仓库默认名为origin</p><ul><li><p>命令： git remote add &lt;远端名称&gt; &lt;仓库路径SSH&gt; ssh在创建仓库的时候有</p><ul><li>远端名称，默认是origin，取决于远端服务器设置</li><li>仓库路径，从远端服务器获取此SSH，</li></ul></li><li><p>例如: git remote add origin <a href="mailto:&#x67;&#105;&#x74;&#x40;&#x67;&#x69;&#116;&#x65;&#101;&#46;&#x63;&#x6f;&#109;">&#x67;&#105;&#x74;&#x40;&#x67;&#x69;&#116;&#x65;&#101;&#46;&#x63;&#x6f;&#109;</a>:czbk_zhang_meng&#x2F;git_test.git</p></li></ul><h4 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h4><p>命令：git remote</p><h4 id="将本地代码推送到远程仓库"><a href="#将本地代码推送到远程仓库" class="headerlink" title="将本地代码推送到远程仓库"></a>将本地代码推送到远程仓库</h4><ul><li><p>命令：git push [-f] [–set-upstream] [远端名称 [本地分支名][:远端分支名] ]</p><ul><li><p>如果远程分支名和本地分支名称相同，则可以只写本地分支</p><p>本来是：git push origin master ：master 表示将本地仓库的master分支提交到远程仓库的master分支</p><ul><li>git push origin master 这里表示将本地仓库当前master分支的内容推到远程仓库上面去</li></ul></li><li><p>-f 表示强制覆盖</p></li><li><p>–set-upstream 推送到远端的同时并且建立起和远端分支的关联关系。</p><ul><li>git push –set-upstream origin master</li></ul></li><li><p>如果<strong>当前分支已经和远端分支关联</strong>，则可以省略分支名和远端名。</p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/9.png" alt="img"></p><ul><li>git push 将master分支推送到已关联的远端分支。</li></ul></li><li><p>[-f] 表示强制覆盖远程仓库的内容</p></li></ul></li></ul><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/10.png" alt="img"></p><p>查询远程仓库</p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/11.png" alt="img"></p><h4 id="本地分支与远程分支的关联关系"><a href="#本地分支与远程分支的关联关系" class="headerlink" title="本地分支与远程分支的关联关系"></a>本地分支与远程分支的关联关系</h4><ul><li>查看关联关系我们可以使用 git branch -vv 命令</li><li>查看分支更加详细的信息</li></ul><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/12.png" alt="分支联系"></p><h4 id="远程仓库克隆"><a href="#远程仓库克隆" class="headerlink" title="远程仓库克隆"></a>远程仓库克隆</h4><p>如果已经有一个远端仓库，我们可以直接clone到本地。</p><ul><li>命令: git clone &lt;仓库路径&gt; [本地目录]<ul><li>本地目录可以省略，会自动生成一个目录，就是SSH后面那部分</li></ul></li></ul><h4 id="从远程仓库中抓取和拉取"><a href="#从远程仓库中抓取和拉取" class="headerlink" title="从远程仓库中抓取和拉取"></a>从远程仓库中抓取和拉取</h4><p><strong>远程分支和本地的分支一样</strong>，我们可以进行merge操作，只是需要先<strong>把远端仓库里的更新都下载到本地</strong>，再进行操作。</p><ul><li>抓取 命令：git fetch [remote name] [branch name]<ul><li><strong>抓取指令就是将仓库里的更新都抓取到本地，不会进行合并</strong>，不合并本地仓库就是没有更新，此时还没有拿到远程仓库的内容，合并后才会拿到更新的内容</li><li>如果不指定远端名称和分支名，则抓取所有分支。</li></ul></li><li>拉取 命令：<strong>git pull [remote name] [branch name]</strong><ul><li><strong>拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于fetch+merge</strong></li><li>如果不指定远端名称和分支名，则抓取所有并更新当前分支。</li></ul></li></ul><p>git pull更加方便 直接拉取远程仓库的更新且合并到本地</p><ol><li>在test01这个本地仓库进行一次提交并推送到远程仓库</li></ol><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/13.png" alt="推送到远程仓库"></p><ol><li>在另一个仓库将远程提交的代码拉取到本地仓库</li></ol><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/14.png" alt="拉取到本地"></p><p>读取远程仓库，git pull之后将更新的内容拉取并更新之后在本地仓库</p><h4 id="解决合并冲突"><a href="#解决合并冲突" class="headerlink" title="解决合并冲突"></a>解决合并冲突</h4><p><strong>我们要更新远程仓库的资源时，先要获取此时远程仓库的资源后，在合并到自己的master分支中，然后再上传到远程仓库上</strong></p><p>在一段时间，A、B用户修改了同一个文件，且修改了同一行位置的代码，此时会发生合并冲突。</p><p>A用户在本地修改代码后优先推送到远程仓库，此时B用户在本地修订代码，提交到本地仓库后，也需要</p><p>推送到远程仓库，此时B用户晚于A用户，<strong>故需要先拉取远程仓库的提交，经过合并后才能推送到远端分</strong></p><p><strong>支</strong>,如下图所示。</p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/15.png" alt="img"></p><p>在B用户拉取代码时，因为A、B用户同一段时间修改了同一个文件的相同位置代码，故会发生合并冲</p><p>突。</p><p><strong>就是b在更新一个资源之前，有一个a在b之前率先改掉了这个资源，此时就会出现分支冲突的问题，git不知道是要取a修改的值，还是b修改的值，此时就要我们手动去对应文件里去修改，到底要保留哪一个</strong></p><p><strong>远程分支也是分支，所以合并时冲突的解决方式也和解决本地分支冲突相同相同</strong></p><p><a href="https://blog.csdn.net/zhucheng1994/article/details/123256315">Git问题：2.拉取远程仓库代码，合并时出现冲突，合并失败_怦然心动CC的博客-CSDN博客_git本地和远程仓库代码冲突合并</a></p><h2 id="IDEA配置GIT"><a href="#IDEA配置GIT" class="headerlink" title="IDEA配置GIT"></a>IDEA配置GIT</h2><p>在idea设置中找到git 配置git.exe文件路径测试是否正常</p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/16.png" alt="git配置"></p><h4 id="创建远程仓库-1"><a href="#创建远程仓库-1" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h4><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/17.png" alt="img"></p><h4 id="初始化本地仓库（将当前项目初始化为仓库）"><a href="#初始化本地仓库（将当前项目初始化为仓库）" class="headerlink" title="初始化本地仓库（将当前项目初始化为仓库）"></a>初始化本地仓库（将当前项目初始化为仓库）</h4><p><strong>在idea中创建文件的时候，它会询问你是否要将文件添加到git中，修改文件的时候，idea会自动帮我们去add，我们只需要去commit就好了</strong></p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/18.png" alt="img"></p><p>此时我们的项目目录就变成了一个本地仓库</p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/19.png" alt="img"></p><p>绿色的文件代表已添加到git中</p><p>爆红的文件没有被添加到git当中，被Git识别为冲突文件</p><p>灰色的文件代表已忽略的文件，可以在gitignore文件中配置</p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/20.png" alt="img"></p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/21.png" alt="分支"></p><p>这里只是我们的本地仓库</p><h4 id="设置远程仓库"><a href="#设置远程仓库" class="headerlink" title="设置远程仓库"></a>设置远程仓库</h4><p>在发现git也可以共享数据到github和gitee格式差不多 需要在idea上登录github账号</p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/22.png" alt="github共享"></p><h4 id="推送到远程仓库可选"><a href="#推送到远程仓库可选" class="headerlink" title="推送到远程仓库可选"></a>推送到远程仓库可选</h4><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/23.png" alt="切换远程仓库"></p><p>远程仓库名默认为origin 为gitee的仓库<br><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/24.png" alt="img"></p><h4 id="提交到本地仓库"><a href="#提交到本地仓库" class="headerlink" title="提交到本地仓库"></a>提交到本地仓库</h4><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/25.png" alt="img"></p><h4 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h4><p>在将本地仓库的修改推送到git远程仓库的时候，我们要先pull，先拿到此时远程仓库的版本信息，再去此版本信息上修改</p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/26.png" alt="img"></p><h4 id="克隆远程仓库到本地"><a href="#克隆远程仓库到本地" class="headerlink" title="克隆远程仓库到本地"></a>克隆远程仓库到本地</h4><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/27.png" alt="img"></p><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/28.png" alt="查看分支"><br><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/29.png" alt="img"></p><p>可以看到本地仓库的分支和远程仓库的分支</p><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><p>方式一：<br><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/30.png" alt="创建分支1"></p><p>方式二：（推荐）</p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/31.png" alt="创建分支2"></p><p>这种方式还可以看到分支所在的版本信息</p><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/32.png" alt="合并分支"></p><p>这个标签表示是当前分支</p><p>我们到想要合并的分支上面，右键<br><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/33.png" alt="img"></p><h4 id="IDEA常用GIT操作入口"><a href="#IDEA常用GIT操作入口" class="headerlink" title="IDEA常用GIT操作入口"></a>IDEA常用GIT操作入口</h4><ol><li>第一张图上的快捷入口可以基本满足开发的需求。<br><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/34.png" alt="img"></li><li>第二张图是更多在IDEA操作git的入口。<br><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/35.png" alt="img"></li></ol><h2 id="gitee-直接github项目"><a href="#gitee-直接github项目" class="headerlink" title="gitee 直接github项目"></a>gitee 直接github项目</h2><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/36.png" alt="点击导入"></p><p>选择从github导入</p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/37.png" alt="选择从github导入"></p><p>或者使用https协议输入github仓库连接导入github仓库</p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/38.png" alt="使用https协议"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li><strong>切换分支前先提交本地的修改</strong></li><li>代码及时提交，提交过了就不会丢</li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL基础篇</title>
      <link href="/2022/07/21/MYSQL%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2022/07/21/MYSQL%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><h2 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h2><ul><li>数据库：存储数据的仓库，数据是有组织的进行存储</li><li>数据库管理系统：操纵和管理数据库的大型软件</li><li>SQL：操作关系型数据库的编程语言，定义了一套操作关系型数据库统一<strong>标准</strong></li></ul><h2 id="MYSQL数据库"><a href="#MYSQL数据库" class="headerlink" title="MYSQL数据库"></a>MYSQL数据库</h2><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><p>概念：建立在关系模型基础上，由多张相互连接的二维表组成的数据库</p><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ul><li>使用表存储数据，格式统一，便于维护</li><li>使用SQL语言操作，标准统一，使用方便</li></ul><h4 id="SQL的通用语法"><a href="#SQL的通用语法" class="headerlink" title="SQL的通用语法"></a>SQL的通用语法</h4><ul><li>SOL语句可以单行或多行书写，以分号结民。 </li><li>SOL语句可以使用空格&#x2F;縮进来增强语句的可读性。 </li><li>MySOL数据库的SOL语句不区分大小写，关链宇建议使用大写。</li><li>注释： 单行注释：–注释内容 或＃注释内容(MySOL特有) 多行注释：&#x2F;* 注释内容容*&#x2F;，</li></ul><h3 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h3><p>DDL(Data Defintion Language):数据定义语言，用来定义数据库对象(数据库，表，字段)</p><p>DML(Data Manipulation Language):数据操作语言，用来对数据库表中的数据进行增删改</p><p>DQL((Data Query Language):数据查询语言，用来查询数据库中表的记录</p><p>DCL(Data Control Language):数据控制语言，用来创建数据库账户，控制数据库的访问权限</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>一段可以直接被另一段程序调用的程序或代码</p><p><a href="https://www.php.cn/faq/464781.html">数据库函数有哪些-常见问题-PHP中文网</a></p><h4 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h4><p><img src="/2022/07/21/MYSQL%E5%9F%BA%E7%A1%80%E7%AF%87/6.png" alt="字符串函数"></p><h4 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h4><p><img src="/2022/07/21/MYSQL%E5%9F%BA%E7%A1%80%E7%AF%87/5.png" alt="数值函数"></p><h4 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h4><p><img src="/2022/07/21/MYSQL%E5%9F%BA%E7%A1%80%E7%AF%87/4.png" alt="日期函数"></p><h4 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h4><p>流程函数也是很常用的一类函数，可以在SQL语句中实现条件筛选从而提高语句的效率</p><p><img src="/2022/07/21/MYSQL%E5%9F%BA%E7%A1%80%E7%AF%87/3.png" alt="流程函数"></p><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><p>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据</p><p>目的：保证数据库中数据的正确，有效性和完整性</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li>非空约束：限制该字段的数据不能为null    关键字：NOT NULL</li><li>唯一约束：保证该字段的所有数据都是唯一，不重复的     关键字：UNIQUE</li><li>主键约束：主键是一行数据的唯一标识，要求非空且唯一   关键字：PRIMARY KEY</li><li>默认约束：保存数据时，如果未指定该字段的值，则采用默认值   关键字：DEFAULT</li><li>检查约束：保证字段值满足某一个条件   关键字：CHECK</li><li>外键约束：用来让两张表的数据之间建立连接，保证数据的一致性和完整性   关键字：FOREOGN KEY</li></ul><h4 id="外键约束的删除-x2F-更新行为"><a href="#外键约束的删除-x2F-更新行为" class="headerlink" title="外键约束的删除&#x2F;更新行为"></a>外键约束的删除&#x2F;更新行为</h4><p>NO ACTION：当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新。(与RESTRICT一致)</p><p>RESTRICT：当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新。(与NO ACTION一致)</p><p>CASCADE：当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除&#x2F;更新外键在子表中的记录。</p><p>SET NULL：当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为NULL(这要求外键允许取null)</p><p>SET DEFAULT：父表变更时，子表将外键列设置成一个默认的值(Innodb不支持)</p><p>语法：</p><p>ALTER  TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGNKEY(外键字段) REFERENCES 主表名(主表字段名) ON UPDATE CASCADE ON DELETE CASCADE</p><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p>各表结构之间基本存在三种关系</p><ul><li>一对多</li><li>多对多</li><li>一对一</li></ul><p>概述：从多张表中查询数据</p><p>笛卡尔积：笛卡尔乘积是指在数学中，两个集合A集合和B集合的所有组合情况</p><h4 id="多表查询分类"><a href="#多表查询分类" class="headerlink" title="多表查询分类"></a>多表查询分类</h4><p>连接查询</p><ul><li><p>内连接：相当于查询A,B交际部分数据</p></li><li><p>外连接：</p><ul><li><p>左外连接：查询左表所有数据，以及两张表交集部分数据</p><ul><li>语法：select 字段列表 from 表1 left [outer] join 表2 on 条件</li></ul></li><li><p>右外连接：查询右表所有数据，以及两张表交集部分数据</p><ul><li>语法：select 字段列表 from 表1 right[outer] join 表2 on 条件</li></ul></li></ul></li><li><p>自连接：当前表与自身的连接查询，连接必须使用表别名</p><ul><li>语法：select 字段列表 from 表a 别名a join 表a 表名 b on条件</li></ul></li></ul><p>联合查询</p><p>对于union查询，就是把多次查询的结合合并起来，形成以恶搞新的查询结果集</p><p>语法：</p><p>select 字段列表 from 表a … </p><p>union [all]</p><p>select 字段列表 from 表b … </p><p>对应联合查询的多张表的列数必须保持一致，字段类型也需要保持一致</p><p>union all 会将全部的数据直接合并在一起，union会对合并之后的数据去重</p><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><p>概念：SQL语句中嵌套SELECT语句，称为嵌套查询，又称为子查询</p><p>select * from t1 where column &#x3D; (select column1 from t2)</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>一组操作集合，要么同时成功，要么同时失败</p><p><img src="/2022/07/21/MYSQL%E5%9F%BA%E7%A1%80%E7%AF%87/1.png" alt="事务操作"></p><h4 id="事务的四大特性"><a href="#事务的四大特性" class="headerlink" title="事务的四大特性"></a>事务的四大特性</h4><ul><li><p>原子性 (Atomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</p></li><li><p>一致性 (Consistency）：事务完成时，必须使所有的数据都保持一致状态。</p></li><li><p>隔离性 (Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。 </p></li><li><p>持久性 (Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</p></li></ul><h4 id="并发事务问题"><a href="#并发事务问题" class="headerlink" title="并发事务问题"></a>并发事务问题</h4><ul><li>脏读：一个事务读取到另一个事务还没有提交的数据</li><li>不可重复读：一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读</li><li>幻读：一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像是出现了幻影</li></ul><h4 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h4><p><img src="/2022/07/21/MYSQL%E5%9F%BA%E7%A1%80%E7%AF%87/2.png" alt="事务隔离级别"></p><p>注意：事务隔离级别越高，数据越安全，但是性能越低</p><h2 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h2><p><a href="https://zhuanlan.zhihu.com/p/265852739">SQL优化最干货总结 - MySQL（2020最新版） - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot开发实用篇</title>
      <link href="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/"/>
      <url>/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot开发实用篇"><a href="#SpringBoot开发实用篇" class="headerlink" title="SpringBoot开发实用篇"></a>SpringBoot开发实用篇</h1><h2 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h2><h3 id="手动启动热部署"><a href="#手动启动热部署" class="headerlink" title="手动启动热部署"></a>手动启动热部署</h3><p>项目做完某一个功能测试的时候，修改完功能可以马上见到效果</p><p>服务器发现程序有新的改动，服务器实现内部的重启</p><p>实现热部署，必须得在spring容器里添加配置</p><p><strong>在pom文件中添加开发者工具并使用idea自带的重新构建项目完成热部署激活热备份(Ctrl+F9)</strong></p><p>实际是idea重新启动了服务器</p><ul><li>开启开发者工具</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--手动启动热部署--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>激活热部署</li></ul><p><img src="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/1.png" alt="idea构建项目"></p><h3 id="自动启动热部署"><a href="#自动启动热部署" class="headerlink" title="自动启动热部署"></a>自动启动热部署</h3><p>打开idea的自动构建项目  idea失去焦点五秒之后自动重新构建项目</p><p><strong><u>新版idea移除这个功能</u></strong></p><p><img src="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/2.png" alt="开启主动部署功能"></p><h3 id="关于热部署"><a href="#关于热部署" class="headerlink" title="关于热部署"></a>关于热部署</h3><ul><li>重启(Restart):自定义开发代码，包含类，页面，配置文件等，加载位置restart类加载器</li><li>重载(Reload):jar包，加载位置base类加载器</li></ul><p>热部署仅仅加载当前开发者自定义开发的资源，不加载jar资源</p><h4 id="热部署范围配置"><a href="#热部署范围配置" class="headerlink" title="热部署范围配置"></a>热部署范围配置</h4><ul><li>默认不触发重启的目录列表<ul><li>&#x2F;META-INF&#x2F;maven</li><li>&#x2F;META-INF&#x2F;resources</li><li>&#x2F;resources</li><li>&#x2F;static</li><li>&#x2F;public</li><li>&#x2F;templates</li></ul></li></ul><p>在springboot的配置文件中找到开发者工具，控制热部署范围配置</p><p>开发环境下有效</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devtools:</span></span><br><span class="line">  <span class="attr">restart:</span></span><br><span class="line">    <span class="comment"># 设置不参与热部署的文件夹</span></span><br><span class="line">    <span class="attr">exclude:</span> <span class="string">static/**,public/**,config/application.yml</span></span><br></pre></td></tr></table></figure><h4 id="关闭热部署"><a href="#关闭热部署" class="headerlink" title="关闭热部署"></a>关闭热部署</h4><h5 id="yml文件配置关闭"><a href="#yml文件配置关闭" class="headerlink" title="yml文件配置关闭"></a>yml文件配置关闭</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devtools:</span></span><br><span class="line">  <span class="attr">restart:</span></span><br><span class="line">    <span class="comment"># 设置不参与热部署的文件夹</span></span><br><span class="line">    <span class="attr">exclude:</span> <span class="string">static/**,public/**,config/application.yml</span></span><br><span class="line">    <span class="comment"># 关闭热部署</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h5 id="属性加载优先级覆盖关闭"><a href="#属性加载优先级覆盖关闭" class="headerlink" title="属性加载优先级覆盖关闭"></a>属性加载优先级覆盖关闭</h5><ul><li>设置高优先级属性禁用热部署</li></ul><p>在springboot启动入口类中设置关闭热部署</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SSMPApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;spring.devtools.restart.enabled&quot;</span>,<span class="string">&quot;false&quot;</span>);</span><br><span class="line">        SpringApplication.run(SSMPApplication.class, args);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置高级"><a href="#配置高级" class="headerlink" title="配置高级"></a>配置高级</h2><h3 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h3><p><strong>configuration</strong></p><h4 id="三种属性绑定"><a href="#三种属性绑定" class="headerlink" title="三种属性绑定"></a>三种属性绑定</h4><h5 id="读取单一属性"><a href="#读取单一属性" class="headerlink" title="读取单一属性"></a>读取单一属性</h5><p>当要读取yml配置文件中country的值</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">country:</span> <span class="string">china</span></span><br><span class="line"><span class="attr">province:</span> <span class="string">beijing</span></span><br><span class="line"><span class="attr">city:</span> <span class="string">beijing</span></span><br><span class="line"><span class="attr">area:</span> <span class="string">haiding</span></span><br><span class="line"></span><br><span class="line"><span class="attr">user:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ma</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">16</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用注解**@Value**获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;country&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String country1;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;user.name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name1;</span><br></pre></td></tr></table></figure><p>像是是多级属性则一级一级读取</p><h5 id="读取数组中数据"><a href="#读取数组中数据" class="headerlink" title="读取数组中数据"></a>读取数组中数据</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">likes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">game</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">music</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sleep</span></span><br></pre></td></tr></table></figure><p>同样是**@Value**获取 只不过是数组形式获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;likes[1]&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String likes;</span><br></pre></td></tr></table></figure><h5 id="引用数据"><a href="#引用数据" class="headerlink" title="引用数据"></a>引用数据</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">baseDir:</span> <span class="string">c:\win10</span></span><br><span class="line"><span class="comment">#使用$&#123;属性名&#125;引用数据</span></span><br><span class="line"><span class="attr">tempDir:</span> <span class="string">$&#123;baseDir&#125;\temp</span></span><br><span class="line"><span class="comment">#使用引号包裹的字符串，其中的转义字符页可以生效</span></span><br><span class="line"><span class="attr">tempDir2:</span> <span class="string">&quot;$&#123;baseDir&#125;\temp \t1 \t2&quot;</span></span><br></pre></td></tr></table></figure><h5 id="读取yml全部属性数据"><a href="#读取yml全部属性数据" class="headerlink" title="读取yml全部属性数据"></a>读取yml全部属性数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自动装配 yml配置文件里的全部属性</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment env;</span><br></pre></td></tr></table></figure><p>获取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(env.getProperty(<span class="string">&quot;user.name&quot;</span>));</span><br><span class="line">System.out.println(env.getProperty(<span class="string">&quot;likes[1]&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="将一组数据封装为对象"><a href="#将一组数据封装为对象" class="headerlink" title="将一组数据封装为对象"></a>将一组数据封装为对象</h4><h5 id="配置数据"><a href="#配置数据" class="headerlink" title="配置数据"></a>配置数据</h5><p>在yml中配置数据</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">servers:</span></span><br><span class="line">  <span class="attr">idAddress:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2345</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><p>定义实体类接收数据生成对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义数据模型封装yaml文件中对应的数据封装成对象</span></span><br><span class="line"><span class="comment">//定义spring管控的bean</span></span><br><span class="line"><span class="comment">//指定加载spring容器里自定义的bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;servers&quot;)</span></span><br><span class="line">/<span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String idAddress;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> timeout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h5><ul><li>在springboot启动入口测试 需要使用getBean来获得数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ServerConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot10ConfigurationApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;datasource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource <span class="title function_">druidDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> SpringApplication.run(Springboot10ConfigurationApplication.class,args);</span><br><span class="line">        <span class="type">ServerConfig</span> <span class="variable">bean</span> <span class="operator">=</span> ctx.getBean(ServerConfig.class);</span><br><span class="line"><span class="comment">//        SpringApplication.run(Springboot10ConfigurationApplication.class, args);</span></span><br><span class="line">        System.out.println(bean);</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> ctx.getBean(DruidDataSource.class);</span><br><span class="line">        System.out.println(ds.getDriverClassName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在congtroller层使用注解**@Autowired**来获得数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ServerConfig serverConfig;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(serverfig)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="第三方bean绑定"><a href="#第三方bean绑定" class="headerlink" title="第三方bean绑定"></a>第三方bean绑定</h4><p><strong>@ConfigurationProperties</strong>不仅适用于自定义的bean属性还适用于第三方bean绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;datasource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DruidDataSource <span class="title function_">druidDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    <span class="keyword">return</span> ds;</span><br><span class="line">&#125;</span><br><span class="line"> System.out.println(ds.getDriverClassName());</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">driverClassName:</span> <span class="string">com.mysql.jdbc.DriverMa</span></span><br></pre></td></tr></table></figure><h4 id="ConfigurationProperties和-EnableConfigurationProperties"><a href="#ConfigurationProperties和-EnableConfigurationProperties" class="headerlink" title="@ConfigurationProperties和@EnableConfigurationProperties"></a>@ConfigurationProperties和@EnableConfigurationProperties</h4><ul><li><p>开启属性绑定并设置具体目标**@EnableConfigurationProperties(ServerConfig.class)<strong>是指定一个类或者多个类为</strong>spring容器的bean<strong>跟</strong>@Component**作用大致相同 </p><ul><li>多个类的写法@EnableConfigurationProperties({A.class,b.Blass,C.class})</li><li>@EnableConfigurationProperties和@Component不能同时使用</li><li><strong>@Component：</strong> 标注Spring管理的Bean，使用@Component注解在一个类上，表示将此类标记为Spring容器中的一个Bean。</li></ul></li><li><p><strong>@ConfigurationProperties</strong>具体的做属性绑定</p></li></ul><h5 id="松散绑定"><a href="#松散绑定" class="headerlink" title="松散绑定"></a>松散绑定</h5><ul><li><strong>@ConfigurationProperties</strong>绑定属性支持绑定属性名宽松绑定</li><li><strong>@Value</strong> 不支持宽松绑定</li><li>绑定前缀命名命名规则——&gt;<strong>建议统一小写命名</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;servers&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String idAddress;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> timeout;</span><br><span class="line">    <span class="comment">//默认时间单位为毫秒</span></span><br><span class="line">    <span class="meta">@DurationUnit(ChronoUnit.HOURS)</span> <span class="comment">//自定义时间单位</span></span><br><span class="line">    <span class="keyword">private</span> Duration serverTimeOut;</span><br><span class="line">    <span class="comment">//数据存储单位</span></span><br><span class="line">    <span class="meta">@DataSizeUnit(DataUnit.MEGABYTES)</span> <span class="comment">//自定义数据单位</span></span><br><span class="line">    <span class="keyword">private</span> DataSize dataSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">servers:</span></span><br><span class="line">  <span class="attr">idAddress:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span>       <span class="comment"># 驼峰</span></span><br><span class="line"><span class="comment">#  ipaddress: 192.168.0.1</span></span><br><span class="line"><span class="comment">#  ip_address: 192.168.0.1      # unline</span></span><br><span class="line"><span class="comment">#  ip-address: 192.168.0.1       # 烤肉串格式 主流</span></span><br><span class="line"><span class="comment">#  IPADDRESS: 192.168.0.1</span></span><br><span class="line"><span class="comment">#  IP_ADDRESS: 192.168.0.1      # 常量</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2345</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">serverTimeOut:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">dataSize:</span> <span class="number">10</span> <span class="comment"># 也可以写10MB</span></span><br></pre></td></tr></table></figure><h4 id="开启bean数据校验"><a href="#开启bean数据校验" class="headerlink" title="开启bean数据校验"></a>开启bean数据校验</h4><ul><li>添加JSR303规范坐标与hibernate校验框架坐标</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        1.导入JSR303规范--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        jdbc--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.validation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>validation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        使用hibernate校验器做实现接口--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>开启Bean校验功能 使用@Validated注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;servers&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="comment">//2.开启对当前bean的属性注入校验</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String idAddress;</span><br><span class="line">    <span class="comment">//3.开启具体校验规则</span></span><br><span class="line">    <span class="meta">@Max(value = 8888,message = &quot;最大值不超过8888&quot;)</span></span><br><span class="line">    <span class="meta">@Min(value = 202,message = &quot;最小值不低于202&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> timeout;</span><br><span class="line">    <span class="comment">//默认时间单位为毫秒</span></span><br><span class="line">    <span class="meta">@DurationUnit(ChronoUnit.HOURS)</span> <span class="comment">//自定义时间单位</span></span><br><span class="line">    <span class="keyword">private</span> Duration serverTimeOut;</span><br><span class="line">    <span class="comment">//数据存储单位</span></span><br><span class="line">    <span class="meta">@DataSizeUnit(DataUnit.MEGABYTES)</span> <span class="comment">//自定义数据单位</span></span><br><span class="line">    <span class="keyword">private</span> DataSize dataSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="进制转换规则"><a href="#进制转换规则" class="headerlink" title="进制转换规则"></a>进制转换规则</h4><p>yaml文件中对于数字的定义支持进制书写格式，如需使用字符串请使用引号明确标注</p><p><img src="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/3.png" alt="yaml语法规则"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="加载测试环境专用属性"><a href="#加载测试环境专用属性" class="headerlink" title="加载测试环境专用属性"></a>加载测试环境专用属性</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">prop:</span> <span class="string">vtb</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置临时变量属性 里面是数组类型可以添加多条</span></span><br><span class="line"><span class="comment">// properties 可以为当前属性添加一组临时属性配置</span></span><br><span class="line"><span class="comment">//@SpringBootTest(properties = &#123;&quot;test.prop=vtb1&quot;&#125;)</span></span><br><span class="line"><span class="comment">//使用args配置临时属性 模拟命令行模式 注意前面得加--</span></span><br><span class="line"><span class="comment">//@SpringBootTest(args = &#123;&quot;--test.prop=vtb2&quot;&#125;)</span></span><br><span class="line"><span class="comment">//当两个同时出现，由properties覆盖配置文件属性,再由命令行取代properties</span></span><br><span class="line"><span class="meta">@SpringBootTest(properties = &#123;&quot;test.prop=vtb1&quot;&#125;,args = &#123;&quot;--test.prop=vtb2&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertiesAndArgsTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;test.prop&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testProperties</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="引用外部资源"><a href="#引用外部资源" class="headerlink" title="引用外部资源"></a>引用外部资源</h4><ul><li>@Import(MsgConfig.class)可以导入bean</li><li>但是如果需要引用的类写了@Configuration 则springboot自动装配</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MsgConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">msg</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;bean msg&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Import(MsgConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigurationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span>  String msg;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">Configuration</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试web层"><a href="#测试web层" class="headerlink" title="测试web层"></a>测试web层</h3><h4 id="模拟web环境"><a href="#模拟web环境" class="headerlink" title="模拟web环境"></a>模拟web环境</h4><ul><li><strong>@SpringBootTest(webEnvironment &#x3D; SpringBootTest.WebEnvironment.DEFINED_PORT)</strong> 使用默认端口号进行访问</li></ul><p>模拟端口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">webTest</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="web环境模拟请求测试"><a href="#web环境模拟请求测试" class="headerlink" title="web环境模拟请求测试"></a>web环境模拟请求测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置web环境</span></span><br><span class="line"><span class="meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br><span class="line"><span class="comment">// 开启虚拟MVC调用</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">webTest</span><span class="params">(<span class="meta">@Autowired</span> MockMvc mvc)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//创建一个虚拟请求,当前访问/books</span></span><br><span class="line">        <span class="type">MockHttpServletRequestBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> MockMvcRequestBuilders.get(<span class="string">&quot;/books&quot;</span>);</span><br><span class="line">        <span class="comment">//执行对应请求</span></span><br><span class="line">        mvc.perform(builder);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="虚拟请求响应状态匹配"><a href="#虚拟请求响应状态匹配" class="headerlink" title="虚拟请求响应状态匹配"></a>虚拟请求响应状态匹配</h4><ul><li>如果与预期值匹配相等则正常运行</li><li>如果不相等则报出详细错误</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">webTest</span><span class="params">(<span class="meta">@Autowired</span> MockMvc mvc)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//创建一个虚拟请求,当前访问/books</span></span><br><span class="line">    <span class="type">MockHttpServletRequestBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> MockMvcRequestBuilders.get(<span class="string">&quot;/books&quot;</span>);</span><br><span class="line">    <span class="comment">//执行对应请求</span></span><br><span class="line">    <span class="type">ResultActions</span> <span class="variable">actions</span> <span class="operator">=</span> mvc.perform(builder);</span><br><span class="line">    <span class="comment">//设置预期值,与真实值进行比较,成功测试通过,失败测试失败\</span></span><br><span class="line">    <span class="comment">//定义本次调用的预期值</span></span><br><span class="line">    <span class="type">StatusResultMatchers</span> <span class="variable">status</span> <span class="operator">=</span> MockMvcResultMatchers.status();</span><br><span class="line">    <span class="comment">//定义具体的结果 预计本次调用时成功的状态:200</span></span><br><span class="line">    <span class="type">ResultMatcher</span> <span class="variable">ok</span> <span class="operator">=</span> status.isOk();</span><br><span class="line">    <span class="comment">//添加预期值到本次调用过程中进行匹配</span></span><br><span class="line">    actions.andExpect(ok);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/4.png" alt="错误详情"></p><h4 id="测试响应体内容"><a href="#测试响应体内容" class="headerlink" title="测试响应体内容"></a>测试响应体内容</h4><ul><li>测试结果看返回值是否匹配<ul><li>成功则正常运行</li><li>失败则报出集团错误</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testBody</span><span class="params">(<span class="meta">@Autowired</span> MockMvc mvc)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//创建一个虚拟请求,当前访问/books</span></span><br><span class="line">        <span class="type">MockHttpServletRequestBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> MockMvcRequestBuilders.get(<span class="string">&quot;/1books&quot;</span>);</span><br><span class="line">        <span class="comment">//执行对应请求</span></span><br><span class="line">        <span class="type">ResultActions</span> <span class="variable">actions</span> <span class="operator">=</span> mvc.perform(builder);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置预期值,与真实值进行比较,成功测试通过,失败测试失败</span></span><br><span class="line">        <span class="comment">//定义本次调用的预期值</span></span><br><span class="line">        <span class="type">ContentResultMatchers</span> <span class="variable">content</span> <span class="operator">=</span> MockMvcResultMatchers.content();</span><br><span class="line">        <span class="comment">//定义具体的结果 预计本次调用时成功返回内容</span></span><br><span class="line">        <span class="type">ResultMatcher</span> <span class="variable">result</span> <span class="operator">=</span> content.string(<span class="string">&quot;springboot&quot;</span>);</span><br><span class="line">        <span class="comment">//添加预期值到本次调用过程中进行匹配</span></span><br><span class="line">        actions.andExpect(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试响应体内容-JSON"><a href="#测试响应体内容-JSON" class="headerlink" title="测试响应体内容(JSON)"></a>测试响应体内容(JSON)</h4><ul><li>匹配Json返回内容是否和预期相等</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testBodyJson</span><span class="params">(<span class="meta">@Autowired</span> MockMvc mvc)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//创建一个虚拟请求,当前访问/books</span></span><br><span class="line">    <span class="type">MockHttpServletRequestBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> MockMvcRequestBuilders.get(<span class="string">&quot;/1books&quot;</span>);</span><br><span class="line">    <span class="comment">//执行对应请求</span></span><br><span class="line">    <span class="type">ResultActions</span> <span class="variable">actions</span> <span class="operator">=</span> mvc.perform(builder);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置预期值,与真实值进行比较,成功测试通过,失败测试失败</span></span><br><span class="line">    <span class="comment">//定义本次调用的预期值</span></span><br><span class="line">    <span class="type">ContentResultMatchers</span> <span class="variable">content</span> <span class="operator">=</span> MockMvcResultMatchers.content();</span><br><span class="line">    <span class="comment">//定义具体的结果 预计本次调用时成功返回内容</span></span><br><span class="line">    <span class="type">ResultMatcher</span> <span class="variable">result</span> <span class="operator">=</span> content.json(<span class="string">&quot;id1\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;namespringboot\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;typemath\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;descriptiongood book&quot;</span>);</span><br><span class="line">    <span class="comment">//添加预期值到本次调用过程中进行匹配</span></span><br><span class="line">    actions.andExpect(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试响应头"><a href="#测试响应头" class="headerlink" title="测试响应头"></a>测试响应头</h4><ul><li>name中的value是否和预计的相同</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testContentType</span><span class="params">(<span class="meta">@Autowired</span> MockMvc mvc)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//创建一个虚拟请求,当前访问/books</span></span><br><span class="line">    <span class="type">MockHttpServletRequestBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> MockMvcRequestBuilders.get(<span class="string">&quot;/1books&quot;</span>);</span><br><span class="line">    <span class="comment">//执行对应请求</span></span><br><span class="line">    <span class="type">ResultActions</span> <span class="variable">actions</span> <span class="operator">=</span> mvc.perform(builder);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置预期值,与真实值进行比较,成功测试通过,失败测试失败</span></span><br><span class="line">    <span class="comment">//定义本次调用的预期值</span></span><br><span class="line">    <span class="type">HeaderResultMatchers</span> <span class="variable">header</span> <span class="operator">=</span> MockMvcResultMatchers.header();</span><br><span class="line">    <span class="comment">//匹配响应头,name为响应头名称,value为预期结果</span></span><br><span class="line">    <span class="type">ResultMatcher</span> <span class="variable">string</span> <span class="operator">=</span> header.string(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">    <span class="comment">//添加预期值到本次调用过程中进行匹配</span></span><br><span class="line">    actions.andExpect(string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据层测试事务回滚"><a href="#数据层测试事务回滚" class="headerlink" title="数据层测试事务回滚"></a>数据层测试事务回滚</h3><ul><li>在测试数据的时候，在测试层添加**@Transactional** springboot会自动执行事务回滚，springboot知道是测试数据不将其写入数据库以免变成脏数据</li><li>如果需要数据插入到数据库加上注解**@Rollback(false)**,默认为true</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Transactional</span> <span class="comment">//操作事务的注解</span></span><br><span class="line"><span class="meta">@Rollback</span> <span class="comment">//默认回滚 不将测试数据添加到数据库</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaoTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">DaoTest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line"><span class="comment">//        book.setId(1);</span></span><br><span class="line">        book.setName(<span class="string">&quot;springboot&quot;</span>);</span><br><span class="line">        book.setType(<span class="string">&quot;math&quot;</span>);</span><br><span class="line">        book.setDescription(<span class="string">&quot;good book&quot;</span>);</span><br><span class="line">        bookService.save(book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试用例设置随机值"><a href="#测试用例设置随机值" class="headerlink" title="测试用例设置随机值"></a>测试用例设置随机值</h4><ul><li>在多环境配置中的测试环境添加测试随机值</li><li>通过创建实体封装为对象来接收</li><li>使用**@Autowired**注入bean来接收数据</li><li>设置范围没有规定使用哪种分隔符，()不唯一，可以使用各种符号分割，但不要使用 - 号</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">testcase:</span></span><br><span class="line">  <span class="attr">book:</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">$&#123;random.int(10)&#125;</span> <span class="comment"># 设置范围 10以内</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$&#123;random.value&#125;</span></span><br><span class="line">    <span class="attr">uuid:</span> <span class="string">$&#123;random.uuid&#125;</span></span><br><span class="line">    <span class="attr">publishTime:</span> <span class="string">$&#123;random.long&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;testcase.book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookCase</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String uuid;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> publishTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertiesAndArgsTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookCase bookCase;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testProperties</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(bookCase);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据层解决方案SQL"><a href="#数据层解决方案SQL" class="headerlink" title="数据层解决方案SQL"></a>数据层解决方案SQL</h2><h3 id="现有数据层解决方案技术选型"><a href="#现有数据层解决方案技术选型" class="headerlink" title="现有数据层解决方案技术选型"></a>现有数据层解决方案技术选型</h3><p><strong>Druid+MyBatis-Plus+MySQL</strong></p><ul><li>数据源：DruidDataSource</li><li>持久化技术：MyBatis-Plus&#x2F;MyBatis</li><li>数据库：MySQL</li></ul><h3 id="数据源内嵌配置"><a href="#数据源内嵌配置" class="headerlink" title="数据源内嵌配置"></a>数据源内嵌配置</h3><p>SpringBoot提供了三种内嵌的数据源对象共开发者选择</p><ul><li>HikariCP (springboot默认的配置)：默认内置数据源对象</li><li>Tomcat提供DataSource：HikariCP 不可用的情况下，且在web环境下，将使用tomcat服务器配置的数据源对象</li><li>Commons DBCP：HikariCP 不可用，tomcat数据源也不可用，将使用dbcp数据源</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># druid配置</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span>   <span class="comment"># 把druid禁用后 默认为Hikari配置</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nian0209</span></span><br><span class="line">  <span class="comment"># Hikari配置 </span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nian0209</span></span><br></pre></td></tr></table></figure><h3 id="内置持久化解决方案-JdbcTemplate"><a href="#内置持久化解决方案-JdbcTemplate" class="headerlink" title="内置持久化解决方案-JdbcTemplate"></a>内置持久化解决方案-JdbcTemplate</h3><p>在不使用MyBatis&#x2F;MyBatis-Plus的时候使用内置的JdbcTemlpate</p><ul><li><p>注意需要导入jdbc坐标</p></li><li><p>需要将mybatis相关配置关闭</p></li><li><p>jdbc依赖中携带了Hikari数据源依赖</p></li><li><p>可以在springboot配置文件中配置JdbcTemplate的相关配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/5.png" alt="Hikari数据源依赖"></p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nian0209</span></span><br><span class="line">  <span class="attr">jdbc:</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">fetch-size:</span> <span class="number">-1</span>    <span class="comment"># 缓存行数</span></span><br><span class="line">      <span class="attr">max-rows:</span> <span class="number">500</span>     <span class="comment"># 最大行数</span></span><br><span class="line">      <span class="attr">query-timeout:</span> <span class="number">-1</span> <span class="comment"># 查询超时时间</span></span><br></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcTemplateTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//由springboot容器注入JdbcTemplate数据源</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="comment">//查询 查询格式对于方法架构</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testJdbc</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from tbl_book where id =1&quot;</span>;</span><br><span class="line">        List&lt;Book&gt; qurey = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">RowMapper</span>&lt;Book&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Book <span class="title function_">mapRow</span><span class="params">(ResultSet rs,<span class="type">int</span> rowNum)</span><span class="keyword">throws</span> SQLException&#123;</span><br><span class="line">                <span class="type">Book</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">                temp.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                temp.setName(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                temp.setType(rs.getString(<span class="string">&quot;Type&quot;</span>));</span><br><span class="line">                temp.setDescription(rs.getString(<span class="string">&quot;description&quot;</span>));</span><br><span class="line">                <span class="keyword">return</span> temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(qurey);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;Insert into tbl_book values(null,&#x27;1&#x27;,&#x27;2&#x27;&#x27;3&#x27;)&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内嵌数据库"><a href="#内嵌数据库" class="headerlink" title="内嵌数据库"></a>内嵌数据库</h3><ul><li>SpringBoot提供了三种内嵌数据库共开发者选择，提高开发测试效率<ul><li>H2</li><li>HSQL</li><li>Derby</li></ul></li></ul><p>三种数据库均是Java语言编写，可以在springboot环境中运行</p><ul><li>H2是内存数据库仅在开发阶段建议测试使用，上线后树妖将配置文件里H<strong>2下的enabled改为false</strong> 如何使用：<a href="https://blog.csdn.net/qq_34845394/article/details/107190256"> H2数据库入门，看这篇就对了_不敲代码的攻城狮的博客-CSDN博客_h2数据库</a></li></ul><h2 id="NoSQL解决方案"><a href="#NoSQL解决方案" class="headerlink" title="NoSQL解决方案"></a>NoSQL解决方案</h2><ul><li>市面上常见的NoSQL解决方案<ul><li>Redis</li><li>Mongo</li><li>ES</li></ul></li></ul><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ul><li>Redis是一款key-values存储结构的内存级NoSQL数据库<ul><li>支持多中数据存储格式</li><li>支持持久化</li><li>支持集群</li></ul></li></ul><h4 id="Redis基本安装-windows"><a href="#Redis基本安装-windows" class="headerlink" title="Redis基本安装(windows)"></a>Redis基本安装(windows)</h4><ul><li><a href="https://github.com/tporadowski/redis/releases">Releases · tporadowski&#x2F;redis (github.com)</a></li><li>访问github下载windows版本的redis即可</li></ul><h4 id="Redis基本操作"><a href="#Redis基本操作" class="headerlink" title="Redis基本操作"></a>Redis基本操作</h4><ul><li>大型的哈希表 使用key-values形式</li><li><a href="https://blog.csdn.net/luna_a/article/details/107292994">Redis基本操作命令（图文详解）_进击小高的博客-CSDN博客_redis操作命令</a></li></ul><h5 id="第一次启动redis"><a href="#第一次启动redis" class="headerlink" title="第一次启动redis"></a>第一次启动redis</h5><ul><li>首先文件夹下cmd窗口运行 <strong>redis-server.exe  redis.windows.conf</strong> 运行服务器加指定配置</li><li>第一次运行会出现bug 运行出错<ul><li>所以得再另开一个cmd窗口 运行客户程序<strong>redis-cli.exe</strong>，输入shutdown 再exit退出即可</li><li>再重新运行 <strong>redis-server.exe  redis.windows.conf</strong></li></ul></li><li>服务器启动</li><li>清除数据<ul><li><a href="https://blog.csdn.net/weixin_43845597/article/details/89631540"> 如何清理Redis中的缓存_灬文羽轩灬的博客-CSDN博客_redis缓存清理</a></li></ul></li></ul><h4 id="SpirngBoot整合Redis"><a href="#SpirngBoot整合Redis" class="headerlink" title="SpirngBoot整合Redis"></a>SpirngBoot整合Redis</h4><h5 id="1-导入Redis坐标"><a href="#1-导入Redis坐标" class="headerlink" title="1.导入Redis坐标"></a>1.导入Redis坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-在springboot配置文件中加入配置-可省略"><a href="#2-在springboot配置文件中加入配置-可省略" class="headerlink" title="2.在springboot配置文件中加入配置(可省略)"></a>2.在springboot配置文件中加入配置(可省略)</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><h5 id="3-注入redisTemplate对象-操作接口对象操作"><a href="#3-注入redisTemplate对象-操作接口对象操作" class="headerlink" title="3.注入redisTemplate对象 操作接口对象操作"></a>3.注入redisTemplate对象 操作接口对象操作</h5><h4 id="Redis-两种注入方法"><a href="#Redis-两种注入方法" class="headerlink" title="Redis 两种注入方法"></a>Redis 两种注入方法</h4><h5 id="客户端：RedisTemplate以对象作为key和value，内部对数据进行序列化"><a href="#客户端：RedisTemplate以对象作为key和value，内部对数据进行序列化" class="headerlink" title="客户端：RedisTemplate以对象作为key和value，内部对数据进行序列化"></a>客户端：RedisTemplate以对象作为key和value，内部对数据进行序列化</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot12RedisApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    private StringRedisTemplate stringRedisTemplate;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ValueOperations</span> <span class="variable">ops</span> <span class="operator">=</span> redisTemplate.opsForValue();</span><br><span class="line">        <span class="type">HashOperations</span> <span class="variable">oph</span> <span class="operator">=</span> redisTemplate.opsForHash();</span><br><span class="line">        ops.set(<span class="string">&quot;age&quot;</span>,<span class="number">41</span>);</span><br><span class="line">        oph.put(<span class="string">&quot;info&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ValueOperations</span> <span class="variable">ops</span> <span class="operator">=</span> redisTemplate.opsForValue();</span><br><span class="line">        <span class="type">HashOperations</span> <span class="variable">oph</span> <span class="operator">=</span> redisTemplate.opsForHash();</span><br><span class="line">        oph.get(<span class="string">&quot;info&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">age</span> <span class="operator">=</span> ops.get(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        System.out.println(age);</span><br><span class="line">        System.out.println(oph);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="客户端StringRedisTemplate-常用-以字符串作为key和value，与Redis客户端操作等效"><a href="#客户端StringRedisTemplate-常用-以字符串作为key和value，与Redis客户端操作等效" class="headerlink" title="客户端StringRedisTemplate(常用)以字符串作为key和value，与Redis客户端操作等效"></a>客户端StringRedisTemplate(常用)以字符串作为key和value，与Redis客户端操作等效</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">sets</span><span class="params">(<span class="meta">@Autowired</span> StringRedisTemplate stringRedisTemplate)</span>&#123;</span><br><span class="line">    <span class="type">ValueOperations</span> <span class="variable">ops</span> <span class="operator">=</span> stringRedisTemplate.opsForValue();</span><br><span class="line">    ops.set(<span class="string">&quot;testKey&quot;</span>,<span class="string">&quot;TestValue&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">gets</span><span class="params">(<span class="meta">@Autowired</span> StringRedisTemplate stringRedisTemplate)</span>&#123;</span><br><span class="line">    ValueOperations&lt;String, String&gt; ops = stringRedisTemplate.opsForValue();</span><br><span class="line">    <span class="type">String</span> <span class="variable">testKey</span> <span class="operator">=</span> ops.get(<span class="string">&quot;testKey&quot;</span>);</span><br><span class="line">    System.out.println(testKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="jedis客户端"><a href="#jedis客户端" class="headerlink" title="jedis客户端"></a>jedis客户端</h4><h5 id="1-导入jedis坐标"><a href="#1-导入jedis坐标" class="headerlink" title="1.导入jedis坐标"></a>1.导入jedis坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-设置client-type"><a href="#2-设置client-type" class="headerlink" title="2.设置client-type"></a>2.设置client-type</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">client-type:</span> <span class="string">jedis</span></span><br></pre></td></tr></table></figure><h4 id="客户端：lettcus-默认-与jedis区别"><a href="#客户端：lettcus-默认-与jedis区别" class="headerlink" title="客户端：lettcus(默认)与jedis区别"></a>客户端：lettcus(默认)与jedis区别</h4><ul><li><p>jedis连接Redis服务器是直连模式，当多线程模式下使用jedis会存在线程安全问题，解决方案可以通过配置连接池使每个连接专 用，这样整体性能就大受影响。</p></li><li><p>lettcus基于Netty框架进行与Redis服务器连接，底层设计中采用StatefulRedisConnection。 StatefulRedisConnection自身是线程安全的，可以保障并发访问安全问题，所以一个连接可以被多线程复用。当然lettcus也支持多连接实例一起工作</p></li></ul><h3 id="MangoDB"><a href="#MangoDB" class="headerlink" title="MangoDB"></a>MangoDB</h3><p>支持结构化的数据存储并且访问速度很快</p><ul><li><p>一个开源，高性能，<strong>无模式</strong>的<strong>文档型</strong>数据库。NoSQL数据库产品中的一种，是最像关系型数据库的非关系型数据库</p></li><li><p>存放的数据大多数是<strong>修改频率高</strong>，临时存储</p></li></ul><h4 id="Mongodb基本安装"><a href="#Mongodb基本安装" class="headerlink" title="Mongodb基本安装"></a>Mongodb基本安装</h4><ul><li><p>windows安装mongodb <a href="https://www.mongodb.com/try/download/community">MongoDB Community Download | MongoDB</a></p></li><li><p>解压缩后配置文件目录</p></li><li><p>windows下启动Mongo</p><ul><li>服务端启动：mongd –dbpath..\data\db</li><li>客户端启动：mongo (默认端口：27017 访问地址：127.0.0.1)</li></ul></li><li><p>使用navicat连接mongo数据库</p></li></ul><h4 id="Mongodb基本操作"><a href="#Mongodb基本操作" class="headerlink" title="Mongodb基本操作"></a>Mongodb基本操作</h4><p><a href="https://blog.csdn.net/PILIpilipala/article/details/113818320"> 超级详细MongoDB 的基本操作(理论+举例)_11.28.的博客-CSDN博客</a></p><p><img src="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/6.png" alt="Mongdb操作"></p><h4 id="SpirngBoot整合MongDB"><a href="#SpirngBoot整合MongDB" class="headerlink" title="SpirngBoot整合MongDB"></a>SpirngBoot整合MongDB</h4><h5 id="1-导入对应坐标"><a href="#1-导入对应坐标" class="headerlink" title="1.导入对应坐标"></a>1.导入对应坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-配置mongodb数据库地址"><a href="#2-配置mongodb数据库地址" class="headerlink" title="2.配置mongodb数据库地址"></a>2.配置mongodb数据库地址</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">mongodb:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">mongodb://localhost/user</span></span><br></pre></td></tr></table></figure><h5 id="3-使用MongoTemplate接口客户端读写测试"><a href="#3-使用MongoTemplate接口客户端读写测试" class="headerlink" title="3.使用MongoTemplate接口客户端读写测试"></a>3.使用MongoTemplate接口客户端读写测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot13MongdbApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setId(<span class="number">1</span>);</span><br><span class="line">        book.setName(<span class="string">&quot;springboot&quot;</span>);</span><br><span class="line">        book.setType(<span class="string">&quot;math&quot;</span>);</span><br><span class="line">        book.setDescription(<span class="string">&quot;good book&quot;</span>);</span><br><span class="line">        mongoTemplate.save(book);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">find</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Book&gt; all = mongoTemplate.findAll(Book.class);</span><br><span class="line">        System.out.println(all);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Elasticesearch-ES"><a href="#Elasticesearch-ES" class="headerlink" title="Elasticesearch(ES)"></a>Elasticesearch(ES)</h3><ul><li>Elasticesearch是一个分布式全文搜索引擎</li></ul><p><img src="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/7.png" alt="多段索引"></p><h4 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h4><ul><li>创建&#x2F;查询&#x2F;删除索引<ul><li>PUT   <a href="http://localhost:9200/books">http://localhost:9200/books</a></li><li>GET   <a href="http://localhost:9200/books">http://localhost:9200/books</a></li><li>DELETE   <a href="http://localhost:9200/books">http://localhost:9200/books</a></li></ul></li></ul><h4 id="添加ik分词器"><a href="#添加ik分词器" class="headerlink" title="添加ik分词器"></a>添加ik分词器</h4><p>将ik分词器解衣后存放在es目录下的plugins里</p><h4 id="创建索引并指定规则"><a href="#创建索引并指定规则" class="headerlink" title="创建索引并指定规则"></a>创建索引并指定规则</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;mappings&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">        <span class="string">&quot;properties&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span><span class="string">:&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;name&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span><span class="string">:&quot;text&quot;</span>,</span><br><span class="line">        <span class="string">&quot;analyzer&quot;</span><span class="string">:&quot;ik_max_word&quot;</span>,</span><br><span class="line">        <span class="string">&quot;copy_to&quot;</span><span class="string">:&quot;all&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;type&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span><span class="string">:&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;decription&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span><span class="string">:&quot;text&quot;</span>,</span><br><span class="line">        <span class="string">&quot;analyzer&quot;</span><span class="string">:&quot;ik_max_word&quot;</span>,</span><br><span class="line">        <span class="string">&quot;copy_to&quot;</span><span class="string">:&quot;all&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># 设计型字段 将name和decription里的字段统一读入</span></span><br><span class="line">        <span class="string">&quot;all&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span><span class="string">:&quot;text&quot;</span>,</span><br><span class="line">        <span class="string">&quot;analyzer&quot;</span><span class="string">:&quot;ik_max_word&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h4><p>PUT   <a href="http://localhost:9200/books/_doc">http://localhost:9200/books/_doc</a></p><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><ul><li>查询文档：<ul><li>GET   <a href="http://localhost:9200/books/_doc/1">http://localhost:9200/books/_doc/1</a>    查询单个</li><li>GET   <a href="http://localhost:9200/books/_search">http://localhost:9200/books/_search</a>   查询全部</li></ul></li><li>条件查询：GET   <a href="http://localhost:9200/books/_search">http://localhost:9200/books/_search</a> ?q&#x3D;name:springboot(条件)</li></ul><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><ul><li>DELETE    <a href="http://localhost:9200/books/_doc/1">http://localhost:9200/books/_doc/1</a></li></ul><h4 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h4><ul><li><p>全量修改</p><ul><li><p>PUT   <a href="http://localhost:9200/books/_doc/1">http://localhost:9200/books/_doc/1</a></p><p>{</p><p>​        “name”:”springboot”,</p><p>​”type“:”springboot”,</p><p>​“description”:”springboot”</p><p>}</p></li></ul></li><li><p>部分修改</p><ul><li><p>POST   <a href="http://localhost:9200/books/_update/1">http://localhost:9200/books/_update/1</a></p><p>{</p><p>​“doc”:{</p><p>​“name”:”springboot”,</p><p>​}</p><p>}</p></li></ul></li></ul><h4 id="springboot整合ES"><a href="#springboot整合ES" class="headerlink" title="springboot整合ES"></a>springboot整合ES</h4><ul><li>因为视频中的方法以被springboot弃用，所以使用新的技术 在高版本的springboot中已经整合了High level client 可以使用注入bean来返回客户端</li></ul><p><a href="https://blog.csdn.net/gybshen/article/details/111469217">Spring Boot整合Elasticsearch，最新最全教程_Cloud-Future的博客-CSDN博客_springboot整合elasticsearch</a></p><p><a href="https://blog.csdn.net/weixin_45721467/article/details/107990031"> SpringBoot 整合 high-level-client_张凯生的博客-CSDN博客</a></p><h2 id="整合第三方技术"><a href="#整合第三方技术" class="headerlink" title="整合第三方技术"></a>整合第三方技术</h2><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><ul><li><p>缓存是一种介于数据永久存储介质与属于应用之间的数据临时存储介质</p></li><li><p>使用缓存可以有效的减少低速数据读取过程的次数(例如：磁盘IO)，提高系统性能</p></li><li><p>缓存不仅可以用于提高永久性存储介质的数据读取效率，还可以提高临时的数据存储空间</p></li></ul><h4 id="模拟缓存"><a href="#模拟缓存" class="headerlink" title="模拟缓存"></a>模拟缓存</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟缓存</span></span><br><span class="line"><span class="keyword">private</span> HashMap&lt;Integer,Book&gt; cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    <span class="comment">//如果当前缓存中没有本次查询的数据，则在数据库中进行查询，否则直接在缓存中读取返回</span></span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> cache.get(id);</span><br><span class="line">    <span class="keyword">if</span> (book==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">queryBook</span> <span class="operator">=</span> bookDao.selectById(id);</span><br><span class="line">        cache.put(id,queryBook);</span><br><span class="line">        <span class="keyword">return</span> queryBook;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cache.get(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Springboot提高了缓存技术，方便缓存使用"><a href="#Springboot提高了缓存技术，方便缓存使用" class="headerlink" title="Springboot提高了缓存技术，方便缓存使用"></a>Springboot提高了缓存技术，方便缓存使用</h4><p><a href="https://blog.csdn.net/weixin_40251199/article/details/88028009?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-88028009-blog-90137503.t0_layer_searchtargeting_sa&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-88028009-blog-90137503.t0_layer_searchtargeting_sa&utm_relevant_index=2"> Spring cache 注解详解_子沐月的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_32448349/article/details/101696892"> 史上最全的Spring Boot Cache使用与整合_我俗人的博客-CSDN博客_springboot 使用cache</a></p><h5 id="启用缓存"><a href="#启用缓存" class="headerlink" title="启用缓存"></a>启用缓存</h5><ul><li>导入缓存依赖坐标</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--cache--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在springboot启动程序入口设置启用缓存 注解 <strong>@EnableCaching</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 开启缓存功能</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot15CacheApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Springboot15CacheApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在需要使用缓存的地方设置开启缓存功能 <strong>@Cacheable</strong></p><p>在方法执行前spring先查看缓存中有没有数据，如果有数据，则直接返回数据，如果没有数据，调用方法并将方法返回值放入缓存</p><p>基于内存开启的缓存，当服务器停掉之后，缓存的数据也没有了</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">//开启缓存，缓存空间为cacheSpace，查找条件为key=id</span></span><br><span class="line"><span class="meta">@Cacheable(value = &quot;cacheSpace&quot;,key =&quot;#id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> bookDao.selectById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@CachePut 将方法的返回值放入缓存中</li><li>@CacheEvict 将一条或者多条数据从缓存中删除</li></ul><h5 id="Springboot-提供的缓存技术除了默认的缓存方案，还可以对其他缓存技术进行整合，统一接口，方便缓存的开发与管理"><a href="#Springboot-提供的缓存技术除了默认的缓存方案，还可以对其他缓存技术进行整合，统一接口，方便缓存的开发与管理" class="headerlink" title="Springboot 提供的缓存技术除了默认的缓存方案，还可以对其他缓存技术进行整合，统一接口，方便缓存的开发与管理"></a>Springboot 提供的缓存技术除了默认的缓存方案，还可以对其他缓存技术进行整合，统一接口，方便缓存的开发与管理</h5><ul><li>Generic</li><li>JCache</li><li>Ehcache</li><li>Hazelacst</li><li>infinispan</li><li>Coushbase</li><li>Redis</li><li>Caffenine</li><li>Simple(默认)</li><li>memcached(市面上，常用的缓存技术)</li></ul><h5 id="缓存使用案例—手机验证码"><a href="#缓存使用案例—手机验证码" class="headerlink" title="缓存使用案例—手机验证码"></a>缓存使用案例—手机验证码</h5><ul><li><p>需求</p><ul><li>输入手机号获取验证码，组织文档以短信形式发送给用户(页面模拟)</li><li>输入手机号和验证码验证结果</li></ul></li><li><p>需求分析</p><ul><li>提供controller，传入手机号，业务层通过手机号计算出独有的六位验证码数据，存入缓存后返回此数据</li><li>提供controller，传入手机号与验证码，业务层通过手机号从缓存中读取验证码与输入的验证码进行比对</li></ul></li></ul><h3 id="springboot整合ehcache缓存"><a href="#springboot整合ehcache缓存" class="headerlink" title="springboot整合ehcache缓存"></a>springboot整合ehcache缓存</h3><p>导入坐标依赖</p><ul><li>注意springboot的版本稳定为2.5.x</li><li>添加ehcache配置文件</li><li>在springboot的配置文件中配置ehcache</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">updateCheck</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;D:\ehcache&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--默认缓存策略 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- external：是否永久存在，设置为true则不会被清除，此时与timeout冲突，通常设置为false--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- diskPersistent：是否启用磁盘持久化--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- maxElementsInMemory：最大缓存数量--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- overflowToDisk：超过最大缓存数量是否持久化到磁盘--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- timeToIdleSeconds：最大不活动间隔，设置过长缓存容易溢出，设置过短无效果，可用于记录时效性数据，例如验证码--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- timeToLiveSeconds：最大存活时间--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- memoryStoreEvictionPolicy：缓存清除策略--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">diskPersistent</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;60&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;60&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 添加其他缓存策略--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">&quot;smsCode&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">diskPersistent</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 缓存技术选择</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">ehcache</span></span><br><span class="line">    <span class="attr">ehcache:</span></span><br><span class="line">      <span class="attr">config:</span> <span class="string">classpath:ehcache.xml</span></span><br></pre></td></tr></table></figure><h3 id="转换缓存方案为Redis"><a href="#转换缓存方案为Redis" class="headerlink" title="转换缓存方案为Redis"></a>转换缓存方案为Redis</h3><p>springboot中切换缓存方案为Redis</p><ul><li>导入依赖</li><li>在springboot的配置文件中配置Redis相关内容</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="comment"># 缓存技术选择 redis配置 需要开redis服务器</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="comment"># 是否缓存空值</span></span><br><span class="line">      <span class="attr">cache-null-values:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 是否使用前缀 开启false之后 key-prefix的配置不起作用</span></span><br><span class="line">      <span class="attr">use-key-prefix:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 指定前缀</span></span><br><span class="line">      <span class="attr">key-prefix:</span> <span class="string">aa</span></span><br><span class="line">      <span class="comment"># 最大活动时间</span></span><br><span class="line">      <span class="attr">time-to-live:</span> <span class="string">10s</span></span><br></pre></td></tr></table></figure><h3 id="memchaed-需要重新配置-window下安装有问题"><a href="#memchaed-需要重新配置-window下安装有问题" class="headerlink" title="memchaed 需要重新配置 window下安装有问题"></a>memchaed 需要重新配置 window下安装有问题</h3><p><a href="https://www.cnblogs.com/ringbug/p/15595371.html">memcached 安装及集成(转) - Jsonring - 博客园 (cnblogs.com)</a></p><h3 id="缓存供应商变更jetcache"><a href="#缓存供应商变更jetcache" class="headerlink" title="缓存供应商变更jetcache"></a>缓存供应商变更jetcache</h3><ul><li><p>jetCache对SpringCache进行了封装，在原有功能的基础上实现了多级缓存，缓存统计，自动刷新，异步调用，数据报表等功能</p></li><li><p>jetCache设定了本地缓存与远程缓存的多级缓存解决方案</p><ul><li>本地缓存(local)<ul><li>LinkedHashMap</li><li>Caffeine</li></ul></li><li>远程缓存(remote)<ul><li>Redis</li><li>Tair</li></ul></li></ul></li></ul><h4 id="加入坐标依赖"><a href="#加入坐标依赖" class="headerlink" title="加入坐标依赖"></a>加入坐标依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alicp.jetcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetcache-starter-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="本地缓存也远程缓存共存"><a href="#本地缓存也远程缓存共存" class="headerlink" title="本地缓存也远程缓存共存"></a>本地缓存也远程缓存共存</h4><ul><li>remote</li><li>local</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jetcache:</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">  <span class="comment"># 默认</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">linkedhashmap</span></span><br><span class="line">      <span class="attr">keyConvertor:</span> <span class="string">fastjson</span></span><br><span class="line">  <span class="attr">remote:</span></span><br><span class="line">  <span class="comment"># 默认</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">poolConfig:</span></span><br><span class="line">        <span class="attr">maxTotal:</span> <span class="number">50</span></span><br><span class="line">    <span class="comment"># 远程配置2</span></span><br><span class="line">    <span class="attr">sms:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">poolConfig:</span></span><br><span class="line">        <span class="attr">maxTotal:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure><p><img src="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/8.png" alt="基本配置"></p><h4 id="开启使用jetCache-注解：-EnableCreateCacheAnnotation"><a href="#开启使用jetCache-注解：-EnableCreateCacheAnnotation" class="headerlink" title="开启使用jetCache 注解：**@EnableCreateCacheAnnotation**"></a>开启使用jetCache 注解：**@EnableCreateCacheAnnotation**</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//jetcache启用缓存的主开关</span></span><br><span class="line"><span class="meta">@EnableCreateCacheAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot16JetcacheApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Springboot16JetcacheApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="声明缓存对象"><a href="#声明缓存对象" class="headerlink" title="声明缓存对象"></a>声明缓存对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SMSCodeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SMSCodeService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CodeUtils codeUtils;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// remote</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置过期时间 默认为秒 设置本地访问:cacheType = CacheType.LOCAL</span></span><br><span class="line">    <span class="meta">@CreateCache(name=&quot;jetCache&quot;,expire = 3600,timeUnit =  TimeUnit.SECONDS,cacheType = CacheType.LOCAL)</span></span><br><span class="line">    <span class="keyword">private</span> Cache&lt;String,String&gt; jetCache;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置过期时间 默认为秒  方案2</span></span><br><span class="line"><span class="comment">//    @CreateCache(area = &quot;sms&quot;,name=&quot;jetCache&quot;,expire = 10,timeUnit =  TimeUnit.SECONDS)</span></span><br><span class="line"><span class="comment">//    private Cache&lt;String,String&gt; jetCache1;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendCodeToSMS</span><span class="params">(String tele)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> codeUtils.generator(tele);</span><br><span class="line">        jetCache.put(tele,code);</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkCode</span><span class="params">(SMSCode smsCode)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> jetCache.get(smsCode.getTele());</span><br><span class="line">        <span class="keyword">return</span> smsCode.getCode().equals(code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启用方法注解"><a href="#启用方法注解" class="headerlink" title="启用方法注解"></a>启用方法注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//jetcache启用缓存的主开关</span></span><br><span class="line"><span class="meta">@EnableCreateCacheAnnotation</span></span><br><span class="line"><span class="comment">//开启方法注解缓存 在方法头上设置开启缓存 指定扫描的包</span></span><br><span class="line"><span class="meta">@EnableMethodCache(basePackages = &quot;ithima&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot16JetcacheApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Springboot16JetcacheApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h5><ul><li>缓存对象必须保障可序列话</li><li>设置编码</li><li>设置增删查改的缓存操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jetcache:</span></span><br><span class="line">  <span class="comment"># 查看缓存统计报告</span></span><br><span class="line">  <span class="attr">statIntervaMinutes:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">linkedhashmap</span></span><br><span class="line">      <span class="attr">keyConvertor:</span> <span class="string">fastjson</span></span><br><span class="line">  <span class="attr">remote:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">keyConvertor:</span> <span class="string">fastjson</span></span><br><span class="line">      <span class="attr">valueEncode:</span> <span class="string">java</span></span><br><span class="line">      <span class="attr">valueDecode:</span> <span class="string">java</span></span><br><span class="line">      <span class="attr">poolConfig:</span></span><br><span class="line">        <span class="attr">maxTotal:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;BookDao, Book&gt; <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//开启缓存，缓存空间为cacheSpace，查找条件为key=id 设置为本地</span></span><br><span class="line">    <span class="meta">@Cached(name=&quot;book_&quot;,key=&quot;#id&quot;,expire = 3600,cacheType = CacheType.REMOTE)</span></span><br><span class="line">    <span class="meta">@CacheRefresh(refresh = 10,timeUnit = TimeUnit.SECONDS)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新操作 更新时将缓存中对应的数据一起更新</span></span><br><span class="line">    <span class="meta">@CacheUpdate(name=&quot;book_&quot;,key=&quot;#book.id&quot;,value=&quot;#book&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.updateById(book)&gt;<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除操作 删除时将缓存中对应的数据一起删除</span></span><br><span class="line">    <span class="meta">@CacheInvalidate(name = &quot;book_&quot;,key=&quot;#id&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.deleteById(id)&gt;<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缓存供应商变更：j2cache"><a href="#缓存供应商变更：j2cache" class="headerlink" title="缓存供应商变更：j2cache"></a>缓存供应商变更：j2cache</h3><ul><li>j2cache是一个缓存整合框架，可以提供缓存的整合方案，使各种缓存搭配使用，自身并不提供缓存功能</li><li>基于ebcache+redis进行整合</li></ul><h4 id="添加坐标"><a href="#添加坐标" class="headerlink" title="添加坐标"></a>添加坐标</h4><ul><li>加入整合坐标</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--j2cache核心坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.oschina.j2cache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>j2cache-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.5-release<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--springboot整合j2cache坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.oschina.j2cache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>j2cache-spring-boot2-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0-release<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--整合ehcache，使用其他就换其他坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在springboot配置文件中设置j2cache的配置文件"><a href="#在springboot配置文件中设置j2cache的配置文件" class="headerlink" title="在springboot配置文件中设置j2cache的配置文件"></a>在springboot配置文件中设置j2cache的配置文件</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">j2cache:</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">j2cache.properties</span></span><br></pre></td></tr></table></figure><h4 id="配置一级缓存和二级缓存以及一级缓存数据到二级缓存的发送方式"><a href="#配置一级缓存和二级缓存以及一级缓存数据到二级缓存的发送方式" class="headerlink" title="配置一级缓存和二级缓存以及一级缓存数据到二级缓存的发送方式"></a>配置一级缓存和二级缓存以及一级缓存数据到二级缓存的发送方式</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1级缓存</span></span><br><span class="line"><span class="comment"># 配置供应商</span></span><br><span class="line"><span class="attr">j2cache.L1.provider_class</span> = <span class="string">ehcache</span></span><br><span class="line"><span class="attr">ehcache.configXml</span> = <span class="string">ehcache.xml</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 设置是否启用二级缓存</span></span><br><span class="line"><span class="attr">j2cache-l2-open</span> = <span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 2级缓存</span></span><br><span class="line"><span class="comment"># 配置供应商</span></span><br><span class="line"><span class="attr">j2cache.L2.provider_class</span> = <span class="string">net.oschina.j2cache.cache.support.redis.SpringRedisProvider</span></span><br><span class="line"><span class="attr">j2cache.L2.config_section</span> = <span class="string">redis</span></span><br><span class="line"><span class="attr">redis.hosts</span> = <span class="string">localhost:6379</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 1级缓存中的数据如何到达二级缓存中</span></span><br><span class="line"><span class="comment"># 配置一级缓存数据到二级缓存数据的广播方式：可以使用redis提供的消息订阅模式，也可以使用groups 多播实现</span></span><br><span class="line"><span class="attr">j2cache.broadcast</span> =<span class="string">net.oschina.j2cache.cache.support.redis.SpringRedisPubSubPolicy</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置redis模式</span></span><br><span class="line"><span class="attr">redis.mode</span> = <span class="string">single</span></span><br></pre></td></tr></table></figure><h4 id="设置缓存对象，操作数据"><a href="#设置缓存对象，操作数据" class="headerlink" title="设置缓存对象，操作数据"></a>设置缓存对象，操作数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SMSCodeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SMSCodeService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CodeUtils codeUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CacheChannel cacheChannel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendCodeToSMS</span><span class="params">(String tele)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> codeUtils.generator(tele);</span><br><span class="line">        cacheChannel.set(<span class="string">&quot;sms&quot;</span>,tele,code);</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkCode</span><span class="params">(SMSCode smsCode)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> cacheChannel.get(<span class="string">&quot;sms&quot;</span>,smsCode.getTele()).asString();</span><br><span class="line">        <span class="keyword">return</span> smsCode.getCode().equals(code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><ul><li><p>定时任务是企业级应用中的常见操作</p><ul><li>年度报表</li><li>缓存统计报告</li><li>… …</li></ul></li><li><p>市面上流行的定时任务技术</p><ul><li>Quartz</li><li>Spring Task</li></ul></li></ul><h3 id="Springboot-整合Quartz"><a href="#Springboot-整合Quartz" class="headerlink" title="Springboot 整合Quartz"></a>Springboot 整合Quartz</h3><ul><li>相关概念<ul><li>工作(Job):用于定义具体执行的工作</li><li>工作明细(JobDetail):用于描述定时工作相关的信息</li><li>触发器(Trigger):用于描述工作的规则，通常使用cron表达定义调度规则</li><li>调度器(Scheduler):描述工作明细与触发器的对应关系</li></ul></li></ul><h4 id="导入对应坐标"><a href="#导入对应坐标" class="headerlink" title="导入对应坐标"></a>导入对应坐标</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="定义具体要执行的任务"><a href="#定义具体要执行的任务" class="headerlink" title="定义具体要执行的任务"></a>定义具体要执行的任务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyQuartz</span> <span class="keyword">extends</span> <span class="title class_">QuartzJobBean</span> &#123;</span><br><span class="line">    <span class="comment">// 具体要做的事</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">executeInternal</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Quartz job is running....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义工作明细与触发器，并绑定对应关系"><a href="#定义工作明细与触发器，并绑定对应关系" class="headerlink" title="定义工作明细与触发器，并绑定对应关系"></a>定义工作明细与触发器，并绑定对应关系</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JobDetail <span class="title function_">printJobDetail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//绑定具体工作</span></span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob(MyQuartz.class).storeDurably().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Trigger <span class="title function_">printTrigger</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//绑定具体的工作明显</span></span><br><span class="line">        ScheduleBuilder&lt;? <span class="keyword">extends</span> <span class="title class_">Trigger</span>&gt; schedBuilder = CronScheduleBuilder.cronSchedule(<span class="string">&quot;0/5 * * * * ?&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> TriggerBuilder.newTrigger().forJob(printJobDetail()).withSchedule(schedBuilder).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spring-task"><a href="#spring-task" class="headerlink" title="spring task"></a>spring task</h3><h4 id="设置开启定时任务功能开关"><a href="#设置开启定时任务功能开关" class="headerlink" title="设置开启定时任务功能开关"></a>设置开启定时任务功能开关</h4><ul><li>在springboot启动类入口使用注解 <strong>@EnableScheduling</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//开启定时任务功能</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">springboot18TaskApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(springboot18TaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设置定时执行的任务"><a href="#设置定时执行的任务" class="headerlink" title="设置定时执行的任务"></a>设置定时执行的任务</h4><ul><li>在方法上直接使用注解来指定要定时执行的任务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置执行时间</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/3 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;spring task is running.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置spring task线程前缀</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">task:</span></span><br><span class="line">    <span class="attr">execution:</span></span><br><span class="line">      <span class="attr">thread-name-prefix:</span> <span class="string">spring_task_</span></span><br></pre></td></tr></table></figure><h3 id="springboot-整合JavaMail"><a href="#springboot-整合JavaMail" class="headerlink" title="springboot 整合JavaMail"></a>springboot 整合JavaMail</h3><h4 id="发送简单邮件"><a href="#发送简单邮件" class="headerlink" title="发送简单邮件"></a>发送简单邮件</h4><ul><li>SMTP(Simple Mail Transfer Protocol):简单邮件传输协议，用于发送电子邮件的传输协议</li><li>POP3(Post Office Protocol -Version3):用于接收电子邮件的标准协议</li><li>IMAP(Internet Mail Access Protocol):互联网消息协议，是POP3的替代协议</li></ul><h5 id="导入对应Javamail坐标"><a href="#导入对应Javamail坐标" class="headerlink" title="导入对应Javamail坐标"></a>导入对应Javamail坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置smtp协议POP3协议"><a href="#配置smtp协议POP3协议" class="headerlink" title="配置smtp协议POP3协议"></a>配置smtp协议POP3协议</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="comment"># 邮件服务器供应商</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.qq.com</span></span><br><span class="line">    <span class="attr">username:</span> <span class="number">2976908</span><span class="string">***@qq.com</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxuchqhavybxde**</span></span><br></pre></td></tr></table></figure><h5 id="设置邮件客户端"><a href="#设置邮件客户端" class="headerlink" title="设置邮件客户端"></a>设置邮件客户端</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMailServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SendMailService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送人</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">from</span> <span class="operator">=</span> <span class="string">&quot;2976908***@qq.com&quot;</span>;</span><br><span class="line">    <span class="comment">//接收人</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">to</span> <span class="operator">=</span> <span class="string">&quot;129577****@qq.com&quot;</span>;</span><br><span class="line">    <span class="comment">//标题</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="string">&quot;测试邮件&quot;</span>;</span><br><span class="line">    <span class="comment">//测试邮件正文</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">context</span> <span class="operator">=</span> <span class="string">&quot;测试邮件正文内容&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender javaMailSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SendMail</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleMailMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>();</span><br><span class="line">        message.setFrom(from);</span><br><span class="line">        message.setTo(to);</span><br><span class="line">        message.setSubject(subject);</span><br><span class="line">        message.setText(context);</span><br><span class="line">        javaMailSender.send(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="发送复杂邮件"><a href="#发送复杂邮件" class="headerlink" title="发送复杂邮件"></a>发送复杂邮件</h4><ul><li>使用MimeMessageHelper对象</li><li>发送html 需要开启 helper.setText(context,true);</li><li>发送附件MimeMessageHelper(message,true);</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMailServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SendMailService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送人</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">from</span> <span class="operator">=</span> <span class="string">&quot;2976908894@qq.com&quot;</span>;</span><br><span class="line">    <span class="comment">//接收人</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">to</span> <span class="operator">=</span> <span class="string">&quot;1295773125@qq.com&quot;</span>;</span><br><span class="line">    <span class="comment">//标题</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="string">&quot;测试邮件&quot;</span>;</span><br><span class="line">    <span class="comment">//测试邮件正文</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">context</span> <span class="operator">=</span> <span class="string">&quot;&lt;a href=&#x27;https://lulyqqqq.github.io/&#x27;&gt;博客&lt;/a&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender javaMailSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SendMail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MimeMessage</span> <span class="variable">message</span> <span class="operator">=</span> javaMailSender.createMimeMessage();</span><br><span class="line">            <span class="type">MimeMessageHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(message,<span class="literal">true</span>);</span><br><span class="line">            helper.setFrom(from);</span><br><span class="line">            helper.setTo(to);</span><br><span class="line">            helper.setSubject(subject);</span><br><span class="line">            helper.setText(context,<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//添加附件</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/main/resources/111.jpg&quot;</span>);</span><br><span class="line">            helper.addAttachment(<span class="string">&quot;图片.jpg&quot;</span>,f1);</span><br><span class="line">            javaMailSender.send(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h2><ul><li>同步消息</li><li>异步消息<ul><li>企业级应用中广泛使用的三种异步消息传递技术<ul><li>JMS(Java message Service):一个规范，等同于JDBC规范，提供了与消息服务相关的API接口   <strong>规范消息相关的API</strong><ul><li>JSM消息模型<ul><li>peer-2-peer:<strong>点对点模型</strong>，消息发送到一个队列中，队列保存消息。队列的消息只能被一个消费者消费，或超时</li><li>publish-subscribe:发布订阅模型，消息可以被多个消费者消费，生产者和消费者完全独立，不需要感知对方的存在</li></ul></li></ul></li><li>AMQP(advanced message queuing protocol):一种协议(高级消息协议，也是消息代理规范)<strong>规范了网络交换的数据格式</strong>，兼容<strong>JMS</strong>  <strong>规范消息传递的格式</strong><ul><li>优点：兼容跨平台性，服务器供应商，生产者，消费者可以使用不同的语言实现</li><li>AMQP消息模型<ul><li>direct exchange</li><li>fanout exchange</li><li>topic exchange</li><li>headers exchange</li><li>system exchange</li></ul></li><li>AMQP消息种类: byte[]  字节数组类型</li><li>AMQP实现：RabbitMQ,StormMQ,RocketMQ</li></ul></li><li>MQIT(Message Queueing Telemetry Transport)消息队列遥测传输，<strong>专为小设备设计</strong>，是物联网(IOT)生态系统中主要成分之一</li><li>Kafka:一种高吞吐量的分布式发布订阅消息系统，提供实时消息功能</li></ul></li></ul></li></ul><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><ul><li>RabbitMQ</li><li>StormMQ</li><li>RocketMQ</li><li>Kafka</li></ul><h3 id="Springboot-整合ActiveMQ"><a href="#Springboot-整合ActiveMQ" class="headerlink" title="Springboot 整合ActiveMQ"></a>Springboot 整合ActiveMQ</h3><h4 id="加入activemq坐标"><a href="#加入activemq坐标" class="headerlink" title="加入activemq坐标"></a>加入activemq坐标</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--activemq--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置activemq"><a href="#配置activemq" class="headerlink" title="配置activemq"></a>配置activemq</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 配置默认的服务地址</span></span><br><span class="line">  <span class="attr">activemq:</span></span><br><span class="line">    <span class="attr">broker-url:</span> <span class="string">tcp://localhost:61616</span></span><br><span class="line">  <span class="comment"># 配置默认保存位置</span></span><br><span class="line">  <span class="attr">jms:</span></span><br><span class="line">    <span class="comment"># 开启true 设置发布订阅模型  false为点对点模型</span></span><br><span class="line">    <span class="attr">pub-sub-domain:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">default-destination:</span> <span class="string">itheima</span></span><br></pre></td></tr></table></figure><h4 id="使用JmsMessagingTemplate对象进行操作"><a href="#使用JmsMessagingTemplate对象进行操作" class="headerlink" title="使用JmsMessagingTemplate对象进行操作"></a>使用JmsMessagingTemplate对象进行操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageServiceActivemqImpl</span> <span class="keyword">implements</span> <span class="title class_">MessageService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SendMessage</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;待发送的短信已纳入处理队列：id = &quot;</span>+id);</span><br><span class="line">        <span class="comment">// 设置存放地址名称</span></span><br><span class="line">        jmsMessagingTemplate.convertAndSend(<span class="string">&quot;order.queue.id&quot;</span>,id);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 在对应地址取出数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> jmsMessagingTemplate.receiveAndConvert(<span class="string">&quot;order.queue.id&quot;</span>,String.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;已完成短信发送业务id = &quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义listener-自动处理消息队列"><a href="#定义listener-自动处理消息队列" class="headerlink" title="定义listener 自动处理消息队列"></a>定义listener 自动处理消息队列</h4><ul><li>@JmsListener(destination &#x3D; “order.queue.id”) @JmsListener注解指定自动解决哪里位置的消息</li><li>@SendTo 自动处理完后， 将方法的返回值 发送到指定的其他队列中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加上JmsListener会直接在接收到信息任务后直接处理，不需要手动进行处理</span></span><br><span class="line">    <span class="meta">@JmsListener(destination = &quot;order.queue.id&quot;)</span></span><br><span class="line">    <span class="meta">@SendTo(&quot;order.queue.other.id&quot;)</span>  <span class="comment">// 自动处理完后， 将方法的返回值 发送到指定的其他队列中</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">receive</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已完成短信发送业务id = &quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;new:&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><ul><li>RabbitMQ基于Erlang语编写，需要安装Erlang</li><li>Erlang<ul><li>需要下载</li><li>安装完成后重启电脑</li></ul></li><li>环境变量配置<ul><li>ERLANG_HOME</li><li>PATH</li></ul></li></ul><h4 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h4><ul><li>官网下载：傻瓜式安装</li></ul><h5 id="启动RabbitMQ"><a href="#启动RabbitMQ" class="headerlink" title="启动RabbitMQ"></a>启动RabbitMQ</h5><ul><li><p>管理员权限启动，在目录下启用cmd输入:rabbitmq-service.bat start</p></li><li><p>停止服务：rabbitmq-service.bat stop</p></li></ul><h5 id="开启RabbitMQ可视化界面"><a href="#开启RabbitMQ可视化界面" class="headerlink" title="开启RabbitMQ可视化界面"></a>开启RabbitMQ可视化界面</h5><ul><li>使用插件形式<ul><li>打开插件：rabbitmq-plugins.bat  enable rabbitmq_management</li><li>使用localhost：15672访问可视化界面</li><li>登录账号和密码：guest</li></ul></li></ul><h3 id="springboot整合Rabbitmq-直连交换机模式"><a href="#springboot整合Rabbitmq-直连交换机模式" class="headerlink" title="springboot整合Rabbitmq 直连交换机模式"></a>springboot整合Rabbitmq 直连交换机模式</h3><p>配置顺序基本相同</p><ul><li>使用web形式产生消息队列信息</li><li><a href="http://localhost:8080/order/1">http://localhost:8080/order/1</a></li></ul><h4 id="导入坐标"><a href="#导入坐标" class="headerlink" title="导入坐标"></a>导入坐标</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--rabbitMQ--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置rabbitmq"><a href="#配置rabbitmq" class="headerlink" title="配置rabbitmq"></a>配置rabbitmq</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 对外的服务端口为5672 管理端口为15672</span></span><br></pre></td></tr></table></figure><h4 id="定义消息队列-交换机-绑定"><a href="#定义消息队列-交换机-绑定" class="headerlink" title="定义消息队列 交换机 绑定"></a>定义消息队列 交换机 绑定</h4><ul><li>一个交换机可以绑定多个队列 处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitConfigDirect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置队列</span></span><br><span class="line"><span class="comment">     * Queue里的三个参数配置</span></span><br><span class="line"><span class="comment">     * durable:是否持久化 默认为false</span></span><br><span class="line"><span class="comment">     * exclusive:是否是当前连接专用 连接关闭后队列删除  默认为false</span></span><br><span class="line"><span class="comment">     * autoDelete:是否自动删除 当上生产者或消费者不再使用此队列 自动删除  默认为true</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">directQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//设置消息队列名称</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;direct_queue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">directExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//设置交换机名称</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;directExchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定消息队列与交换机 起名字为direct</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingDirect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue()).to(directExchange()).with(<span class="string">&quot;direct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生产与消费消息（direct）"><a href="#生产与消费消息（direct）" class="headerlink" title="生产与消费消息（direct）"></a>生产与消费消息（direct）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageRabbitmqDirectImpl</span> <span class="keyword">implements</span> <span class="title class_">MessageService</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SendMessage</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;待发送的短信已纳入处理队列(rabbitmq):id = &quot;</span>+id);</span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">&quot;directExchange&quot;</span>,<span class="string">&quot;direct&quot;</span>,id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用消息监听器对消息队列进行监听"><a href="#使用消息监听器对消息队列进行监听" class="headerlink" title="使用消息监听器对消息队列进行监听"></a>使用消息监听器对消息队列进行监听</h4><ul><li>当有两个或多个监听器监听一个消息队列时，两个监听器是轮换监听</li><li>安装字符串排序监听</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MessageListener</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: mafangnian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022/7/15 22:30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Blog</span>: null</span></span><br><span class="line"><span class="comment"> * 当有两个监听器监听一个消息队列时，两个监听器是轮换监听</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;direct_queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已完成短信发送业务(rabbitmq direct)id = &quot;</span>+id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="springboot整合Rabbitmq-主题交换机模式"><a href="#springboot整合Rabbitmq-主题交换机模式" class="headerlink" title="springboot整合Rabbitmq 主题交换机模式"></a>springboot整合Rabbitmq 主题交换机模式</h3><h4 id="定义消息队列"><a href="#定义消息队列" class="headerlink" title="定义消息队列"></a>定义消息队列</h4><p>可以采用模糊匹配的方式匹配消息队列进行监听器处理</p><p><img src="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/9.png" alt="消息队列"></p><p><img src="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/10.png" alt="匹配规则"></p><h4 id="生产与消费消息（topic）"><a href="#生产与消费消息（topic）" class="headerlink" title="生产与消费消息（topic）"></a>生产与消费消息（topic）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageRabbitmqTopicImpl</span> <span class="keyword">implements</span> <span class="title class_">MessageService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SendMessage</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;待发送的短信已纳入处理队列(rabbitmq topic):id = &quot;</span>+id);</span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">&quot;topicExchange&quot;</span>,<span class="string">&quot;topic&quot;</span>,id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消息监听器监听消息队列"><a href="#消息监听器监听消息队列" class="headerlink" title="消息监听器监听消息队列"></a>消息监听器监听消息队列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听一号消息队列 topic_queue</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;topic_queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已完成短信发送业务(rabbitmq topic)id = &quot;</span>+id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//监听二号消息队列 topic_queue2</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;topic_queue2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive1</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已完成短信发送业务(rabbitmq topic)id = &quot;</span>+id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h4><p>当发消息队列的时候(routingKey)起名遵循了两个消息队列的(routingKey)的模糊条件时，设置了监听器的消息队列匹配成功之后，均执行监听器操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SendMessage</span><span class="params">(String id)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;待发送的短信已纳入处理队列(rabbitmq topic):id = &quot;</span>+id);</span><br><span class="line">    amqpTemplate.convertAndSend(<span class="string">&quot;topicExchange&quot;</span>,<span class="string">&quot;topic.id.orders&quot;</span>,id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">bindingTopic</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(topicQueue()).to(topicExchange()).with(<span class="string">&quot;topic.*.orders&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">bindingTopic2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(topicQueue()).to(topicExchange()).with(<span class="string">&quot;topic.id.*&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h3><h4 id="安装：解压缩"><a href="#安装：解压缩" class="headerlink" title="安装：解压缩"></a>安装：解压缩</h4><ul><li>默认服务端口：9876</li><li>环境变量配置：ROCKETMQ_HOME</li><li>PATH</li><li>NAMESRV_ADDR(建议):127.0.0.1:9876</li></ul><h4 id="启动命名服务器和broker"><a href="#启动命名服务器和broker" class="headerlink" title="启动命名服务器和broker"></a>启动命名服务器和broker</h4><ul><li>配置环境变量完成后直接双击文件<ul><li>命名服务器：mqnamesrv.cmd</li><li>broker服务器：mqbroker.cmd</li></ul></li><li>启动服务器</li></ul><h4 id="测试服务器"><a href="#测试服务器" class="headerlink" title="测试服务器"></a>测试服务器</h4><p>recketmq自带测试程序 需要使用测试的话，在包路径下找对应的测试类</p><ul><li>使用tools org.apache.rocketmq.example.quickstart.Producer （产生若干条消息） 如果服务器有问题，则无法产生</li><li>使用tools org.apache.rocketmq.example.quickstart.Consumer 消费消息</li></ul><h4 id="springboot整合rocketmq"><a href="#springboot整合rocketmq" class="headerlink" title="springboot整合rocketmq"></a>springboot整合rocketmq</h4><p>需要启动rocketmq服务器</p><h5 id="导入坐标-1"><a href="#导入坐标-1" class="headerlink" title="导入坐标"></a>导入坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--rocketmq--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置rocketmq"><a href="#配置rocketmq" class="headerlink" title="配置rocketmq"></a>配置rocketmq</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rocketmq:</span></span><br><span class="line">  <span class="attr">name-server:</span> <span class="string">localhost:9876</span></span><br><span class="line">  <span class="comment"># 设置生产者所属组</span></span><br><span class="line">  <span class="attr">producer:</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">group_rocketmq</span></span><br></pre></td></tr></table></figure><h5 id="设置发送消息对象-RocketMQTemplate"><a href="#设置发送消息对象-RocketMQTemplate" class="headerlink" title="设置发送消息对象 RocketMQTemplate"></a>设置发送消息对象 RocketMQTemplate</h5><p>生产消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageServiceRocketmqImpl</span> <span class="keyword">implements</span> <span class="title class_">MessageService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RocketMQTemplate rocketMQTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SendMessage</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;待发送的短信已纳入处理队列(rocketmq):id = &quot;</span>+id);</span><br><span class="line">        <span class="comment">// 同步消息</span></span><br><span class="line"><span class="comment">//        rocketMQTemplate.convertAndSend(&quot;order_id&quot;,id);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//异步消息产生之后的回调操作 告诉你消息执行情况</span></span><br><span class="line">        <span class="type">SendCallback</span> <span class="variable">callback</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendCallback</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(SendResult sendResult)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;消息发送成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;消息发送失败！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//异步消息</span></span><br><span class="line">        <span class="comment">//三个参数 1.发送的位置即主题名称 2.发送的消息 3.发送后的结果</span></span><br><span class="line">        rocketMQTemplate.asyncSend(<span class="string">&quot;order_id&quot;</span>,id,callback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置监听器-消费消息"><a href="#配置监听器-消费消息" class="headerlink" title="配置监听器 消费消息"></a>配置监听器 消费消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//设置主题名称 消费者所属组</span></span><br><span class="line"><span class="comment">//设置消费者 必须和生产者一个组才能匹配 消费消息 consumerGroup = &quot;group_rocketmq&quot;</span></span><br><span class="line"><span class="meta">@RocketMQMessageListener(topic = &quot;order_id&quot;,consumerGroup = &quot;group_rocketmq&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageListener</span> <span class="keyword">implements</span> <span class="title class_">RocketMQListener</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已完成短信发送业务(rocketmq) = &quot;</span>+id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><ul><li>消息中间件</li></ul><p>安装解压缩：windows建议使用2.x之类的版本 3.x的版本存在bug</p><h4 id="启动Kafka服务器"><a href="#启动Kafka服务器" class="headerlink" title="启动Kafka服务器"></a>启动Kafka服务器</h4><ul><li><p>在Kafka的bin目录下的windows里启动cmd</p><ul><li>先启动注册器，在启动命名服务器</li></ul></li><li><p>启动zookeeper(注册器)</p><ul><li>zookeeper-server-start.bat ..&#x2F;..&#x2F;config&#x2F;zookeeper.properties (需要指定启动的配置文件 在config目录下)</li><li>默认端口：2181</li></ul></li><li><p>启动kafka</p><ul><li>kafka-server-start.bat ..&#x2F;..&#x2F;config&#x2F;server.properties (同样指定配置文件 在config目录下) </li><li>默认端口：9092</li></ul></li></ul><h4 id="测试kafka服务器"><a href="#测试kafka服务器" class="headerlink" title="测试kafka服务器"></a>测试kafka服务器</h4><ul><li>需要自己创建topic来测试<ul><li>创建topic: kafka-topics.bat –zookeeper 127.0.0.1:2181 –create –replication-factor 1 –partitions 1 –topic itheima（最后一个参数设置topic名称）</li></ul></li><li>查看topic<ul><li>kafka-topics.bat –zookeeper 127.0.0.1:2181 –list</li></ul></li><li>测试<ul><li>生产者功能测试<ul><li>kafka-console-producer.bat –broker-list localhost:9092 –topic itheima</li></ul></li><li>消费者功能测试<ul><li>kafka-console-consumer.bat  –bootstrap-server localhost:9092 –topic itheima –from-beginning</li></ul></li></ul></li><li>删除topic<ul><li>kafka-topics.bat –delete –zookeeper localhost:2181 –topic itheima</li></ul></li></ul><h4 id="springboot整合kafka"><a href="#springboot整合kafka" class="headerlink" title="springboot整合kafka"></a>springboot整合kafka</h4><h5 id="导入坐标-2"><a href="#导入坐标-2" class="headerlink" title="导入坐标"></a>导入坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--kafka--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置地址信息"><a href="#配置地址信息" class="headerlink" title="配置地址信息"></a>配置地址信息</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">   <span class="comment"># 指定访问服务器地址</span></span><br><span class="line">    <span class="attr">bootstrap-servers:</span> <span class="string">localhost:9092</span></span><br><span class="line">    <span class="attr">consumer:</span></span><br><span class="line">      <span class="comment"># 配置消费者所属组</span></span><br><span class="line">      <span class="attr">group-id:</span> <span class="string">order</span></span><br></pre></td></tr></table></figure><h5 id="生产消息"><a href="#生产消息" class="headerlink" title="生产消息"></a>生产消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageServiceKafkaImpl</span> <span class="keyword">implements</span> <span class="title class_">MessageService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String,String&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SendMessage</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;待发送的短信已纳入处理队列(kafka):id = &quot;</span>+id);</span><br><span class="line">        kafkaTemplate.send(<span class="string">&quot;itheima&quot;</span>,id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="监听器消费消息"><a href="#监听器消费消息" class="headerlink" title="监听器消费消息"></a>监听器消费消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@KafkaListener(&quot;itheima&quot;)</span> <span class="comment">//指定</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(ConsumerRecord&lt;String,String&gt; record)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已完成短信发送业务id(kafka) = &quot;</span> + record.value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><h3 id="监控的意义"><a href="#监控的意义" class="headerlink" title="监控的意义"></a>监控的意义</h3><ul><li>监控服务状态是否宕机</li><li>监控服务运行指标(内存，虚拟机，线程，请求等)</li><li>监控日志</li><li>管理服务(服务下线)</li></ul><h3 id="监控的实施方式"><a href="#监控的实施方式" class="headerlink" title="监控的实施方式"></a>监控的实施方式</h3><ul><li>显示监控信息的服务器：用于获得服务信息，并显示对应的信息</li><li>运行的服务：启动时主动上报，告知监控服务器自己需要受到监控</li></ul><h3 id="可视化监控平台"><a href="#可视化监控平台" class="headerlink" title="可视化监控平台"></a>可视化监控平台</h3><ul><li><strong>Spring Boot Admin</strong>，开源社区项目，用于管理和监控springboot应用程序。客户端注册到服务端，通过HTTP请求方式，服务端定期从客户端获取对应的信息，并提供ui界面展示对应信息</li><li>平台版本必须和springboot版本相一致</li></ul><p>做成web形式，使用可视化界面查看 配置个web程序端口</p><ul><li>在服务端开启监控服务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//开启监控服务</span></span><br><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot21AdminServerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Springboot21AdminServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建Admin服务端 对应坐标</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置客户端</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>客户端匹配服务端</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="comment"># 谁来监控</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://localhost:8080</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="comment"># 打开所有可查看的配置</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><h3 id="监控原理-—–Actuator"><a href="#监控原理-—–Actuator" class="headerlink" title="监控原理 —–Actuator"></a>监控原理 —–Actuator</h3><ul><li>Actuator提供了SpringBoot生产就绪功能，通过端点的配置与访问，获取端点信息 </li><li>端点描述了一组监控信息，SpringBoot提供了多个内置端点，也可以根据需要自定义端点信息 </li><li>访问当前应用所有端点信息：&#x2F;actuator 访问端点详细信息：&#x2F;actuator&#x2F;端点名称</li></ul><h3 id="端点暴露"><a href="#端点暴露" class="headerlink" title="端点暴露"></a>端点暴露</h3><p>.&#x2F;springboot开发实用篇&#x2F;9</p><p><img src="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/11.png" alt="暴露端点功能"></p><h4 id="Info端点加载数据"><a href="#Info端点加载数据" class="headerlink" title="Info端点加载数据"></a>Info端点加载数据</h4><ul><li>静态数据</li><li>动态数据</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置端点里内容 info 设置内容</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">appName:</span> <span class="string">@02@</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">@9.9@</span></span><br><span class="line">  <span class="attr">company:</span> <span class="string">Good</span> <span class="string">Company</span></span><br><span class="line">  <span class="attr">author:</span> <span class="string">XD</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过spring容器设置数据</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InfoConfig</span> <span class="keyword">implements</span> <span class="title class_">InfoContributor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contribute</span><span class="params">(Info.Builder builder)</span> &#123;</span><br><span class="line">        builder.withDetail(<span class="string">&quot;runTime&quot;</span>,System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/12.png" alt="Spring Boot Admin 可视化界面"></p><h4 id="health端点数据自定义"><a href="#health端点数据自定义" class="headerlink" title="health端点数据自定义"></a>health端点数据自定义</h4><p>继承实现数据自定义</p><p><strong>状态的设置，如果状态不是为up则会影响最终实例的状态</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HealthConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractHealthIndicator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doHealthCheck</span><span class="params">(Health.Builder builder)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        builder.withDetail(<span class="string">&quot;runTime&quot;</span>,System.currentTimeMillis());</span><br><span class="line">        <span class="type">Map</span> <span class="variable">infoMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        infoMap.put(<span class="string">&quot;buildTime&quot;</span>,<span class="string">&quot;2006&quot;</span>);</span><br><span class="line">        builder.withDetails(infoMap);</span><br><span class="line">        <span class="comment">//设置状态</span></span><br><span class="line">        builder.up();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/13.png" alt="自定义health指标"></p><h4 id="性能指标自定义"><a href="#性能指标自定义" class="headerlink" title="性能指标自定义"></a>性能指标自定义</h4><p>执行了多少次结果会在可视化界面上展示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Counter counter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BookServiceImpl</span><span class="params">(MeterRegistry meterRegistry)</span>&#123;</span><br><span class="line"></span><br><span class="line">    counter = meterRegistry.counter(<span class="string">&quot;用户操作付费次数:&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    <span class="comment">//每次执行删除操作相当于执行了一次付费操作</span></span><br><span class="line">    counter.increment();</span><br><span class="line">    <span class="keyword">return</span> bookDao.deleteById(id) &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义监控指标"><a href="#自定义监控指标" class="headerlink" title="自定义监控指标"></a>自定义监控指标</h4><h5 id="自定义端点"><a href="#自定义端点" class="headerlink" title="自定义端点"></a>自定义端点</h5><p>通过<a href="http://localhost:8080/actuator/pay">http://localhost:8080/actuator/pay</a> 访问</p><p>在可视化界面 <strong>Spring Boot Admin</strong>上可以查看</p><p>在使用了这个链接之后页面显示return回来的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Endpoint(id = &quot;pay&quot;,enableByDefault = true)</span> <span class="comment">//通过id访问</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">payEndPoint</span> &#123;</span><br><span class="line">    <span class="meta">@ReadOperation</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getPay</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">payMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        payMap.put(<span class="string">&quot;lever 1&quot;</span>,<span class="number">100</span>);</span><br><span class="line">        payMap.put(<span class="string">&quot;lever 2&quot;</span>,<span class="number">50</span>);</span><br><span class="line">        payMap.put(<span class="string">&quot;lever 3&quot;</span>,<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> payMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结：部分技术尚未掌握，大抵只是通过springboot整合其他技术，了解其他技术大概是怎么样使用，对各个模块有了更深层次的印象；可以加快速度学习，但是笔记总要回顾，需要不定时会看，巩固基础"><a href="#总结：部分技术尚未掌握，大抵只是通过springboot整合其他技术，了解其他技术大概是怎么样使用，对各个模块有了更深层次的印象；可以加快速度学习，但是笔记总要回顾，需要不定时会看，巩固基础" class="headerlink" title="总结：部分技术尚未掌握，大抵只是通过springboot整合其他技术，了解其他技术大概是怎么样使用，对各个模块有了更深层次的印象；可以加快速度学习，但是笔记总要回顾，需要不定时会看，巩固基础"></a>总结：部分技术尚未掌握，大抵只是通过springboot整合其他技术，了解其他技术大概是怎么样使用，对各个模块有了更深层次的印象；可以加快速度学习，但是笔记总要回顾，需要不定时会看，巩固基础</h2><h1 id="开发实用篇告一段落"><a href="#开发实用篇告一段落" class="headerlink" title="开发实用篇告一段落"></a>开发实用篇告一段落</h1>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot运维实用篇</title>
      <link href="/2022/07/04/Springboot%E8%BF%90%E7%BB%B4%E5%AE%9E%E7%94%A8%E7%AF%87/"/>
      <url>/2022/07/04/Springboot%E8%BF%90%E7%BB%B4%E5%AE%9E%E7%94%A8%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="Springboot-运维实用篇"><a href="#Springboot-运维实用篇" class="headerlink" title="Springboot 运维实用篇"></a>Springboot 运维实用篇</h1><p>分为两块程序打包 程序运行</p><h2 id="程序打包"><a href="#程序打包" class="headerlink" title="程序打包"></a>程序打包</h2><p>基于maven工程下的执行maven的生命周期进行package双击运行</p><p> 在target目录下生成工程文件.jar</p><p><img src="/2022/07/04/Springboot%E8%BF%90%E7%BB%B4%E5%AE%9E%E7%94%A8%E7%AF%87/1.png" alt="maven目录结构"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打包必须涵盖springboot自带的打包插件，在执行maven的package才能在cmd窗口正常执行否则会显示找不到主清单 因为两种打包方式压缩的文件数不同，携带的文件资源路径不对</p><p><strong>cmd快速查找80端口是否占用 netstat -nao | findstr “80”</strong></p><p><strong>查看含有字符串80任务列表tasklist | findstr “80”</strong></p><h2 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a>程序运行</h2><h3 id="windows下"><a href="#windows下" class="headerlink" title="windows下"></a>windows下</h3><ul><li>在对应项目工程文件目录下启用终端(cmd)使用java -jar 工程文件.jar 运行查看</li></ul><h3 id="linux下"><a href="#linux下" class="headerlink" title="linux下"></a>linux下</h3><ul><li><p>基于linux安装jdk和mysql的驱动jar</p></li><li><p>在对应的数据库创建相匹配的数据库表</p></li><li><p>将打包好的工厂文件的安装包保存在linux系统&#x2F;usr&#x2F;local&#x2F;自定义目录或$HOME下</p></li><li><p>在对应项目工程文件目录下启用终端(cmd)使用java -jar 工程文件.jar 运行查看</p></li></ul><h2 id="配置高级"><a href="#配置高级" class="headerlink" title="配置高级"></a>配置高级</h2><h3 id="临时属性更换端口"><a href="#临时属性更换端口" class="headerlink" title="临时属性更换端口"></a>临时属性更换端口</h3><p>java -jar 工程文件.jar –server.port&#x3D;端口号</p><p>携带多个属性启动Springboot，属性间使用空格分隔</p><h3 id="配置分级"><a href="#配置分级" class="headerlink" title="配置分级"></a>配置分级</h3><p>config目录下的application配置大于resourses下的application文件</p><p><img src="/2022/07/04/Springboot%E8%BF%90%E7%BB%B4%E5%AE%9E%E7%94%A8%E7%AF%87/2.png" alt="配置文件分级结构"></p><h4 id="配置文件分类"><a href="#配置文件分类" class="headerlink" title="配置文件分类"></a>配置文件分类</h4><h5 id="SpringBoot中4种配置文件"><a href="#SpringBoot中4种配置文件" class="headerlink" title="SpringBoot中4种配置文件"></a>SpringBoot中4种配置文件</h5><p>1，2级的配置文件是写在打包完成后在源项目路径下写的配置</p><p><img src="/2022/07/04/Springboot%E8%BF%90%E7%BB%B4%E5%AE%9E%E7%94%A8%E7%AF%87/3.png" alt="源项目文件夹"></p><p>1级：file:config&#x2F;application.yml(最高)</p><p>2级：file:application.yml</p><p>3级：classpath:config&#x2F;application.yml</p><p>4级：classpath:application.yml(最低)</p><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><ul><li>1级和2级留作系统打开设置通用属性，1常用于运维经理进行线上整体项目部署方案调控</li><li>3级和四级用于系统开发阶段设置通用属性，3级常用于项目经理进行整体项目属性调控</li></ul><h4 id="自定义配置文件"><a href="#自定义配置文件" class="headerlink" title="自定义配置文件"></a>自定义配置文件</h4><p>当配置多个文件时，配置在后面的文件配置生效</p><h2 id="多环境开发"><a href="#多环境开发" class="headerlink" title="多环境开发"></a>多环境开发</h2><h3 id="yml配置文件里配置多环境"><a href="#yml配置文件里配置多环境" class="headerlink" title="yml配置文件里配置多环境"></a>yml配置文件里配置多环境</h3><p>三个分割线把环境区分开</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#应用环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">pro</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 设置环境</span></span><br><span class="line"><span class="comment"># 生产环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 开发环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 测试环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure><p>避免泄露信息 分为四个配置信息</p><p><img src="/2022/07/04/Springboot%E8%BF%90%E7%BB%B4%E5%AE%9E%E7%94%A8%E7%AF%87/4.png" alt="多环境配置"></p><p>properties文件后缀的同上配置</p><h3 id="多环境分组开发"><a href="#多环境分组开发" class="headerlink" title="多环境分组开发"></a>多环境分组开发</h3><p><strong><u>各环境中有相同的配置，在配置的时候后加载的覆盖前加载的</u></strong></p><p>引用多环境需要使用逗号分隔</p><h4 id="单一环境"><a href="#单一环境" class="headerlink" title="单一环境"></a>单一环境</h4><p>dev只是一个环境名称 有各种不同的环境配置</p><p>将原有的yml文件分为出各个属性文件：application.dev.yml application-devDB.yml  application-devMVC.yml </p><p><strong>application.yml里引用配置即可</strong> 使用<strong>include</strong>包含其他配置</p><p>application-devDB.yml：写数据库环境配置</p><p>application-devMVC.yml ：MVC环境配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">    <span class="attr">include:</span> <span class="string">devDB,devMVC</span></span><br></pre></td></tr></table></figure><h4 id="多环境（group-主流）"><a href="#多环境（group-主流）" class="headerlink" title="多环境（group 主流）"></a>多环境（group 主流）</h4><p>使用<strong>group</strong>设定若干环境组 引用哪个环境 自动加载该环境组 </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">    <span class="attr">group:</span> </span><br><span class="line">      <span class="attr">&quot;dev&quot;:</span> <span class="string">devDB,devMVC</span></span><br><span class="line">      <span class="attr">&quot;pro&quot;:</span> <span class="string">proDB,proMVC</span></span><br></pre></td></tr></table></figure><h4 id="多环境开发控制"><a href="#多环境开发控制" class="headerlink" title="多环境开发控制"></a>多环境开发控制</h4><p>maven和springboot都有多环境配置profile</p><p>在pom文件中设置多环境 在pom文件里设置了变量 springboot来读</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置多环境--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置默认环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>当maven与Spirngboot同时对多环境进行控制时，以maven为主，springboot使用@..@占位符读取maven对应的配置属性值</strong></p><p>springboot的yml文件读取</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">@profile.active@</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">&quot;dev&quot;:</span> <span class="string">devDB,devMVC</span></span><br><span class="line">      <span class="attr">&quot;pro&quot;:</span> <span class="string">proDB,proMVC</span></span><br></pre></td></tr></table></figure><p>我们通常是写maven配置为主，让springboot(为辅)来读maven的配置</p><p>基于Springboot读取maven配置属性的前提下，如果在idea测试工程时pom.xml每次更新需要手动compile可生效</p><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h3 id="日志作用"><a href="#日志作用" class="headerlink" title="日志作用"></a>日志作用</h3><ul><li>编程时期调试代码</li><li>运营期记录信息<ul><li>记录日常运营重要信息(峰值流量,平均响应时长….)</li><li>记录应用报错信息(错误堆栈)</li><li>记录运维过程数据(扩容,宕机,报警…..)</li></ul></li></ul><h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><ul><li>trace: 运行堆栈信息，使用率低</li><li>debug：程序员调试代码使用</li><li>info：记录运维过程数据</li><li>warn：记录运维过程报警数据</li><li>error：记录错误堆栈信息</li><li>fatal：灾难信息，合并计入error</li></ul><h3 id="日志使用"><a href="#日志使用" class="headerlink" title="日志使用"></a>日志使用</h3><h4 id="创建日志对象"><a href="#创建日志对象" class="headerlink" title="创建日志对象"></a>创建日志对象</h4><p>引用包文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br></pre></td></tr></table></figure><p>创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建记录日志对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(BookController.class);</span><br></pre></td></tr></table></figure><p>对象调用，日志记录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log.debug(<span class="string">&quot;debug...&quot;</span>);</span><br><span class="line">log.info(<span class="string">&quot;info....&quot;</span>);</span><br><span class="line">log.error(<span class="string">&quot;error...&quot;</span>);</span><br><span class="line">log.warn(<span class="string">&quot;warn...&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="springboot中管理日志级别"><a href="#springboot中管理日志级别" class="headerlink" title="springboot中管理日志级别"></a>springboot中管理日志级别</h4><p>在springboot配置文件中进行配置</p><p>配置日志组，或者代码包的形式对日志进行级别控制</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一般是写全局配置日志</span></span><br><span class="line"><span class="comment"># 开启debug模式，输出调试信息，常用于检查系统状况</span></span><br><span class="line"><span class="attr">debug:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># root设置的大于debug，上面的debug值设置相关于springboot相关的</span></span><br><span class="line"><span class="comment"># root是真个包下的debug</span></span><br><span class="line"><span class="comment"># 设置日志级别，root表示根节点，即对整体应用日志级别</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="comment"># 设置分组来定义日志级别</span></span><br><span class="line">  <span class="attr">group:</span></span><br><span class="line">  <span class="comment"># 分别为哪几个包 </span></span><br><span class="line">    <span class="attr">ebank:</span> <span class="string">包1,包二,包三</span></span><br><span class="line">    <span class="comment"># 服务包的配置</span></span><br><span class="line">    <span class="attr">iservice:</span> <span class="string">com.alibaba</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="comment"># root是全代码的日志级别</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">debug</span></span><br><span class="line">    <span class="comment"># 设置某个包的日志级别</span></span><br><span class="line">    <span class="string">包名:</span> <span class="string">日志级别</span></span><br><span class="line">    <span class="comment"># 设置分组包的日志级别</span></span><br><span class="line">    <span class="attr">ebank:</span> <span class="string">warn</span></span><br></pre></td></tr></table></figure><h4 id="快速开发日志对象"><a href="#快速开发日志对象" class="headerlink" title="快速开发日志对象"></a>快速开发日志对象</h4><h5 id="1-写一个工具类-死板"><a href="#1-写一个工具类-死板" class="headerlink" title="1.写一个工具类(死板)"></a>1.写一个工具类(死板)</h5><p>让基类继承工具类来创建日志对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Class clazz;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  Logger log;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseClass</span><span class="params">()</span>&#123;</span><br><span class="line">        clazz = <span class="built_in">this</span>.getClass();</span><br><span class="line">        log = LoggerFactory.getLogger(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-pom文件中引用lombok，使用注解-Slf4j"><a href="#2-pom文件中引用lombok，使用注解-Slf4j" class="headerlink" title="2.pom文件中引用lombok，使用注解**@Slf4j**"></a>2.pom文件中引用lombok，使用注解**@Slf4j**</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用注解之后产生的日志对象为log，可以快速调用</p><p>减少日志的声明对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="comment">//Rest模式</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SpringBoot is running.....&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;debug...&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;info....&quot;</span>);</span><br><span class="line">        log.error(<span class="string">&quot;error...&quot;</span>);</span><br><span class="line">        log.warn(<span class="string">&quot;warn...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SpringBoot is running.....&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="日志的输出格式"><a href="#日志的输出格式" class="headerlink" title="日志的输出格式"></a>日志的输出格式</h4><p><img src="/2022/07/04/Springboot%E8%BF%90%E7%BB%B4%E5%AE%9E%E7%94%A8%E7%AF%87/5.png" alt="日志输出格式"></p><h4 id="日志的输出格式控制-一般公司定死，自己不需要写"><a href="#日志的输出格式控制-一般公司定死，自己不需要写" class="headerlink" title="日志的输出格式控制(一般公司定死，自己不需要写)"></a>日志的输出格式控制(一般公司定死，自己不需要写)</h4><p>在springboot的配置文件中进行修改</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">设置日志模板格式</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line"><span class="comment">#    console: &quot;%d - %m %n&quot;</span></span><br><span class="line">     <span class="attr">console:</span> <span class="string">&quot;%d %clr(%5p) --- [%16t] %clr(%-40.40c : %m)&#123;cyan&#125; %n&quot;</span></span><br></pre></td></tr></table></figure><p>**%clr(%-40.40c : %m){cyan}**表示：向左对齐截40位的类名</p><p><strong>百分号后带数字加简写字母：代表该位占多少位字符</strong></p><ul><li><p>%clr：颜色显示 给谁用包裹谁，设置颜色是在包裹的括号外加{颜色}</p></li><li><p>%d：日期</p></li><li><p>%m：消息</p></li><li><p>%n：换行</p></li><li><p>%p：日志级别</p></li><li><p>%t：线程名</p></li><li><p>%c：类名</p></li></ul><h4 id="设置日志文件"><a href="#设置日志文件" class="headerlink" title="设置日志文件"></a>设置日志文件</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">  <span class="comment">#设置日志文件名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">server.log</span></span><br></pre></td></tr></table></figure><h5 id="日志文件详细配置"><a href="#日志文件详细配置" class="headerlink" title="日志文件详细配置"></a>日志文件详细配置</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">server.log</span></span><br><span class="line">  <span class="attr">logback:</span></span><br><span class="line">    <span class="comment"># 滚动日志 日志按时间存放 或者 日志文件超出容量再创建新的存储</span></span><br><span class="line">    <span class="attr">rollingpolicy:</span></span><br><span class="line">      <span class="comment"># 规定日志文件容量大小</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">5KB</span></span><br><span class="line">      <span class="comment"># 指定日志文件名称格式</span></span><br><span class="line">      <span class="attr">file-name-pattern:</span> <span class="string">server.%d&#123;yyyy-MM-dd&#125;.%i.log</span></span><br></pre></td></tr></table></figure><h1 id="运维篇告一段落"><a href="#运维篇告一段落" class="headerlink" title="运维篇告一段落"></a>运维篇告一段落</h1>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC框架</title>
      <link href="/2022/07/03/MVC%E6%A1%86%E6%9E%B6/"/>
      <url>/2022/07/03/MVC%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="MVC框架模式与SpringMVC框架"><a href="#MVC框架模式与SpringMVC框架" class="headerlink" title="MVC框架模式与SpringMVC框架"></a>MVC框架模式与SpringMVC框架</h1><p><strong>框架通常是代码重用，而设计模式是设计重用。</strong></p><p><strong>框架的介绍：</strong><a href="https://blog.csdn.net/qq_36827957/article/details/78515403">https://blog.csdn.net/qq_36827957/article/details/78515403</a></p><p>MVC: Model View Controller 模型-视图-控制器</p><p>视图：用户看到并与之交互的界面。</p><p>模型：表示<strong>企业数据和业务规则</strong>。在MVC的3个部件中，模型拥有最多的处理任务。被模型返回的数据是独立的，与数据格式无关。这样的一个模式能够为多个视图提供数据，这样一来模型的代码只需要写一次便能够被多个视图重用，减少了代码的重复性。</p><p>控制器：接受用户的输入并调用相应的模型和视图来完成用户的需求，所以当用户点击web页面中的超链接和发送表单时，控制器本身不输出任何东西和做任何处理。它只是接收请求并根据请求来调用哪个模型去处理请求，然后在决定用哪个视图来显示返回的数据</p><h3 id="SpringMVC框架"><a href="#SpringMVC框架" class="headerlink" title="SpringMVC框架"></a><a href="https://so.csdn.net/so/search?q=SpringMVC&spm=1001.2101.3001.7020">SpringMVC</a>框架</h3><h4 id="1-1-SpringMVC简介"><a href="#1-1-SpringMVC简介" class="headerlink" title="1.1 SpringMVC简介"></a>1.1 SpringMVC简介</h4><p><strong>springMVC框架是基于Java的实现了MVC框架模式的请求驱动类型的轻量级框架</strong>。前端控制器是DispatcherServlet接口实现类，映射处理器是HandlerMapping接口实现类，视图解析器是ViewResolver接口实现类，页面控制器是Controller接口实现类。SpringMVC的工作流程图如下：<img src="/2022/07/03/MVC%E6%A1%86%E6%9E%B6/1.png" alt="img"></p><p>（1）客户端请求提交到前端控制器DispatcherServlet；<br>（2）前端控制器DispatcherServlet查找一个或者多个映射处理器HandlerMapping，从而确定调用哪个页面控制器Controller对请求进行处理；<br>（3）DispatcherServlet将请求提交给Controller；<br>（4）Controller根据业务逻辑对请求进行处理，并返回ModelAndView；<br>（5）DispatcherServlet查找一个或者多个ViewResolver，得到ModelAndView指定的视图view，并将model中的数据传入视图view中进行渲染；<br>（6）DispatcherServlet将渲染后的视图返回响应；</p><p>由上述过程可见，DispatcherServlet是Spring MVC的核心，它负责协调SpringMVC的各个组成部分对所有的Http请求进行处理，其主要工作如下：<br>（1）截获符合特定格式的Http请求；<br>（2）初始化DispatcherServlet上下文对应的WebApplicationContext，并将其与业务层、持久层的WebApplicationContext关联起来；<br>（3）初始化Spring MVC的各个组件，并装配到DispatcherServlet中；</p><h4 id="1-2-SpringMVC框架中的接口"><a href="#1-2-SpringMVC框架中的接口" class="headerlink" title="1.2 SpringMVC框架中的接口"></a>1.2 SpringMVC框架中的接口</h4><p>DispatcherServlet接口：Spring提供的前端控制器，所有的请求都是由它来进行分发。在DispatcherServlet将请求分发到对应的Controller之前，需要借助Spring提供的HandlerMapping才能定位到相应的Controller.</p><p>HandlerMapping接口：完成客户请求到Controller的映射。</p><p>Controller接口：需要为并发用户处理请求，在实现Controller接口时，必须保证线程安全且可重用。<br>在Controller完成用户请求的处理，返回ModelAndView对象给DispatcherServlet，ModelAndView对象中包含了模型Model和视图View。<br>从宏观角度进行考虑，DispatcherServlet是整个Web应用的控制器；从微观角度进行考虑，Controller是单个Http请求处理过程的控制器。</p><p>ViewResolver接口：根据ModelAndView对象在web应用查找view视图，并将model中是数据传入到view视图中进行渲染。</p><h4 id="1-3-SpringMVC框架优势"><a href="#1-3-SpringMVC框架优势" class="headerlink" title="1.3 SpringMVC框架优势"></a>1.3 SpringMVC框架优势</h4><p>（1）角色清晰，分工明确，进行更简介的web开发；<br>（2）和其他Spring框架无缝集成；<br>（3）强大的JSP标签库；<br>（4）HandlerMapping, ViewResolver等能够简单地进行定制；</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot基础篇</title>
      <link href="/2022/07/03/Springboot%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2022/07/03/Springboot%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot基础篇"><a href="#Spring-Boot基础篇" class="headerlink" title="Spring Boot基础篇"></a>Spring Boot基础篇</h1><h2 id="Restful风格"><a href="#Restful风格" class="headerlink" title="Restful风格"></a>Restful风格</h2><h3 id="REST开发"><a href="#REST开发" class="headerlink" title="REST开发"></a>REST开发</h3><p>REST，表现形式状态切换</p><ul><li><p>传统风格资源描述形式</p><p><a href="http://localhost/user/getById?id=1">http://localhost/user/getById?id=1</a></p><p><a href="http://localhost/user/saveUser">http://localhost/user/saveUser</a></p></li><li><p>REST风格描述形式</p><p><a href="http://localhost/user/1">http://localhost/user/1</a></p><p><a href="http://localhost/user">http://localhost/user</a></p></li></ul><p>优点：</p><ul><li>隐藏资源的访问行为，无法通过地址得知对资源是何种操作</li><li>书写简化</li></ul><p><strong>@RestController</strong>:将当前控制器类设置为RESTful风格，等同于@Controller与@ResponseBody两个注解组合功能</p><p><a href="https://cloud.tencent.com/developer/article/1046622">SpringMVC 常用注解 - 云+社区 - 腾讯云 (tencent.com)</a></p><p>将请求参数放入请求路径中，再由注解**@PathVariable**(“对应请求参数的名称”) 从而获得相对应的值，有多个参数就多个使用</p><p><a href="https://restfulapi.cn/">RESTful API 一种流行的 API 设计风格</a></p><p>Restful原则：行为操作(资源的访问形式)</p><ul><li>增：post请求    <strong>@PostMapping</strong></li><li>删：delete请求 <strong>@DeleteMapping</strong></li><li>改：put请求      <strong>@PutMapping</strong></li><li>查：get请求       <strong>@GetMapping</strong></li></ul><p>一般来说请求路径不要出现动词</p><p>分页，排序等操作，不需要使用斜杠传参，一般传的参数不是数据库表的字段，可以不采用斜杠</p><h3 id="RequestBody-RequestParam-PathVariable"><a href="#RequestBody-RequestParam-PathVariable" class="headerlink" title="@RequestBody  @RequestParam  @PathVariable"></a>@RequestBody  @RequestParam  @PathVariable</h3><ul><li>区别<ul><li>@RequestParam 用于接收url地址传参或者表单传参</li><li>@RequestBody用于接收json数据</li><li>@PathVariable用于接收路径参数，使用{参数名称}描述路径参数</li></ul></li><li>应用<ul><li>后期开发中，发送请求参数超过1个时，以json格式为主，@RequestBody 应用较广</li><li>如果发送非json格式数据，选用@RequestParam接收请求参数</li><li>采用RESTful进行开发，当参数较少时，例如1个，可以采用@PathVariable接收请求路径变量，通常用于传递id值</li></ul></li></ul><h2 id="springboot应用"><a href="#springboot应用" class="headerlink" title="springboot应用"></a>springboot应用</h2><p>springboot是简化Spring应用的初始搭建和开发过程  springboot简化了依赖的配置</p><p><a href="https://www.cnblogs.com/fishpro/p/spring-boot-study-restcontroller.html">Spring Boot Web 开发@Controller @RestController 使用教程 - fishpro - 博客园 (cnblogs.com)</a></p><p>将spring的配置文件和spring-mvc配置简化了</p><p>springboot的配置文件中 pom文件的继承父类的文件，父类的文件里规定了dependency坐标依赖的最好版本 自动配置</p><h3 id="starter和parent"><a href="#starter和parent" class="headerlink" title="starter和parent"></a>starter和parent</h3><ul><li>starter<ul><li>springboot中常见的项目名称，定义了当前项目使用的所有依赖坐标，以达到减少依赖配置的目的</li></ul></li><li>parent<ul><li>所有SpringBoot项目要继承的项目，定义了若干个坐标版本号(依赖管理，而非依赖)，以达到减少依赖冲突的目的</li><li>spring-boot-starter-parent各版本间存在着诸多坐标版本不同</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>实际开发    GAV(G:groupId A:artifactId V:version)<ul><li>使用任意坐标时，仅写GAV中的G和A，V由SpringBoot提供，除非SpringBoot为提供对应版本V</li><li>如果发生坐标错误，则需要手动指定Version(但要小心版本冲突)</li></ul></li></ul><h3 id="引导类"><a href="#引导类" class="headerlink" title="引导类"></a>引导类</h3><p>SpringBoot的引导类是Boot工厂的执行入口，通过mian方法就可以启动项目</p><p>加载spring容器 默认扫描对应包及其子包的内容 实例bean 放入spring容器</p><p><img src="/2022/07/03/Springboot%E5%9F%BA%E7%A1%80%E7%AF%87/1.png" alt="层次"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootQuickApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringbootQuickApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内嵌tomcat-springboot支持切换web服务器"><a href="#内嵌tomcat-springboot支持切换web服务器" class="headerlink" title="内嵌tomcat(springboot支持切换web服务器)"></a>内嵌tomcat(springboot支持切换web服务器)</h3><p>在pom文件里引入的spring-boot-starter-web里自动加载tomcat服务器</p><p>tomcat的本质是用java语言编写的执行过程 现在SpringBoot将tomcat的执行过程<strong>封装成一个对象</strong>放入spring容器里，需要使用web程序直接引用tomcat对象，从而在tomcat上执行，所以SpringBoot不用配置tomcat服务器也可以使用tomcat</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>变更内嵌服务器：是将现有的服务器去除，添加全新的服务器</p><p>SpringBoot可以支持切换内置服务器有三个</p><ul><li>tomcat(默认)        apache出品，<strong>应用面广</strong>，负载若干较重的组件</li><li>jetty                       <strong>更轻量级</strong>，可扩展性更高，负载性能远不及tomcat</li><li>undertow             负载性能<strong>勉强</strong>跑赢tomcat</li></ul><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="复制工程-快速新建模块"><a href="#复制工程-快速新建模块" class="headerlink" title="复制工程(快速新建模块)"></a>复制工程(快速新建模块)</h3><ul><li>原则<ul><li>保留工程基础结构</li><li>抹掉原始工程痕迹</li></ul></li></ul><p>在工作空间里复制对应工程，兵修改过程名称</p><p>删除与Idea相关的配置文件，仅保留src目录和pom文件</p><p>修改pom文件中的artifactId与新工程&#x2F;模块名相同</p><p>保留备份后期使用</p><p>springboot配置文件(三种)：</p><ul><li><strong>application.properties</strong> （主导）使用key-value的格式</li></ul><p>server.port&#x3D;80</p><ul><li><strong>application.yml(主流)</strong></li></ul><p>server:</p><p>​    port: 80</p><ul><li><strong>application.yaml</strong>(配置同上)</li></ul><p>不同配置文件中相同配置按照加载优先级相互覆盖，不同配置文件中不同配置全部保留</p><h3 id="yml配置文件里属性"><a href="#yml配置文件里属性" class="headerlink" title="yml配置文件里属性"></a>yml配置文件里属性</h3><h4 id="使用-Value注解读取单个属性"><a href="#使用-Value注解读取单个属性" class="headerlink" title="使用@Value注解读取单个属性"></a>使用@Value注解读取单个属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;country&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String country1;</span><br></pre></td></tr></table></figure><h4 id="使用-Autowired获得全部属性"><a href="#使用-Autowired获得全部属性" class="headerlink" title="使用@Autowired获得全部属性"></a>使用@Autowired获得全部属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自动装配 yml配置文件里的全部属性</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment env;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env.getProperty(<span class="string">&quot;user.name&quot;</span>)</span><br></pre></td></tr></table></figure><p>加载实体的get set方法使用<strong>lombok</strong>里注解**@Data<strong>自动加载，需要在pom文件加入</strong>lombok**的坐标</p><p>将一个类转换为bean用spring注解：**@Component**将其转换为bean并放入spring容器里</p><p>获得yml指定区域数据：**@ConfigurationProperties(prefix&#x3D;”字段名”)**</p><h2 id="springboot整合junit"><a href="#springboot整合junit" class="headerlink" title="springboot整合junit"></a>springboot整合junit</h2><p> 测试类需要在启动类的包或子包中，可以省略启动类的设置，也就是省略calsses的设定</p><p>否则需要使用**@SpringBootTest(calsses &#x3D; 启动类名)**注解来查找</p><p>SpringBoot整合junit相当于spring整合junit</p><p><strong>spring整合junit是 使用@RunWith()+ContextConfiguration(calsses &#x3D; 启动类名)</strong></p><p>**而springboot是使用@SpringBootTest(calsses &#x3D; 启动类名)**注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = Springboot03JunitApplication.class)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot03JunitApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="springboot整合mybatis"><a href="#springboot整合mybatis" class="headerlink" title="springboot整合mybatis"></a>springboot整合mybatis</h2><p>在yml配置文件里添加配置数据库的相对应信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置相关信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">   <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nian0209</span></span><br></pre></td></tr></table></figure><p>创建实体类domain和dao实现操作数据库的方法    注意：<strong>实体类名应该和数据库的字段名一致</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot04MybatisApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里虽是接口的注入但实际注入的对象是实现类的对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(bookDao.getById(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="至于在controller层上使用的service的接口而不是实现类"><a href="#至于在controller层上使用的service的接口而不是实现类" class="headerlink" title="至于在controller层上使用的service的接口而不是实现类"></a>至于在controller层上使用的service的接口而不是实现类</h2><p>因为通过**@Autowired<strong>的对象是通过接口的方式会使用</strong>jdk的动态代理**，jdk的动态代理针对接口产生代理，动态的产生实现类的对象，在注入到spring容器里也是实现类的对象 这样使用jdk代理的方式动态的生成接口的实现类，还可以实现对实现类的增强从而做到增强类</p><h3 id="一个接口里有多个实现类"><a href="#一个接口里有多个实现类" class="headerlink" title="一个接口里有多个实现类"></a>一个接口里有多个实现类</h3><p><a href="https://dalin.blog.csdn.net/article/details/116573967?spm=1001.2101.3001.6650.13&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-13-116573967-blog-102260648.pc_relevant_antiscanv2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-13-116573967-blog-102260648.pc_relevant_antiscanv2&utm_relevant_index=15"> Spring中如Service有多个实现类，它怎么知道该注入哪个ServiceImpl类？_Java知音_的博客-CSDN博客</a></p><p>@Primary：自动装配时当出现多个Bean候选者时，被注解为@Primary的Bean将作为首选者，否则将抛出异常 </p><p>@Autowired 默认按类型装配，如果我们想使用按名称装配，可以结合@Qualifier注解一起使用</p><p> @Autowired</p><p>@Qualifier(“personDaoBean”) 存在多个实例配合使用</p><p>在service层使用@Service(名称)来将实现方法带名称的注入到spring容器里</p><p>使用@Autowired自动注入，</p><p>**@Qualifier(“beanId”)**：beanId是指对应实现类的类名称且字母开头小写</p><ul><li><strong>方法一：</strong> Controller中注入service的时候使用**@Autowired**自动注入，<code>@Qualifier(&quot;beanId&quot;)</code>来指定注入哪一个。</li><li><strong>方法二：</strong> Controller中注入service的时候使用<code>@Resource(type = 类名.class)</code>来指定注入哪一个。</li><li><strong>方法三：</strong><ul><li>每个service的impl都可以指定名称（使用<code>@Service（“名称”）</code>）</li><li>Controller中注入service的时候使用名称来指定注入哪一个（使用<code>@Resource(name=&quot;名称&quot;)</code>）</li></ul></li></ul><p><strong>@Autowired注解的意思就是:</strong></p><p>当Spring发现<code>@Autowired</code>注解时，将自动在代码上下文中找到和其匹配（默认是类型匹配）的Bean，并自动注入到相应的地方去。</p><p><code>@Resource</code>的作用相当于<code>@Autowired</code>。</p><p><strong>@Autowired和@Resource两个注解的区别：</strong></p><p>1.<code>@Autowired</code>是Spring的注解，<code>@Resource</code>是J2EE的注解，这个看一下导入注解的时候这两个注解的包名就一清二楚了。</p><p>2.<code>@Autowired</code>默认按照byType(方法类型)方式进行bean匹配，<code>@Resource</code>默认按照byName(方法名称)方式进行bean匹配。</p><p>3.@Autowired默认情况下必须要求依赖对象必须存在，如果要允许null值，可以设置它的required属性为false，如：<code>@Autowired(required=false)</code>。</p><h2 id="springboot整合MyBatis-Plus"><a href="#springboot整合MyBatis-Plus" class="headerlink" title="springboot整合MyBatis-Plus"></a>springboot整合MyBatis-Plus</h2><ul><li>MyBatis-plus与MyBatis区别<ul><li>导入坐标不同</li><li>数据层实现简化</li></ul></li></ul><p>手动导入MP坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="springboot整合Druid"><a href="#springboot整合Druid" class="headerlink" title="springboot整合Druid"></a>springboot整合Druid</h2><p>导入Druid对应的starter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在yml配置文件中配置druid数据源</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Druid整合</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">   <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">druid:</span></span><br><span class="line">         <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">         <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line">         <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">         <span class="attr">password:</span> <span class="string">nian0209</span></span><br></pre></td></tr></table></figure><h1 id="SSMP整合案例"><a href="#SSMP整合案例" class="headerlink" title="SSMP整合案例"></a>SSMP整合案例</h1><p>基于springboot</p><ul><li>案列方案分析<ul><li>实体类开发—使用lombok快速制作实体类</li><li>Dao开发—整合MyBatisPlus，制作数据层测试类</li><li>Service开发—基于MyBatisPlus进行增量开发，制作业务层测试类</li><li>Controller开发—基于Restful开发，使用PostMan进行接口测试</li><li>Controller开发—前后端开发协议制作(前后端数据交换形式)</li><li>页面开发—基于VUE+ElementUI制作，前后端联调，页面数据处理，页面消息处理<ul><li>列表，新增，修改，删除，分页，查询</li></ul></li><li>项目异常处理</li><li>按条件查询—页面功能调整，Controller修正功能，Service修正功能</li></ul></li></ul><h2 id="准备步骤"><a href="#准备步骤" class="headerlink" title="准备步骤"></a>准备步骤</h2><p>勾选springweb 和 mysql对应坐标 </p><p>修改配置文件为yml格式并设置端口并设置自动增长的属性 开启日志</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line"><span class="comment">#      设置id自增</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>使用MP快速的查看分页的数据，但是需要指定spring拦截器 在使用语句前也需要传入分页对应的参数—-(第几页，几条数据)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">bookDao.selectPage(page,<span class="literal">null</span>);</span><br><span class="line"> <span class="comment">//打印当前页内数据</span></span><br><span class="line">System.out.println(page.getRecords());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MPConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用拦截器创建分页</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//定义MP拦截器</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//添加具体的拦截器</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span>  interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>使用QueryWrapper则需要自己去写对应匹配查询的字段，使用LambdaQueryWrapper则直接get就行了</p><p>like方法里可以添加判断条件：不为空的时候才执行条件查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按条件查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testBy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    QueryWrapper&lt;Book&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.like(<span class="literal">true</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;学&quot;</span>);</span><br><span class="line">    bookDao.selectList(queryWrapper);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按条件查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testBy2</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    LambdaQueryWrapper&lt;Book&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    lambdaQueryWrapper.like(name!=<span class="literal">null</span>,Book::getName,name);</span><br><span class="line">    bookDao.selectList(lambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层-快速开发"><a href="#业务层-快速开发" class="headerlink" title="业务层-快速开发"></a>业务层-快速开发</h2><p>实现Service接口和实现类</p><p>使用MyBatisPlus提供业务层通用接口(IService<T>)与业务层通用实现类(ServiceImpl&lt;M,T&gt;)</T></p><p>在通用类基础上做功能重载或追加</p><p>注意重载时不要覆盖原始操作，避免原始提供的功能丢失—–可以在方法名上添加@Override查看有无重名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IBookService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Book&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IBookServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;BookDao, Book&gt; <span class="keyword">implements</span> <span class="title class_">IBookService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="表现层展示"><a href="#表现层展示" class="headerlink" title="表现层展示"></a>表现层展示</h2><p>接收参数：</p><p>实体数据：@RequestBody</p><p>路径变量：@PathVariable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IBookService bookService;</span><br><span class="line"><span class="comment">//查</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.list();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//增</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.save(book);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//改</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.modify(book);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//删</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//查</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表现层信息一致性处理"><a href="#表现层信息一致性处理" class="headerlink" title="表现层信息一致性处理"></a>表现层信息一致性处理</h3><p>设计表现层返回结果的模型类，用于后端和前端进行数据格式统一，也称为前后端数据协议</p><p>flag：代表查询是否成功</p><p>data：存放数据</p><p>同意表现层数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> flag;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">    R()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">(Boolean flag)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.flag =flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">(Boolean flag,Object data)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">(Boolean flag,String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前后端-页面"><a href="#前后端-页面" class="headerlink" title="前后端 页面"></a>前后端 页面</h2><p>前后端协议联调</p><ul><li>前后端分离结构设计在页面归属前端服务器</li><li>单体工程页面在resoures目录下的static目录中(建议执行clean)</li></ul><p>发送异步请求，调用后端接口</p><p>axios.get(“&#x2F;books”).then((res)&#x3D;&gt;{</p><p>​数据连接</p><p>});</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>自定义springmvc的异常处理类来处理异常 在类上添加@RestControllerAdvice定义restful风格异常处理类且返回的数据给前端也需要和</p><p>前后端数据协议一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//作为springmvc的异常处理器</span></span><br><span class="line"><span class="comment">//@ControllerAdvice</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//拦截所有的异常信息</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">doException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        <span class="comment">//记录日志</span></span><br><span class="line">        <span class="comment">//通知运维</span></span><br><span class="line">        <span class="comment">//通知开发</span></span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="string">&quot;服务器故障，请稍后再试！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件查询-1"><a href="#条件查询-1" class="headerlink" title="条件查询"></a>条件查询</h2><p>分页部分的条件查询是根据v-model动态模型，在分页的基础上动态的添加查询数据，一起传到后端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="title function_">getAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//组织参数，拼接url请求地址</span></span><br><span class="line">    <span class="comment">// console.log(this.pagination.type);</span></span><br><span class="line">    param = <span class="string">&quot;?type=&quot;</span>+<span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">type</span>;</span><br><span class="line">    param +=<span class="string">&quot;&amp;name=&quot;</span>+<span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">name</span>;</span><br><span class="line">    param +=<span class="string">&quot;&amp;description=&quot;</span>+<span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">description</span>;</span><br><span class="line">    <span class="comment">// console.log(param);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送异步请求</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/books/&quot;</span>+<span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">currentPage</span>+<span class="string">&quot;/&quot;</span>+<span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">pageSize</span>+param).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">pageSize</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">size</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">currentPage</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">current</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">total</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">total</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dataList</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">records</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>service层判断条件查询有无值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(<span class="type">int</span> currentPage, <span class="type">int</span> pageSize, Book book)</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Book&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;Book&gt;();</span><br><span class="line">    lqw.like(Strings.isNotEmpty(book.getType()),Book::getType,book.getType());</span><br><span class="line">    lqw.like(Strings.isNotEmpty(book.getName()),Book::getName,book.getName());</span><br><span class="line">    lqw.like(Strings.isNotEmpty(book.getDescription()),Book::getDescription,book.getDescription());</span><br><span class="line">    <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(currentPage,pageSize);</span><br><span class="line">    bookDao.selectPage(page,lqw);</span><br><span class="line">    <span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="elementUI"><a href="#elementUI" class="headerlink" title="elementUI"></a>elementUI</h2><p>分页插件</p><p>分页bug：一页中只有一个数据的时候。删除这个数据后当前页不会有信息展示，例如：原来有三页，删除了一页中只有一个数据的时候，系统还是在查删除完了那页，所以不会显示数据</p><p>解决方法：一般是在后台判断当前页是不是比总页数大，为true则返回最大页数数据  ———–但这也还是有bug</p><p>较好的解决方法是直接返回第一页</p><p>根本：根据需求修改</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--分页组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pagination-container&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;pagiantion&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">            @<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">            <span class="attr">:current-page</span>=<span class="string">&quot;pagination.currentPage&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">            <span class="attr">:page-size</span>=<span class="string">&quot;pagination.pageSize&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">            <span class="attr">layout</span>=<span class="string">&quot;total, prev, pager, next, jumper&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">            <span class="attr">:total</span>=<span class="string">&quot;pagination.total&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@GetMapping(&quot;&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">getPage</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> currentPage,<span class="meta">@PathVariable</span> <span class="type">int</span> pageSize,Book book)</span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;参数==&gt;&quot;+book);</span></span><br><span class="line"></span><br><span class="line">        IPage&lt;Book&gt; page = bookService.getPage(currentPage, pageSize,book);</span><br><span class="line">        <span class="comment">//如果当前页码值大于了总页码值，那么重新执行查询操作，使用最大页码值作为当前页码值</span></span><br><span class="line">        <span class="keyword">if</span>( currentPage &gt; page.getPages())&#123;</span><br><span class="line">            page = bookService.getPage((<span class="type">int</span>)page.getPages(), pageSize,book);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="literal">true</span>, page);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在对应的实体类中，如果数据库和实体类的字段是驼峰命名MP会将其转化为下划线形式，如果需要对应有三种办法</p><ul><li><p>将数据库表字段改为下划线形式</p></li><li><p>在实体类字段上添加@tableFiled(“字段名”)</p></li><li><p>在yml配置文件中的mybatis-pus添加</p></li><li><pre><code class="yml">mybatis-plus:  configuration:    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl    map-underscore-to-camel-case: false #关闭驼峰映射</code></pre></li></ul><p>实体类有主键的需要在实体类主键字段头添加@TableId(type &#x3D; IdType.AUTO（自增长类型）)</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-Plus</title>
      <link href="/2022/07/02/MyBatis-Plus/"/>
      <url>/2022/07/02/MyBatis-Plus/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis-Plus"></a>MyBatis-Plus</h1><p><a href="https://baomidou.com/pages/24112f/#%E7%89%B9%E6%80%A7">简介 | MyBatis-Plus (baomidou.com)</a></p><h2 id="MyBatis-plus-MyBatis"><a href="#MyBatis-plus-MyBatis" class="headerlink" title="MyBatis-plus +MyBatis"></a>MyBatis-plus +MyBatis</h2><p>简单的整合mybatis里操作数据库的方法</p><ul><li>将对应的Mapper对象继承BaseMapper<T>(使其能调用BaseMpper里的操作方法)</T></li><li>使用MyBatis-plus 的方式产生SqlSessionFactory</li><li>最后调用BaseMapper的方法操作数据库</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUserList</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">            <span class="comment">//这里使用的是MP中的MybatisSqlSessionFactoryBuilder</span></span><br><span class="line">            MybatisSqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">// 可以调用BaseMapper中定义的方法</span></span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子项目都继承了父项目来引用mybatis-plus</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MyBatis-plus-Spring"><a href="#MyBatis-plus-Spring" class="headerlink" title="MyBatis-plus +Spring"></a>MyBatis-plus +Spring</h2><p>整合Spring+MyBatis-plus主要是解析数据源，将配置信息写在spring的配置文件中</p><p>pom文件中需要导入spring的mybatis-plus的配置</p><p><artifactId>itcast-mybatis-plus-spring</artifactId></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--扫描配置源    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:*.properties&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里使用MP提供的sqlSessionFactory，完成了Spring与MP的整合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--扫描mapper接口，使用的依然是Mybatis原生的扫描器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cn.itcast.mp.simple.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring也是同样引用mybatis-plus</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Springboot-Mybatis-plus"><a href="#Springboot-Mybatis-plus" class="headerlink" title="Springboot+Mybatis-plus"></a>Springboot+Mybatis-plus</h2><p>需要在application.yml的配置文件中配置数据源，而其他的映射或者扫描器springboot已经注解封装完成不需要自己重复写</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置数据源</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">   <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nian0209</span></span><br></pre></td></tr></table></figure><p>pom文件里springboot项目需要引用父类文件</p><p><strong><u>spring-boot-starter-parent</u></strong> 里面封装了springboot项目的启动对应的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引用mybatis-plus需要引用springboot对应的mybatis-plus配置信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="BaseMapper提供的CRUD"><a href="#BaseMapper提供的CRUD" class="headerlink" title="BaseMapper提供的CRUD"></a>BaseMapper提供的CRUD</h3><h4 id="TableField"><a href="#TableField" class="headerlink" title="@TableField"></a>@TableField</h4><p>在MP中通过@TableField注解可以指定字段的一些属性，常常解决的问题有2个：<br>1、对象中的属性名和字段名不一致的问题（非驼峰）<br>2、对象中的属性字段在表中不存在的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span> <span class="comment">//指定数据库表名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span> <span class="comment">//主键自增长</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@TableField(select = false)</span> <span class="comment">//查询不显示详细值</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField(value = &quot;email&quot;)</span> <span class="comment">//字段名不一样</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> String address; <span class="comment">//该字段在数据库中不存在</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h4><p>在MP中，更新操作有2种，一种是根据id更新，另一种是根据条件更新</p><h5 id="根据id更新"><a href="#根据id更新" class="headerlink" title="根据id更新"></a>根据id更新</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id更新</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateById</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">6L</span>); <span class="comment">//主键</span></span><br><span class="line">        user.setAge(<span class="number">21</span>); <span class="comment">//更新的字段</span></span><br><span class="line">        <span class="comment">//根据id更新，更新不为null的字段</span></span><br><span class="line">        <span class="built_in">this</span>.userMapper.updateById(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="根据条件更新"><a href="#根据条件更新" class="headerlink" title="根据条件更新"></a>根据条件更新</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据条件更新</span></span><br><span class="line"><span class="comment">//QueryWrapper进行更新 封装成对象 匹配条件进行更新</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setAge(<span class="number">22</span>); <span class="comment">//更新的字段</span></span><br><span class="line">    <span class="comment">//更新的条件</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;id&quot;</span>, <span class="number">6</span>);</span><br><span class="line">    <span class="comment">//执行更新操作</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.update(user, wrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//UpdateWrapper进行更新 可以设置set---更新内容的操作</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//更新的条件以及字段</span></span><br><span class="line">    UpdateWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;id&quot;</span>, <span class="number">6</span>).set(<span class="string">&quot;age&quot;</span>, <span class="number">23</span>);</span><br><span class="line">    <span class="comment">//set的字段是数据库表字段</span></span><br><span class="line">    <span class="comment">//执行更新操作</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.update(<span class="literal">null</span>, wrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><h5 id="根据id删除deleteById"><a href="#根据id删除deleteById" class="headerlink" title="根据id删除deleteById"></a>根据id删除deleteById</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//执行删除操作</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.deleteById(<span class="number">6L</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="根据条件删除deleteByMap"><a href="#根据条件删除deleteByMap" class="headerlink" title="根据条件删除deleteByMap"></a>根据条件删除deleteByMap</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByMap</span><span class="params">()</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; columnMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    columnMap.put(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    columnMap.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    <span class="comment">//将columnMap中的元素设置为删除的条件，多个之间为and关系</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.deleteByMap(columnMap);</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h5><p>更加情况分为两种不同参数的删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//用法一:</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;user_name&quot;</span>,<span class="string">&quot;caocao&quot;</span>).eq(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用法二:</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUserName(<span class="string">&quot;caocao&quot;</span>);</span><br><span class="line">    user,setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.delete(wrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="deleyeBetchIds"><a href="#deleyeBetchIds" class="headerlink" title="deleyeBetchIds"></a>deleyeBetchIds</h5><p>批量删除 传入的参数需要是一个数组类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//根据id集合批量删除</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.deleteBatchIds(Arrays.asList(<span class="number">1L</span>,<span class="number">10L</span>,<span class="number">20L</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h4><h5 id="根据id查询selectById"><a href="#根据id查询selectById" class="headerlink" title="根据id查询selectById"></a>根据id查询selectById</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//根据id查询数据</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.selectById(<span class="number">2L</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="根据数组集合查询数据"><a href="#根据数组集合查询数据" class="headerlink" title="根据数组集合查询数据"></a>根据数组集合查询数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectBatchIds</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//根据id集合批量查询</span></span><br><span class="line">    List&lt;User&gt; users = <span class="built_in">this</span>.userMapper.selectBatchIds(Arrays.asList(<span class="number">2L</span>, <span class="number">3L</span>, <span class="number">10L</span>));</span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="根据条件查询一条数据selectOne"><a href="#根据条件查询一条数据selectOne" class="headerlink" title="根据条件查询一条数据selectOne"></a>根据条件查询一条数据selectOne</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectOne</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    <span class="comment">//根据条件查询一条数据，如果结果超过一条会报错</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.selectOne(wrapper);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="根据条件查询总记录数"><a href="#根据条件查询总记录数" class="headerlink" title="根据条件查询总记录数"></a>根据条件查询总记录数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectCount</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    wrapper.gt(<span class="string">&quot;age&quot;</span>, <span class="number">23</span>); <span class="comment">//年龄大于23岁</span></span><br><span class="line">    <span class="comment">//根据条件查询数据条数</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.selectCount(wrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;count = &quot;</span> + count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="分页查询selectPage"><a href="#分页查询selectPage" class="headerlink" title="分页查询selectPage"></a>分页查询selectPage</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 entity 条件，查询全部记录（并翻页）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page 分页查询条件（可以为 RowBounds.DEFAULT）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">IPage&lt;T&gt; <span class="title function_">selectPage</span><span class="params">(IPage&lt;T&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure><p>需要进行分页必须写一个mybatis提供的分页插件</p><p><strong>MybatisPlusInterceptor</strong> MybatisPlus的分页拦截器</p><p>MybatisPlus自带的分页插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//标记为配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MPConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectPage</span><span class="params">()</span> &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//分页条件</span></span><br><span class="line">      QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">      wrapper.gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>); <span class="comment">//年龄大于20岁</span></span><br><span class="line">      </span><br><span class="line">      Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>,<span class="number">1</span>);<span class="comment">//参数1:第几页，参数二：每页但是条数据</span></span><br><span class="line"><span class="comment">//根据条件查询数据</span></span><br><span class="line">      IPage&lt;User&gt; iPage = <span class="built_in">this</span>.userMapper.selectPage(page, wrapper);</span><br><span class="line">      System.out.println(<span class="string">&quot;数据总条数：&quot;</span> + iPage.getTotal());</span><br><span class="line">      System.out.println(<span class="string">&quot;总页数：&quot;</span> + iPage.getPages());</span><br><span class="line">      </span><br><span class="line">      List&lt;User&gt; users = iPage.getRecords();<span class="comment">//获得当前页集合数据</span></span><br><span class="line">      <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="QueryWrapper各参数"><a href="#QueryWrapper各参数" class="headerlink" title="QueryWrapper各参数"></a>QueryWrapper各参数</h3><p><img src="/2022/07/02/MyBatis-Plus/1.png" alt="参数"></p><h3 id="SQL注入原理"><a href="#SQL注入原理" class="headerlink" title="SQL注入原理"></a>SQL注入原理</h3><p>MP在启动后会将BaseMapper中的一系列的方法注册到meppedStatements中</p><p>在MP中，ISqlInjector负责SQL的注入工作，它是一个接口，AbstractSqlInjector是它的实现类</p><p><img src="/2022/07/02/MyBatis-Plus/2.png" alt="img"></p><p>在AbstractSqlInjector中，主要是由inspectInject()方法进行注入的，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inspectInject</span><span class="params">(MapperBuilderAssistant builderAssistant, Class&lt;?&gt;</span></span><br><span class="line"><span class="params">        mapperClass)</span> &#123;</span><br><span class="line">    Class&lt;?&gt; modelClass = extractModelClass(mapperClass);</span><br><span class="line">    <span class="keyword">if</span> (modelClass != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> mapperClass.toString();</span><br><span class="line">        Set&lt;String&gt; mapperRegistryCache =</span><br><span class="line">                GlobalConfigUtils.getMapperRegistryCache(builderAssistant.getConfiguration());</span><br><span class="line">        <span class="keyword">if</span> (!mapperRegistryCache.contains(className)) &#123;</span><br><span class="line">            List&lt;AbstractMethod&gt; methodList = <span class="built_in">this</span>.getMethodList();</span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isNotEmpty(methodList)) &#123;</span><br><span class="line">                <span class="type">TableInfo</span> <span class="variable">tableInfo</span> <span class="operator">=</span> TableInfoHelper.initTableInfo(builderAssistant,</span><br><span class="line">                        modelClass);</span><br><span class="line">                <span class="comment">// 循环注入自定义方法</span></span><br><span class="line">                methodList.forEach(m -&gt; m.inject(builderAssistant, mapperClass,</span><br><span class="line">                        modelClass, tableInfo));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.debug(mapperClass.toString() + <span class="string">&quot;, No effective injection method</span></span><br><span class="line"><span class="string">                        was found.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            mapperRegistryCache.add(className);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实现方法中， methodList.forEach(m -&gt; m.inject(builderAssistant, mapperClass, modelClass,<br>tableInfo)); 是关键，循环遍历方法，进行注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注入自定义 MappedStatement</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mapperClass mapper 接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> modelClass mapper 泛型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tableInfo 数据库表反射信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> MappedStatement</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> MappedStatement <span class="title function_">injectMappedStatement</span><span class="params">(Class&lt;?&gt; mapperClass, Class&lt;?</span></span><br><span class="line"><span class="params">        &gt; modelClass, TableInfo tableInfo)</span>;</span><br></pre></td></tr></table></figure><h1 id="后置内容再添加"><a href="#后置内容再添加" class="headerlink" title="后置内容再添加"></a>后置内容再添加</h1>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis-Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>期末复习</title>
      <link href="/2022/06/18/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
      <url>/2022/06/18/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="期末考试"><a href="#期末考试" class="headerlink" title="期末考试"></a>期末考试</h1><h3 id="大多以背为主"><a href="#大多以背为主" class="headerlink" title="大多以背为主"></a>大多以背为主</h3><h3 id="分个时间段"><a href="#分个时间段" class="headerlink" title="分个时间段"></a>分个时间段</h3><h4 id="1-18-19号主要是复习毛概-大英-大学生心理健康-抽空看一下-设计模式"><a href="#1-18-19号主要是复习毛概-大英-大学生心理健康-抽空看一下-设计模式" class="headerlink" title="1. 18 19号主要是复习毛概 大英 大学生心理健康 抽空看一下 设计模式"></a>1. 18 19号主要是复习毛概 大英 大学生心理健康 抽空看一下 设计模式</h4><h5 id="毛概"><a href="#毛概" class="headerlink" title="毛概"></a>毛概</h5><p>复习pdf文档 混个眼熟为主</p><h5 id="大学生心理健康"><a href="#大学生心理健康" class="headerlink" title="大学生心理健康"></a>大学生心理健康</h5><p>查看学习通上课程选择题 眼熟为主</p><h5 id="大英"><a href="#大英" class="headerlink" title="大英"></a>大英</h5><p>背诵U1-5的txtA课后习题</p><p>记牢对应单词匹配</p><p>无听了</p><h4 id="2-22号上午复习设计模式-以国王游戏-糖果-解释器模式为主"><a href="#2-22号上午复习设计模式-以国王游戏-糖果-解释器模式为主" class="headerlink" title="2. 22号上午复习设计模式 以国王游戏 糖果  解释器模式为主"></a>2. 22号上午复习设计模式 以国王游戏 糖果  解释器模式为主</h4><p>设计模式复习文档 大概率出原题 </p><h4 id="3-23号复习linux"><a href="#3-23号复习linux" class="headerlink" title="3. 23号复习linux"></a>3. 23号复习linux</h4><p>主要为课堂ppt</p><h4 id="4-25号考计算机组成原理"><a href="#4-25号考计算机组成原理" class="headerlink" title="4. 25号考计算机组成原理"></a>4. 25号考计算机组成原理</h4><p>计组开卷 适当复习即可</p><h4 id="5-26号复习数据库"><a href="#5-26号复习数据库" class="headerlink" title="5. 26号复习数据库"></a>5. 26号复习数据库</h4><p>复习期末大纲 要回看平时作业 数据库范式和er图绘制</p>]]></content>
      
      
      <categories>
          
          <category> 状态 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> day 3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java命名规范</title>
      <link href="/2022/06/16/Java%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
      <url>/2022/06/16/Java%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA命名规范"><a href="#JAVA命名规范" class="headerlink" title="JAVA命名规范"></a>JAVA命名规范</h1><p><strong>JAVA编码规范</strong></p><p>1 <strong>目的</strong></p><p>为了保证所每个项目组编写出的程序都符合相同的规范，便于理解和维护，便于检查、减少出错概率，有助于成员间交流，保证一致性、统一性而建立的java程序编码规范。</p><p>2 <strong>范围</strong></p><p>该规范适用于所有基于JAVA开发的项目。</p><p>3 <strong>规范内容</strong></p><p><strong>3.1 命名规范</strong></p><p><strong>包(package)命名</strong></p><ol><li><p>package名字必须由小写字母组成的英文单词或拼音组成</p></li><li><p>英文单词或拼音的含义必须能够大致表示该package的用途</p></li><li><p>多个单词或拼音的构成命名，第一个单词(可缩写)全部小写，第二个单词(可缩写)的首字母必须大写，其余字母小写</p></li><li><p>所有的package都必须使用com.philwong.package1Name的命名结构</p></li></ol><p><strong>类(class)命名</strong></p><ol><li><p>Class命名必须由大写字母开头，后面的字母由小写字母组成的英文单词或拼音组成</p></li><li><p>英文单词或拼音的含义必须能够大致表示该class的用途</p></li><li><p>多个单词或拼音的构成命名，第一个单词或拼音(可缩写)全部小写，第二个单词或拼音(可缩写)的首字母必须大写，其余字母小写</p></li><li><p>servlet 类必须使用类名 + Servlet的结构</p></li><li><p>实体类(entity class)必须使用实体名称的英文单词或拼音命名</p></li><li><p>实体管理类(entity Manager)必须使用实体名称的英文单词或拼音+Manager的结构</p></li><li><p>仅返回结果集的用于数据库查询的servlet使用dso + 英文单词或拼音 + Servlet</p></li><li><p>用于初始化服务器或数据库或者在服务器启动时执行的servlet使用init + 英文单词或拼音 + Servlet</p></li><li><p>返回业务逻辑的servlet使用logic + 英文单词或拼音 + Servlet</p></li></ol><p><strong>类变量和常量的命名</strong></p><ol><li><p>类变量和常量的命名必须使用小写字母构成的英文单词或拼音</p></li><li><p>多个单词或拼音的构成命名，第一个单词(可缩写)全部小写，第二个单词(可缩写)的首字母必须大写，其余字母小写</p></li><li><p>静态变量的命名必须使用static标示</p></li><li><p>必须使用protect、public、private标示类变量和常量；缺省可省略的public标示符也必须注明，不能省略</p></li><li><p>常量命名全部使用大写字母构成的英文单词和拼音</p></li><li><p>同名类变量或常量使用变量名或者常量命的英文单词或拼音+下划线+阿拉伯数字构成用于区分</p></li></ol><p><strong>参数命名</strong></p><ol><li><p>参数的命名必须使用小写字母构成的英文单词或拼音</p></li><li><p>多个单词或拼音的构成命名，第一个单词(可缩写)全部小写，第二个单词(可缩写)的首字母必须大写，其余字母小写</p></li><li><p>同名参数的英文单词或拼音+下划线+阿拉伯数字构成用于区分</p></li><li><p>参数命名必须能够标示其含义</p></li></ol><p><strong>数组命名</strong></p><ol><li><p>数组必须使用小写字母构成的英文单词或拼音+[ ]</p></li><li><p>多个单词或拼音的构成命名，第一个单词(可缩写)全部小写，第二个单词(可缩写)的首字母必须大写，其余字母小写</p></li><li><p>数组总是使用：String arrary[ ] 命名，而不是 String[] array</p></li><li><p>数组命名必须能够标示其含义</p></li></ol><p><strong>方法的命名</strong></p><ol><li><p>方法必须使用小写字母构成的英文单词或拼音</p></li><li><p>多个单词或拼音的构成命名，第一个单词(可缩写)全部小写，第二个单词(可缩写)的首字母必须大写，其余字母小写</p></li><li><p>方法的命名必须能够标示其含义</p></li><li><p>静态方法必须使用static标示</p></li><li><p>必须使用protect、public、private标示方法；缺省可省略的public标示符也必须注明，不能省略</p></li></ol><p><strong>其它相关文件的命名</strong></p><p>(jsp文件、javaScript文件、图片文件、css文件、xml文件、DTD文件、xsl文件、属性配置文件、HTML文件)</p><ol><li><p>文件的命名必须使用小写字母构成的英文单词或拼音</p></li><li><p>多个单词或拼音的构成命名，第一个单词(可缩写)全部小写，第二个单词(可缩写)的首字母必须大写，其余字母小写</p></li><li><p>文件的命名必须能够标示其含义</p></li><li><p>属性配置文件名后缀使用 *.property</p></li><li><p>jsp文件的</p></li></ol><p><strong>HTML相关对象的命名</strong></p><ol><li><p>命名必须使用小写字母构成的英文单词或拼音</p></li><li><p>多个单词或拼音的构成命名，第一个单词(可缩写)全部小写，第二个单词(可缩写)的首字母必须大写，其余字母小写</p></li><li><p>命名必须能够标示其含义</p></li><li><p>field： fld + 单词或拼音</p></li><li><p>textArea：ta + 单词或拼音</p></li><li><p>checkbox: cb + 单词或拼音</p></li><li><p>radioBox: rb + + 单词或拼音</p></li><li><p>image : img + 单词或拼音</p></li><li><p>link : lk + 单词或拼音</p></li><li><p>hiddenFileld : hiddenFld + 单词或拼音</p></li><li><p>pullDownSelection: ps + 单词或拼音</p></li><li><p>horizonLine: hl + 单词或拼音</p></li><li><p>button : btn + 单词或拼音</p></li><li><p>imageButton : imgBtn + 单词或拼音</p></li><li><p>banner : ban + 单词或拼音</p></li></ol><p><strong>3.2 文件样式规范</strong></p><p><strong>版权信息</strong></p><p>&#x2F;**</p><p>*Copyright 2003 电子计算技术研究所</p><p>*All Right Reserved</p><p>*Author ：作者姓名</p><p>*编码日期格式：YYYY-MM-DD</p><p>*&#x2F;</p><p><strong>package&#x2F;import</strong></p><p>package行要在import之前，import中标准的包名要在本地的包名之前，而且字母顺序排列；如果import行中包括同一包中的不同子目录，则应该使用*来处理;二者之间应该空一行</p><p>package com.philwong.system.configManager;</p><p>import com.philwong.philwongException.*;</p><p>import java.io.*;</p><p>import java.util.Observable;</p><p><strong>类注释和类定义</strong></p><p>类注释用于解释类的结构和主要功能</p><p>&#x2F;**</p><p>*编码实现的功能简要描述以及注意事项</p><ul><li></li></ul><p>*&#x2F;</p><p>类定义：</p><p>public configManager</p><p>extend Property</p><p>implements Cloneable {</p><p>}</p><p><strong>成员变量</strong></p><p>public 类型的成员变量必须做出注释说明;同一变量类型定义在一起；不同类型变量之间空一行</p><p>&#x2F;**</p><p>*配置文件的文件名和路径</p><p>*&#x2F;</p><p>public String fileName &#x3D; “”;</p><p>public String filePath &#x3D; “”;</p><p>protected java.sql.Date createdDate &#x3D; null;</p><p>…</p><p><strong>成员变量存取方法(不是必需的)</strong></p><p>&#x2F;**</p><p>*成员变量存取方法注释说明</p><p>*&#x2F;</p><p>public String getFileName(){ return filename };</p><p>…</p><p><strong>构造函数</strong></p><p>构造函数采取递增的方式，参数多的放在后面</p><p>public configManager() {</p><p>..</p><p>}</p><p>public configManager(String fileName) {</p><p>..</p><p>}</p><p>public configManager(String filename,String filePath) {</p><p>..</p><p>}</p><p><strong>成员方法</strong></p><ol><li><p>每一个类尽可能都定义一个toString()方法</p></li><li><p>如果有main()方法，那么应该放在类的底部</p></li><li><p>每个方法之间空一行</p></li></ol><p><strong>修改注释说明</strong></p><p><strong>&#x2F;*</strong>*</p><p>*****修改说明：</p><p>*****修改人： 修改日期：</p><p>*****修改原因：</p><p>***&#x2F;**</p><p>public setFilePath(String filePath) {</p><p>&#x2F;&#x2F;old code remark line 124</p><p>&#x2F;&#x2F;this.filePath &#x3D; filePath;</p><p>&#x2F;&#x2F;new code 126 –130</p><p>if (filePath &#x3D; &#x3D; null) {</p><p>this.filePath &#x3D; “”;</p><p>} else {</p><p>this.filePath &#x3D; filePath;</p><p>}</p><p>}</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Day 2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BS CS架构了解</title>
      <link href="/2022/06/16/BS-CS%E6%9E%B6%E6%9E%84%E4%BA%86%E8%A7%A3/"/>
      <url>/2022/06/16/BS-CS%E6%9E%B6%E6%9E%84%E4%BA%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="B-x2F-S-C-x2F-S架构了解"><a href="#B-x2F-S-C-x2F-S架构了解" class="headerlink" title="B&#x2F;S C&#x2F;S架构了解"></a>B&#x2F;S C&#x2F;S架构了解</h1><p><a href="https://blog.csdn.net/sea_snow/article/details/81187804"> 深入理解B&#x2F;S与C&#x2F;S架构_雪飞_海的博客-CSDN博客_b&#x2F;s架构</a></p><p>一、什么是C&#x2F;S架构<br>C&#x2F;S架构是第一种比较早的软件架构，主要用于局域网内。也叫 客户机&#x2F;服务器模式。</p><p>它可以分为客户机和服务器两层：</p><p>第一层:  在客户机系统上结合了界面显示与业务逻辑；</p><p>第二层:  通过网络结合了数据库服务器。</p><p>简单的说就是第一层是用户表示层，第二层是数据库层。</p><p>　 这里需要补充的是，客户端不仅仅是一些简单的操作，它也是会处理一些运算，业务逻辑的处理等。也就是说，客户端也做着一些本该由服务器来做的一些事情，如图所示：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvMTA0NjA3NS8yMDE3MTEvMTA0NjA3NS0yMDE3MTEwMzEzMjExOTE4NS0yMDk2MzA0NDY4LnBuZw?x-oss-process=image/format,png" alt="img"></p><p>C&#x2F;S架构软件有一个特点，就是如果用户要使用的话，需要下载一个客户端，安装后就可以使用。比如QQ,OFFICE软件等。</p><p>1、C&#x2F;S架构的优点：</p><p>1 C&#x2F;S架构的界面和操作可以很丰富。（客户端操作界面可以随意排列，满足客户的需要）</p><p>2 安全性能可以很容易保证。（因为只有两层的传输，而不是中间有很多层。</p><p>3 由于只有一层交互，因此响应速度较快。（直接相连，中间没有什么阻隔或岔路，比如QQ，每天那么多人在线，也不觉得慢）</p><p>2、C&#x2F;S架构的缺点：</p><p>可以将QQ作为类比：</p><p>1 适用面窄，通常用于局域网中。</p><p>2 用户群固定。由于程序需要安装才可使用，因此不适合面向一些不可知的用户。</p><p>3 维护成本高，发生一次升级，则所有客户端的程序都需要改变。</p><p>二、什么是B&#x2F;S架构<br>B&#x2F;S架构的全称为Browser&#x2F;Server，即浏览器&#x2F;服务器结构。</p><p>Browser指的是Web浏览器，极少数事务逻辑在前端实现，但主要事务逻辑在服务器端实现。</p><p>B&#x2F;S架构的系统无须特别安装，只有Web浏览器即可。</p><p>其实就是我们前端现在做的一些事情，大部分的逻辑交给后台来实现，我们前端大部分是做一些数据渲染，请求等比较少的逻辑。</p><p>B&#x2F;S架构的分层：</p><p>与C&#x2F;S架构只有两层不同的是，B&#x2F;S架构有三层，分别为：</p><p>第一层表现层：主要完成用户和后台的交互及最终查询结果的输出功能。</p><p>第二层逻辑层：主要是利用服务器完成客户端的应用逻辑功能。</p><p>第三层数据层：主要是接受客户端请求后独立进行各种运算。</p><p>如图所示：</p><p><img src="https://img-blog.csdnimg.cn/20200118143816483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NlYV9zbm93,size_16,color_FFFFFF,t_70" alt="img"></p><p>B&#x2F;S架构的优点：</p><p>1、客户端无需安装，有Web浏览器即可。<br>2、BS架构可以直接放在广域网上，通过一定的权限控制实现多客户访问的目的，交互性较强。<br>3、BS架构无需升级多个客户端，升级服务器即可。可以随时更新版本，而无需用户重新下载啊什么的。</p><p>B&#x2F;S架构的缺点：</p><p>1、在跨浏览器上，BS架构不尽如人意。<br>2、表现要达到CS程序的程度需要花费不少精力。<br>3、在速度和安全性上需要花费巨大的设计成本，这是BS架构的最大问题。<br>4、客户端服务器端的交互是请求-响应模式，通常需要刷新页面，这并不是客户乐意看到的。（在Ajax风行后此问题得到了一定程度的缓解）</p><p>三、B&#x2F;S架构的几种形式<br>第一种：客户端-服务器-数据库</p><p><img src="https://img-blog.csdnimg.cn/20200118152126513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NlYV9zbm93,size_16,color_FFFFFF,t_70" alt="img"></p><p>这个应该是我们平时比较常用的一种模式：</p><p>1、客户端向服务器发起Http请求</p><p>2、服务器中的web服务层能够处理Http请求</p><p>3、服务器中的应用层部分调用业务逻辑，调用业务逻辑上的方法</p><p>4、如果有必要，服务器会和数据库进行数据交换. 然后将模版＋数据渲染成最终的Html, 返送给客户端</p><p>第二种：客户端－web服务器－应用服务器－数据库</p><p><img src="https://img-blog.csdnimg.cn/20200118151926798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NlYV9zbm93,size_16,color_FFFFFF,t_70" alt="img"></p><p> 类似于第一种方法，只是将web服务和应用服务解耦</p><p>1 客户端向web服务器发起Http请求</p><p>2 web服务能够处理Http请求，并且调用应用服务器暴露在外的RESTFUL接口</p><p>3 应用服务器的RESTFUL接口被调用，会执行对应的暴露方法.如果有必要和数据库进行数据交互，应用服务器会和数据库进行交互后，将json数据返回给web服务器</p><p>4 web服务器将模版＋数据组合渲染成html返回给客户端</p><p>第三种方法：客户端－负载均衡器(Nginx)－中间服务器(Node)－应用服务器－数据库</p><p>这种模式一般用在有大量的用户，高并发的应用中。<img src="https://img-blog.csdnimg.cn/20200118152234550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NlYV9zbm93,size_16,color_FFFFFF,t_70" alt="img"></p><p>1、整正暴露在外的不是真正web服务器的地址，而是负载均衡器器的地址</p><p>2、客户向负载均衡器发起Http请求</p><p>3、负载均衡器能够将客户端的Http请求均匀的转发给Node服务器集群</p><p>4、Node服务器接收到Http请求之后，能够对其进行解析，并且能够调用应用服务器暴露在外的RESTFUL接口</p><p>5、应用服务器的RESTFUL接口被调用，会执行对应的暴露方法.如果有必要和数据库进行数据交互，应用服务器会和数据库进行交互后，将json数据返回给Node</p><p>6、Node层将模版＋数据组合渲染成html返回反向代理服务器</p><p>7、反向代理服务器将对应html返回给客户端</p><p>Nginx的优点有:</p><p>1、它能够承受、高并发的大量的请求，然后将这些请求均匀的转发给内部的服务器，分摊压力.</p><p>2、反向代理能够解决跨域引起的问题，因为Nginx，Node,应用服务器，数据库都处于内网段中。</p><p>3、Nginx非常擅长处理静态资源(img,css,js,video)，所以也经常作为静态资源服务器，也就是我们平时所说的CDN</p><p>　　比如：前一个用户访问index.html, 经过Nginx－Node－应用服务器－数据库链路之后，Nginx会把index.html返回给用户，并且会把index.html缓存在Nginx上，</p><p>　　下一个用户再想请求index.html的时候，请求Nginx服务器，Nginx发现有index.html的缓存，于是就不用去请求Node层了，会直接将缓存的页面(如果没过期的话)返回给用户。</p><p>四、发展前景</p><p>1、 C&#x2F;S和B&#x2F;S各有优势，C&#x2F;S在图形的表现能力上以及运行的速度上肯定是强于B&#x2F;S模式的，不过缺点就是他需要运行专门的客户端，而且更重要的是它不能跨平台，用c++在windows下写的程序肯定是不能在linux下跑的。</p><p>2、B&#x2F;S模式就，它不需要专门的客户端，只要浏览器，而浏览器是随操作系统就有的，方便就是他的优势了。<br>而且，B&#x2F;S是基于网页语言的、与操作系统无关，所以跨平台也是它的优势，而且以后随着网页语言以及浏览器的进步，<br>B&#x2F;S在表现能力上的处理以及运行的速度上会越来越快，它的缺点将会越来越少。尤其是HTML5的普及，在图形的渲染方面以及音频、文件的处理上已经非常强大了。 </p>]]></content>
      
      
      <categories>
          
          <category> 交流架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Day 2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应状态码</title>
      <link href="/2022/06/16/%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81/"/>
      <url>/2022/06/16/%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="一、状态码大类"><a href="#一、状态码大类" class="headerlink" title="一、状态码大类"></a>一、状态码大类</h2><table><thead><tr><th>状态码分类</th><th>说明</th></tr></thead><tbody><tr><td>1xx</td><td><strong>响应中</strong>——临时状态码，表示请求已经接受，告诉客户端应该继续请求或者如果它已经完成则忽略它</td></tr><tr><td>2xx</td><td><strong>成功</strong>——表示请求已经被成功接收，处理已完成</td></tr><tr><td>3xx</td><td><strong>重定向</strong>——重定向到其它地方：它让客户端再发起一个请求以完成整个处理。</td></tr><tr><td>4xx</td><td><strong>客户端错误</strong>——处理发生错误，责任在客户端，如：客户端的请求一个不存在的资源，客户端未被授权，禁止访问等</td></tr><tr><td>5xx</td><td><strong>服务器端错误</strong>——处理发生错误，责任在服务端，如：服务端抛出异常，路由出错，HTTP版本不支持等</td></tr></tbody></table><p>状态码大全：<a href="https://cloud.tencent.com/developer/chapter/13553">https://cloud.tencent.com/developer/chapter/13553</a> </p><h2 id="二、常见的响应状态码"><a href="#二、常见的响应状态码" class="headerlink" title="二、常见的响应状态码"></a>二、常见的响应状态码</h2><table><thead><tr><th>状态码</th><th>英文描述</th><th>解释</th></tr></thead><tbody><tr><td>200</td><td><strong><code>OK</code></strong></td><td>客户端请求成功，即<strong>处理成功</strong>，这是我们最想看到的状态码</td></tr><tr><td>302</td><td><strong><code>Found</code></strong></td><td>指示所请求的资源已移动到由<code>Location</code>响应头给定的 URL，浏览器会自动重新访问到这个页面</td></tr><tr><td>304</td><td><strong><code>Not Modified</code></strong></td><td>告诉客户端，你请求的资源至上次取得后，服务端并未更改，你直接用你本地缓存吧。隐式重定向</td></tr><tr><td>400</td><td><strong><code>Bad Request</code></strong></td><td>客户端请求有<strong>语法错误</strong>，不能被服务器所理解</td></tr><tr><td>403</td><td><strong><code>Forbidden</code></strong></td><td>服务器收到请求，但是<strong>拒绝提供服务</strong>，比如：没有权限访问相关资源</td></tr><tr><td>404</td><td><strong><code>Not Found</code></strong></td><td><strong>请求资源不存在</strong>，一般是URL输入有误，或者网站资源被删除了</td></tr><tr><td>428</td><td><strong><code>Precondition Required</code></strong></td><td><strong>服务器要求有条件的请求</strong>，告诉客户端要想访问该资源，必须携带特定的请求头</td></tr><tr><td>429</td><td><strong><code>Too Many Requests</code></strong></td><td><strong>太多请求</strong>，可以限制客户端请求某个资源的数量，配合 Retry-After(多长时间后可以请求)响应头一起使用</td></tr><tr><td>431</td><td><strong><code> Request Header Fields Too Large</code></strong></td><td><strong>请求头太大</strong>，服务器不愿意处理请求，因为它的头部字段太大。请求可以在减少请求头域的大小后重新提交。</td></tr><tr><td>405</td><td><strong><code>Method Not Allowed</code></strong></td><td>请求方式有误，比如应该用GET请求方式的资源，用了POST</td></tr><tr><td>500</td><td><strong><code>Internal Server Error</code></strong></td><td><strong>服务器发生不可预期的错误</strong>。服务器出异常了，赶紧看日志去吧</td></tr><tr><td>503</td><td><strong><code>Service Unavailable</code></strong></td><td><strong>服务器尚未准备好处理请求</strong>，服务器刚刚启动，还未初始化好</td></tr><tr><td>511</td><td><strong><code>Network Authentication Required</code></strong></td><td><strong>客户端需要进行身份验证才能获得网络访问权限</strong></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> web页面响应 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Day 2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2022/06/15/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/06/15/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="标语"><a href="#标语" class="headerlink" title="标语"></a>标语</h1><h2 id="记录我的第一篇博客-开设编写对fluid主题的配置进行完善"><a href="#记录我的第一篇博客-开设编写对fluid主题的配置进行完善" class="headerlink" title="记录我的第一篇博客 开设编写对fluid主题的配置进行完善"></a>记录我的第一篇博客 开设编写对fluid主题的配置进行完善</h2><p>我的第一篇博客</p><ul><li>学习fluid主题配置的更新</li><li>完善对对应图片更换</li><li>学习博客的使用</li></ul>]]></content>
      
      
      <categories>
          
          <category> first blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Day 1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/06/07/hello-world/"/>
      <url>/2022/06/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
