<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git精通</title>
      <link href="/2022/07/23/Git%E7%B2%BE%E9%80%9A/"/>
      <url>/2022/07/23/Git%E7%B2%BE%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="Git精通-—-git分布式版本控制工具"><a href="#Git精通-—-git分布式版本控制工具" class="headerlink" title="Git精通 — git分布式版本控制工具"></a>Git精通 — git分布式版本控制工具</h1><p><a href="https://zhuanlan.zhihu.com/p/30044692">Git使用教程,最详细，最傻瓜，最浅显，真正手把手教 - 知乎 (zhihu.com)</a></p><p><strong>查看了黑马的markdown笔记已经博主塞班呢的笔记并借助了相关图片</strong></p><p><a href="https://blog.csdn.net/a18307096730/article/details/124586216?spm=1001.2014.3001.5502"> Git（分布式版本控制工具）_塞班呢的博客-CSDN博客_git是什么工具</a></p><h2 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h2><p>在官网下载并安装git工具 </p><p>Git Gui:Git提供的图形界面更具</p><p>Git Bash:Git提供的命令行工具</p><p>在用户目录下新建文件.bashrc配置git相关内容</p><hr><p>用于输出git提交日志</p><p>alias git-log&#x3D;’git log –pretty&#x3D;oneline –all –graph –abbrev-commit’</p><p>用于输出当前目录所有文件寄基本信息</p><p>alias ll&#x3D;’ls -al’</p><hr><h3 id="git工作流程"><a href="#git工作流程" class="headerlink" title="git工作流程"></a>git工作流程</h3><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/1.png" alt="git工作流程"></p><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><ol><li>clone（克隆）: 从远程仓库中克隆代码到本地仓库</li><li>checkout （检出）:从本地仓库中检出一个仓库分支然后进行修订</li><li>add（添加）: 在提交前先将代码提交到暂存区</li><li>commit（提交）: 提交到本地仓库。本地仓库中保存修改的各个历史版本</li><li>fetch (抓取) ： 从远程库，抓取到本地仓库，不进行任何的合并动作，一般操作比较少。</li><li>pull (拉取) ： 从远程库拉到本地库，自动进行合并(merge)，然后放到到工作区，相当于fetch+merge</li><li>push（推送） : 修改完成后，需要和团队成员共享代码时，将代码推送到远程仓库</li></ol><h3 id="首先配置全局"><a href="#首先配置全局" class="headerlink" title="首先配置全局"></a>首先配置全局</h3><ol><li>打开Git Bash</li><li>设置用户信息</li></ol><ul><li><p>git config –global user.name “itcast”</p></li><li><p>git config –global user.email “<a href="mailto:&#x68;&#101;&#x6c;&#108;&#x6f;&#x40;&#x69;&#x74;&#x63;&#97;&#x73;&#x74;&#x2e;&#x63;&#110;">&#x68;&#101;&#x6c;&#108;&#x6f;&#x40;&#x69;&#x74;&#x63;&#97;&#x73;&#x74;&#x2e;&#x63;&#110;</a>”</p></li></ul><p>设置自己的全局信息</p><h2 id="配置本地仓库"><a href="#配置本地仓库" class="headerlink" title="配置本地仓库"></a>配置本地仓库</h2><p>要使用Git对我们的代码进行版本控制，首先需要获得本地仓库</p><p>1）在电脑的任意位置创建一个空目录（例如test）作为我们的本地Git仓库</p><p>2）进入这个目录中，点击右键打开Git bash窗口</p><p>3）执行命令git init</p><p>4）如果创建成功后可在文件夹下看到隐藏的.git目录。</p><p>本人在用户目录下创建了git_repository目录 在文件夹内git bash执行git仓库初始化 会产生一个.git文件夹代表初始化成功</p><h3 id="基础操作指令"><a href="#基础操作指令" class="headerlink" title="基础操作指令"></a>基础操作指令</h3><p>git工作目录下对文件的修改(增加，删除，更新)会存在几个状态，这些修改的状态会随着我们执行Git的命令二发生变化</p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/2.png" alt="git工作目录"></p><h4 id="状态之间的变换"><a href="#状态之间的变换" class="headerlink" title="状态之间的变换"></a>状态之间的变换</h4><ul><li>git add   (工作区  –&gt;  暂存区)</li><li>git commit  (暂存区 –&gt;本地仓库)</li></ul><h4 id="查看修改的状态"><a href="#查看修改的状态" class="headerlink" title="查看修改的状态"></a>查看修改的状态</h4><ul><li>git status</li></ul><h4 id="添加工作区到暂存区"><a href="#添加工作区到暂存区" class="headerlink" title="添加工作区到暂存区"></a>添加工作区到暂存区</h4><p>将多个文件或一个文件转移至暂存区</p><ul><li>git add .    —–&gt;后面跟点就是将所有文件专业至暂存区</li><li>git add filename  ——&gt;跟文件名称 就是将单个文件转移至暂存区</li></ul><h4 id="提交暂存区至本地仓库"><a href="#提交暂存区至本地仓库" class="headerlink" title="提交暂存区至本地仓库"></a>提交暂存区至本地仓库</h4><p>提交暂存区内容到本地仓库的当前分支 <strong>重点</strong></p><ul><li>git commit -m ‘注释内容’ &#x2F;&#x2F; 注释内容要写</li></ul><h4 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a>查看提交日志</h4><p>在之前的githome(git的按照位置)配置了git-log的参数 后续还可以添加</p><p>命名形式：git log [option]</p><ul><li>options<ul><li>–all 显示所有分支</li><li>–pretty&#x3D;oneline 将提交信息显示为一行</li><li>–abbrev-commit  使得输出的commitId更简洁</li><li>–graph  以图的形式显示</li></ul></li></ul><h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><p>切换版本</p><ul><li><p>git reset –hard commitID</p><ul><li>commitID 可以使用 git log 指令查看</li></ul></li><li><p>如何查看已经删除的记录</p><ul><li>git reflog</li><li>可以查看到已经删除的提交记录</li></ul></li></ul><h4 id="将文件夹添加至忽略列表"><a href="#将文件夹添加至忽略列表" class="headerlink" title="将文件夹添加至忽略列表"></a>将文件夹添加至忽略列表</h4><p>创建.gitignore文件 在文件里写入希望被忽略的文件结尾名</p><p>例如:</p><ul><li>txt，cv文件后缀需要被忽略<ul><li>则在.gitignore文件中添加 ✳*.txt，✳*.cv文件</li></ul></li><li>最后进行 git add.</li><li>git commit -m ‘忽略xt，cv文件’</li></ul><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><p>在操作分支的时候，重点是提交：<strong>必须写清楚注释 git commit -m ‘注释内容’</strong> </p><ul><li><p>查看分支：git branch</p></li><li><p>创建分支：git branch 分支名</p></li><li><p>切换分支：git checkout 分支名</p><ul><li>创建并切换分支：git checkout -b 分支名</li></ul></li><li><p>合并分支：git merge 分支名称</p><ul><li>将分支(分支名称)合并到当前分支上 一般是其他分支合并到master分支上</li></ul></li><li><p>删除分支</p><ul><li>不能删除当前分支，只能删除其他分支</li><li>git btanch -d b1 删除分支时，需要进行各种检查</li><li>git branch -D b1 不做任何检查，强制删除</li></ul></li><li><p>解决冲突</p><ul><li>当两个分支上对文件的修改可能会存在冲突，列如同时修改了同一个文件的同一行，这是就需要手动解决冲突，解决步骤如下：<ul><li>处理文件中的冲突的地方</li><li>将解决完成冲突的文件加入暂存区(add)</li><li>提交到仓库(commit)</li></ul></li></ul><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/3.png" alt="解决冲突"></p></li></ul><h4 id="开发中分支的使用原则和流程"><a href="#开发中分支的使用原则和流程" class="headerlink" title="开发中分支的使用原则和流程"></a>开发中分支的使用原则和流程</h4><p>几乎所有的版本控制系统都以某种形式支持分支，使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的bug修改，开发新的功能，以免影响开发主线</p><p>在开发中，一般有如下分支使用原则与流程</p><ul><li>master（生产） 分支 线上分支，主分支，中小规模项目作为线上运行的应用对应的分支; </li><li>develop(开发）分支 是从master创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线要求，都可 以在此版本进行开发，阶段开发完成后，需要是合并到master分支,准备上线。</li><li>feature&#x2F;xxxx分支 从develop创建的分支， 一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完成后合并到 develop分支。</li><li>hotfix&#x2F;xxxx分支 从master派生的分支，一股作为线上bug修复使用，修复完成后需要合并到master、test. develop分支 。</li><li>还有一些其他分支，在此不再详述，例如test分支（用于代码测试）、pre分支（预上线分支）等等</li></ul><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/4.png" alt="分支流程"></p><h2 id="配置远程仓库"><a href="#配置远程仓库" class="headerlink" title="配置远程仓库"></a>配置远程仓库</h2><h3 id="注册gitee"><a href="#注册gitee" class="headerlink" title="注册gitee"></a>注册gitee</h3><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/5.png" alt="注册"></p><h3 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h3><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/6.png" alt="创建仓库"></p><h3 id="仓库创建完成后显示仓库地址"><a href="#仓库创建完成后显示仓库地址" class="headerlink" title="仓库创建完成后显示仓库地址"></a>仓库创建完成后显示仓库地址</h3><p>如图</p><p><strong><u>必须选择ssh</u></strong></p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/7.png" alt="ssh地址"></p><h3 id="配置SSH密钥"><a href="#配置SSH密钥" class="headerlink" title="配置SSH密钥"></a>配置SSH密钥</h3><ul><li>生成SSH公钥<ul><li>ssh-keygen -t rsa</li><li>不断回车<ul><li>如果公钥已经存在，则自动覆盖</li></ul></li></ul></li><li>Gitee设置账户共公钥<ul><li>获取公钥<ul><li>cat ~&#x2F;.ssh&#x2F;id_rsa.pub</li></ul></li></ul></li></ul><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/8.png" alt="配置ssh密钥"></p><ul><li>验证是否配置成功<ul><li>ssh -T <a href="mailto:&#x67;&#105;&#x74;&#x40;&#x67;&#x69;&#116;&#101;&#x65;&#46;&#x63;&#x6f;&#109;">&#x67;&#105;&#x74;&#x40;&#x67;&#x69;&#116;&#101;&#x65;&#46;&#x63;&#x6f;&#109;</a></li></ul></li></ul><h3 id="操作远程仓库"><a href="#操作远程仓库" class="headerlink" title="操作远程仓库"></a>操作远程仓库</h3><h4 id="此操作是先初始化本地库，然后与已创建的远程库进行对接。"><a href="#此操作是先初始化本地库，然后与已创建的远程库进行对接。" class="headerlink" title="此操作是先初始化本地库，然后与已创建的远程库进行对接。"></a><strong>此操作是先初始化本地库，然后与已创建的远程库进行对接</strong>。</h4><p>我们要将本地仓库和远程仓库连接起来，一般一个本地仓库对应一个远程仓库远侧，远程仓库默认名为origin</p><ul><li><p>命令： git remote add &lt;远端名称&gt; &lt;仓库路径SSH&gt; ssh在创建仓库的时候有</p><ul><li>远端名称，默认是origin，取决于远端服务器设置</li><li>仓库路径，从远端服务器获取此SSH，</li></ul></li><li><p>例如: git remote add origin <a href="mailto:&#103;&#x69;&#x74;&#64;&#x67;&#105;&#116;&#x65;&#x65;&#46;&#x63;&#111;&#x6d;">&#103;&#x69;&#x74;&#64;&#x67;&#105;&#116;&#x65;&#x65;&#46;&#x63;&#111;&#x6d;</a>:czbk_zhang_meng&#x2F;git_test.git</p></li></ul><h4 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h4><p>命令：git remote</p><h4 id="将本地代码推送到远程仓库"><a href="#将本地代码推送到远程仓库" class="headerlink" title="将本地代码推送到远程仓库"></a>将本地代码推送到远程仓库</h4><ul><li><p>命令：git push [-f] [–set-upstream] [远端名称 [本地分支名][:远端分支名] ]</p><ul><li><p>如果远程分支名和本地分支名称相同，则可以只写本地分支</p><p>本来是：git push origin master ：master 表示将本地仓库的master分支提交到远程仓库的master分支</p><ul><li>git push origin master 这里表示将本地仓库当前master分支的内容推到远程仓库上面去</li></ul></li><li><p>-f 表示强制覆盖</p></li><li><p>–set-upstream 推送到远端的同时并且建立起和远端分支的关联关系。</p><ul><li>git push –set-upstream origin master</li></ul></li><li><p>如果<strong>当前分支已经和远端分支关联</strong>，则可以省略分支名和远端名。</p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/9.png" alt="img"></p><ul><li>git push 将master分支推送到已关联的远端分支。</li></ul></li><li><p>[-f] 表示强制覆盖远程仓库的内容</p></li></ul></li></ul><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/10.png" alt="img"></p><p>查询远程仓库</p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/11.png" alt="img"></p><h4 id="本地分支与远程分支的关联关系"><a href="#本地分支与远程分支的关联关系" class="headerlink" title="本地分支与远程分支的关联关系"></a>本地分支与远程分支的关联关系</h4><ul><li>查看关联关系我们可以使用 git branch -vv 命令</li><li>查看分支更加详细的信息</li></ul><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/12.png" alt="分支联系"></p><h4 id="远程仓库克隆"><a href="#远程仓库克隆" class="headerlink" title="远程仓库克隆"></a>远程仓库克隆</h4><p>如果已经有一个远端仓库，我们可以直接clone到本地。</p><ul><li>命令: git clone &lt;仓库路径&gt; [本地目录]<ul><li>本地目录可以省略，会自动生成一个目录，就是SSH后面那部分</li></ul></li></ul><h4 id="从远程仓库中抓取和拉取"><a href="#从远程仓库中抓取和拉取" class="headerlink" title="从远程仓库中抓取和拉取"></a>从远程仓库中抓取和拉取</h4><p><strong>远程分支和本地的分支一样</strong>，我们可以进行merge操作，只是需要先<strong>把远端仓库里的更新都下载到本地</strong>，再进行操作。</p><ul><li>抓取 命令：git fetch [remote name] [branch name]<ul><li><strong>抓取指令就是将仓库里的更新都抓取到本地，不会进行合并</strong>，不合并本地仓库就是没有更新，此时还没有拿到远程仓库的内容，合并后才会拿到更新的内容</li><li>如果不指定远端名称和分支名，则抓取所有分支。</li></ul></li><li>拉取 命令：<strong>git pull [remote name] [branch name]</strong><ul><li><strong>拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于fetch+merge</strong></li><li>如果不指定远端名称和分支名，则抓取所有并更新当前分支。</li></ul></li></ul><p>git pull更加方便 直接拉取远程仓库的更新且合并到本地</p><ol><li>在test01这个本地仓库进行一次提交并推送到远程仓库</li></ol><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/13.png" alt="推送到远程仓库"></p><ol><li>在另一个仓库将远程提交的代码拉取到本地仓库</li></ol><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/14.png" alt="拉取到本地"></p><p>读取远程仓库，git pull之后将更新的内容拉取并更新之后在本地仓库</p><h4 id="解决合并冲突"><a href="#解决合并冲突" class="headerlink" title="解决合并冲突"></a>解决合并冲突</h4><p><strong>我们要更新远程仓库的资源时，先要获取此时远程仓库的资源后，在合并到自己的master分支中，然后再上传到远程仓库上</strong></p><p>在一段时间，A、B用户修改了同一个文件，且修改了同一行位置的代码，此时会发生合并冲突。</p><p>A用户在本地修改代码后优先推送到远程仓库，此时B用户在本地修订代码，提交到本地仓库后，也需要</p><p>推送到远程仓库，此时B用户晚于A用户，<strong>故需要先拉取远程仓库的提交，经过合并后才能推送到远端分</strong></p><p><strong>支</strong>,如下图所示。</p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/15.png" alt="img"></p><p>在B用户拉取代码时，因为A、B用户同一段时间修改了同一个文件的相同位置代码，故会发生合并冲</p><p>突。</p><p><strong>就是b在更新一个资源之前，有一个a在b之前率先改掉了这个资源，此时就会出现分支冲突的问题，git不知道是要取a修改的值，还是b修改的值，此时就要我们手动去对应文件里去修改，到底要保留哪一个</strong></p><p><strong>远程分支也是分支，所以合并时冲突的解决方式也和解决本地分支冲突相同相同</strong></p><p><a href="https://blog.csdn.net/zhucheng1994/article/details/123256315">Git问题：2.拉取远程仓库代码，合并时出现冲突，合并失败_怦然心动CC的博客-CSDN博客_git本地和远程仓库代码冲突合并</a></p><h2 id="IDEA配置GIT"><a href="#IDEA配置GIT" class="headerlink" title="IDEA配置GIT"></a>IDEA配置GIT</h2><p>在idea设置中找到git 配置git.exe文件路径测试是否正常</p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/16.png" alt="git配置"></p><h4 id="创建远程仓库-1"><a href="#创建远程仓库-1" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h4><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/17.png" alt="img"></p><h4 id="初始化本地仓库（将当前项目初始化为仓库）"><a href="#初始化本地仓库（将当前项目初始化为仓库）" class="headerlink" title="初始化本地仓库（将当前项目初始化为仓库）"></a>初始化本地仓库（将当前项目初始化为仓库）</h4><p><strong>在idea中创建文件的时候，它会询问你是否要将文件添加到git中，修改文件的时候，idea会自动帮我们去add，我们只需要去commit就好了</strong></p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/18.png" alt="img"></p><p>此时我们的项目目录就变成了一个本地仓库</p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/19.png" alt="img"></p><p>绿色的文件代表已添加到git中</p><p>爆红的文件没有被添加到git当中，被Git识别为冲突文件</p><p>灰色的文件代表已忽略的文件，可以在gitignore文件中配置</p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/20.png" alt="img"></p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/21.png" alt="分支"></p><p>这里只是我们的本地仓库</p><h4 id="设置远程仓库"><a href="#设置远程仓库" class="headerlink" title="设置远程仓库"></a>设置远程仓库</h4><p>在发现git也可以共享数据到github和gitee格式差不多 需要在idea上登录github账号</p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/22.png" alt="github共享"></p><h4 id="推送到远程仓库可选"><a href="#推送到远程仓库可选" class="headerlink" title="推送到远程仓库可选"></a>推送到远程仓库可选</h4><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/23.png" alt="切换远程仓库"></p><p>远程仓库名默认为origin 为gitee的仓库<br><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/24.png" alt="img"></p><h4 id="提交到本地仓库"><a href="#提交到本地仓库" class="headerlink" title="提交到本地仓库"></a>提交到本地仓库</h4><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/25.png" alt="img"></p><h4 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h4><p>在将本地仓库的修改推送到git远程仓库的时候，我们要先pull，先拿到此时远程仓库的版本信息，再去此版本信息上修改</p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/26.png" alt="img"></p><h4 id="克隆远程仓库到本地"><a href="#克隆远程仓库到本地" class="headerlink" title="克隆远程仓库到本地"></a>克隆远程仓库到本地</h4><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/27.png" alt="img"></p><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/28.png" alt="查看分支"><br><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/29.png" alt="img"></p><p>可以看到本地仓库的分支和远程仓库的分支</p><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><p>方式一：<br><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/30.png" alt="创建分支1"></p><p>方式二：（推荐）</p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/31.png" alt="创建分支2"></p><p>这种方式还可以看到分支所在的版本信息</p><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/32.png" alt="合并分支"></p><p>这个标签表示是当前分支</p><p>我们到想要合并的分支上面，右键<br><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/33.png" alt="img"></p><h4 id="IDEA常用GIT操作入口"><a href="#IDEA常用GIT操作入口" class="headerlink" title="IDEA常用GIT操作入口"></a>IDEA常用GIT操作入口</h4><ol><li>第一张图上的快捷入口可以基本满足开发的需求。<br><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/34.png" alt="img"></li><li>第二张图是更多在IDEA操作git的入口。<br><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/35.png" alt="img"></li></ol><h2 id="gitee-直接github项目"><a href="#gitee-直接github项目" class="headerlink" title="gitee 直接github项目"></a>gitee 直接github项目</h2><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/36.png" alt="点击导入"></p><p>选择从github导入</p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/37.png" alt="选择从github导入"></p><p>或者使用https协议输入github仓库连接导入github仓库</p><p><img src="/2022/07/23/Git%E7%B2%BE%E9%80%9A/38.png" alt="使用https协议"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li><strong>切换分支前先提交本地的修改</strong></li><li>代码及时提交，提交过了就不会丢</li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL基础篇</title>
      <link href="/2022/07/21/MYSQL%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2022/07/21/MYSQL%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><h2 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h2><ul><li>数据库：存储数据的仓库，数据是有组织的进行存储</li><li>数据库管理系统：操纵和管理数据库的大型软件</li><li>SQL：操作关系型数据库的编程语言，定义了一套操作关系型数据库统一<strong>标准</strong></li></ul><h2 id="MYSQL数据库"><a href="#MYSQL数据库" class="headerlink" title="MYSQL数据库"></a>MYSQL数据库</h2><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><p>概念：建立在关系模型基础上，由多张相互连接的二维表组成的数据库</p><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ul><li>使用表存储数据，格式统一，便于维护</li><li>使用SQL语言操作，标准统一，使用方便</li></ul><h4 id="SQL的通用语法"><a href="#SQL的通用语法" class="headerlink" title="SQL的通用语法"></a>SQL的通用语法</h4><ul><li>SOL语句可以单行或多行书写，以分号结民。 </li><li>SOL语句可以使用空格&#x2F;縮进来增强语句的可读性。 </li><li>MySOL数据库的SOL语句不区分大小写，关链宇建议使用大写。</li><li>注释： 单行注释：–注释内容 或＃注释内容(MySOL特有) 多行注释：&#x2F;* 注释内容容*&#x2F;，</li></ul><h3 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h3><p>DDL(Data Defintion Language):数据定义语言，用来定义数据库对象(数据库，表，字段)</p><p>DML(Data Manipulation Language):数据操作语言，用来对数据库表中的数据进行增删改</p><p>DQL((Data Query Language):数据查询语言，用来查询数据库中表的记录</p><p>DCL(Data Control Language):数据控制语言，用来创建数据库账户，控制数据库的访问权限</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>一段可以直接被另一段程序调用的程序或代码</p><p><a href="https://www.php.cn/faq/464781.html">数据库函数有哪些-常见问题-PHP中文网</a></p><h4 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h4><p><img src="/2022/07/21/MYSQL%E5%9F%BA%E7%A1%80%E7%AF%87/6.png" alt="字符串函数"></p><h4 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h4><p><img src="/2022/07/21/MYSQL%E5%9F%BA%E7%A1%80%E7%AF%87/5.png" alt="数值函数"></p><h4 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h4><p><img src="/2022/07/21/MYSQL%E5%9F%BA%E7%A1%80%E7%AF%87/4.png" alt="日期函数"></p><h4 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h4><p>流程函数也是很常用的一类函数，可以在SQL语句中实现条件筛选从而提高语句的效率</p><p><img src="/2022/07/21/MYSQL%E5%9F%BA%E7%A1%80%E7%AF%87/3.png" alt="流程函数"></p><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><p>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据</p><p>目的：保证数据库中数据的正确，有效性和完整性</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li>非空约束：限制该字段的数据不能为null    关键字：NOT NULL</li><li>唯一约束：保证该字段的所有数据都是唯一，不重复的     关键字：UNIQUE</li><li>主键约束：主键是一行数据的唯一标识，要求非空且唯一   关键字：PRIMARY KEY</li><li>默认约束：保存数据时，如果未指定该字段的值，则采用默认值   关键字：DEFAULT</li><li>检查约束：保证字段值满足某一个条件   关键字：CHECK</li><li>外键约束：用来让两张表的数据之间建立连接，保证数据的一致性和完整性   关键字：FOREOGN KEY</li></ul><h4 id="外键约束的删除-x2F-更新行为"><a href="#外键约束的删除-x2F-更新行为" class="headerlink" title="外键约束的删除&#x2F;更新行为"></a>外键约束的删除&#x2F;更新行为</h4><p>NO ACTION：当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新。(与RESTRICT一致)</p><p>RESTRICT：当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新。(与NO ACTION一致)</p><p>CASCADE：当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除&#x2F;更新外键在子表中的记录。</p><p>SET NULL：当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为NULL(这要求外键允许取null)</p><p>SET DEFAULT：父表变更时，子表将外键列设置成一个默认的值(Innodb不支持)</p><p>语法：</p><p>ALTER  TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGNKEY(外键字段) REFERENCES 主表名(主表字段名) ON UPDATE CASCADE ON DELETE CASCADE</p><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p>各表结构之间基本存在三种关系</p><ul><li>一对多</li><li>多对多</li><li>一对一</li></ul><p>概述：从多张表中查询数据</p><p>笛卡尔积：笛卡尔乘积是指在数学中，两个集合A集合和B集合的所有组合情况</p><h4 id="多表查询分类"><a href="#多表查询分类" class="headerlink" title="多表查询分类"></a>多表查询分类</h4><p>连接查询</p><ul><li><p>内连接：相当于查询A,B交际部分数据</p></li><li><p>外连接：</p><ul><li><p>左外连接：查询左表所有数据，以及两张表交集部分数据</p><ul><li>语法：select 字段列表 from 表1 left [outer] join 表2 on 条件</li></ul></li><li><p>右外连接：查询右表所有数据，以及两张表交集部分数据</p><ul><li>语法：select 字段列表 from 表1 right[outer] join 表2 on 条件</li></ul></li></ul></li><li><p>自连接：当前表与自身的连接查询，连接必须使用表别名</p><ul><li>语法：select 字段列表 from 表a 别名a join 表a 表名 b on条件</li></ul></li></ul><p>联合查询</p><p>对于union查询，就是把多次查询的结合合并起来，形成以恶搞新的查询结果集</p><p>语法：</p><p>select 字段列表 from 表a … </p><p>union [all]</p><p>select 字段列表 from 表b … </p><p>对应联合查询的多张表的列数必须保持一致，字段类型也需要保持一致</p><p>union all 会将全部的数据直接合并在一起，union会对合并之后的数据去重</p><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><p>概念：SQL语句中嵌套SELECT语句，称为嵌套查询，又称为子查询</p><p>select * from t1 where column &#x3D; (select column1 from t2)</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>一组操作集合，要么同时成功，要么同时失败</p><p><img src="/2022/07/21/MYSQL%E5%9F%BA%E7%A1%80%E7%AF%87/1.png" alt="事务操作"></p><h4 id="事务的四大特性"><a href="#事务的四大特性" class="headerlink" title="事务的四大特性"></a>事务的四大特性</h4><ul><li><p>原子性 (Atomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</p></li><li><p>一致性 (Consistency）：事务完成时，必须使所有的数据都保持一致状态。</p></li><li><p>隔离性 (Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。 </p></li><li><p>持久性 (Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</p></li></ul><h4 id="并发事务问题"><a href="#并发事务问题" class="headerlink" title="并发事务问题"></a>并发事务问题</h4><ul><li>脏读：一个事务读取到另一个事务还没有提交的数据</li><li>不可重复读：一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读</li><li>幻读：一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像是出现了幻影</li></ul><h4 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h4><p><img src="/2022/07/21/MYSQL%E5%9F%BA%E7%A1%80%E7%AF%87/2.png" alt="事务隔离级别"></p><p>注意：事务隔离级别越高，数据越安全，但是性能越低</p><h2 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h2><p><a href="https://zhuanlan.zhihu.com/p/265852739">SQL优化最干货总结 - MySQL（2020最新版） - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot开发实用篇</title>
      <link href="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/"/>
      <url>/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot开发实用篇"><a href="#SpringBoot开发实用篇" class="headerlink" title="SpringBoot开发实用篇"></a>SpringBoot开发实用篇</h1><h2 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h2><h3 id="手动启动热部署"><a href="#手动启动热部署" class="headerlink" title="手动启动热部署"></a>手动启动热部署</h3><p>项目做完某一个功能测试的时候，修改完功能可以马上见到效果</p><p>服务器发现程序有新的改动，服务器实现内部的重启</p><p>实现热部署，必须得在spring容器里添加配置</p><p><strong>在pom文件中添加开发者工具并使用idea自带的重新构建项目完成热部署激活热备份(Ctrl+F9)</strong></p><p>实际是idea重新启动了服务器</p><ul><li>开启开发者工具</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--手动启动热部署--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>激活热部署</li></ul><p><img src="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/1.png" alt="idea构建项目"></p><h3 id="自动启动热部署"><a href="#自动启动热部署" class="headerlink" title="自动启动热部署"></a>自动启动热部署</h3><p>打开idea的自动构建项目  idea失去焦点五秒之后自动重新构建项目</p><p><strong><u>新版idea移除这个功能</u></strong></p><p><img src="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/2.png" alt="开启主动部署功能"></p><h3 id="关于热部署"><a href="#关于热部署" class="headerlink" title="关于热部署"></a>关于热部署</h3><ul><li>重启(Restart):自定义开发代码，包含类，页面，配置文件等，加载位置restart类加载器</li><li>重载(Reload):jar包，加载位置base类加载器</li></ul><p>热部署仅仅加载当前开发者自定义开发的资源，不加载jar资源</p><h4 id="热部署范围配置"><a href="#热部署范围配置" class="headerlink" title="热部署范围配置"></a>热部署范围配置</h4><ul><li>默认不触发重启的目录列表<ul><li>&#x2F;META-INF&#x2F;maven</li><li>&#x2F;META-INF&#x2F;resources</li><li>&#x2F;resources</li><li>&#x2F;static</li><li>&#x2F;public</li><li>&#x2F;templates</li></ul></li></ul><p>在springboot的配置文件中找到开发者工具，控制热部署范围配置</p><p>开发环境下有效</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devtools:</span></span><br><span class="line">  <span class="attr">restart:</span></span><br><span class="line">    <span class="comment"># 设置不参与热部署的文件夹</span></span><br><span class="line">    <span class="attr">exclude:</span> <span class="string">static/**,public/**,config/application.yml</span></span><br></pre></td></tr></table></figure><h4 id="关闭热部署"><a href="#关闭热部署" class="headerlink" title="关闭热部署"></a>关闭热部署</h4><h5 id="yml文件配置关闭"><a href="#yml文件配置关闭" class="headerlink" title="yml文件配置关闭"></a>yml文件配置关闭</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devtools:</span></span><br><span class="line">  <span class="attr">restart:</span></span><br><span class="line">    <span class="comment"># 设置不参与热部署的文件夹</span></span><br><span class="line">    <span class="attr">exclude:</span> <span class="string">static/**,public/**,config/application.yml</span></span><br><span class="line">    <span class="comment"># 关闭热部署</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h5 id="属性加载优先级覆盖关闭"><a href="#属性加载优先级覆盖关闭" class="headerlink" title="属性加载优先级覆盖关闭"></a>属性加载优先级覆盖关闭</h5><ul><li>设置高优先级属性禁用热部署</li></ul><p>在springboot启动入口类中设置关闭热部署</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SSMPApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;spring.devtools.restart.enabled&quot;</span>,<span class="string">&quot;false&quot;</span>);</span><br><span class="line">        SpringApplication.run(SSMPApplication.class, args);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置高级"><a href="#配置高级" class="headerlink" title="配置高级"></a>配置高级</h2><h3 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h3><p><strong>configuration</strong></p><h4 id="三种属性绑定"><a href="#三种属性绑定" class="headerlink" title="三种属性绑定"></a>三种属性绑定</h4><h5 id="读取单一属性"><a href="#读取单一属性" class="headerlink" title="读取单一属性"></a>读取单一属性</h5><p>当要读取yml配置文件中country的值</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">country:</span> <span class="string">china</span></span><br><span class="line"><span class="attr">province:</span> <span class="string">beijing</span></span><br><span class="line"><span class="attr">city:</span> <span class="string">beijing</span></span><br><span class="line"><span class="attr">area:</span> <span class="string">haiding</span></span><br><span class="line"></span><br><span class="line"><span class="attr">user:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ma</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">16</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用注解**@Value**获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;country&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String country1;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;user.name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name1;</span><br></pre></td></tr></table></figure><p>像是是多级属性则一级一级读取</p><h5 id="读取数组中数据"><a href="#读取数组中数据" class="headerlink" title="读取数组中数据"></a>读取数组中数据</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">likes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">game</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">music</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sleep</span></span><br></pre></td></tr></table></figure><p>同样是**@Value**获取 只不过是数组形式获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;likes[1]&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String likes;</span><br></pre></td></tr></table></figure><h5 id="引用数据"><a href="#引用数据" class="headerlink" title="引用数据"></a>引用数据</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">baseDir:</span> <span class="string">c:\win10</span></span><br><span class="line"><span class="comment">#使用$&#123;属性名&#125;引用数据</span></span><br><span class="line"><span class="attr">tempDir:</span> <span class="string">$&#123;baseDir&#125;\temp</span></span><br><span class="line"><span class="comment">#使用引号包裹的字符串，其中的转义字符页可以生效</span></span><br><span class="line"><span class="attr">tempDir2:</span> <span class="string">&quot;$&#123;baseDir&#125;\temp \t1 \t2&quot;</span></span><br></pre></td></tr></table></figure><h5 id="读取yml全部属性数据"><a href="#读取yml全部属性数据" class="headerlink" title="读取yml全部属性数据"></a>读取yml全部属性数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自动装配 yml配置文件里的全部属性</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment env;</span><br></pre></td></tr></table></figure><p>获取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(env.getProperty(<span class="string">&quot;user.name&quot;</span>));</span><br><span class="line">System.out.println(env.getProperty(<span class="string">&quot;likes[1]&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="将一组数据封装为对象"><a href="#将一组数据封装为对象" class="headerlink" title="将一组数据封装为对象"></a>将一组数据封装为对象</h4><h5 id="配置数据"><a href="#配置数据" class="headerlink" title="配置数据"></a>配置数据</h5><p>在yml中配置数据</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">servers:</span></span><br><span class="line">  <span class="attr">idAddress:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2345</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><p>定义实体类接收数据生成对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义数据模型封装yaml文件中对应的数据封装成对象</span></span><br><span class="line"><span class="comment">//定义spring管控的bean</span></span><br><span class="line"><span class="comment">//指定加载spring容器里自定义的bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;servers&quot;)</span></span><br><span class="line">/<span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String idAddress;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> timeout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h5><ul><li>在springboot启动入口测试 需要使用getBean来获得数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ServerConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot10ConfigurationApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;datasource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource <span class="title function_">druidDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> SpringApplication.run(Springboot10ConfigurationApplication.class,args);</span><br><span class="line">        <span class="type">ServerConfig</span> <span class="variable">bean</span> <span class="operator">=</span> ctx.getBean(ServerConfig.class);</span><br><span class="line"><span class="comment">//        SpringApplication.run(Springboot10ConfigurationApplication.class, args);</span></span><br><span class="line">        System.out.println(bean);</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> ctx.getBean(DruidDataSource.class);</span><br><span class="line">        System.out.println(ds.getDriverClassName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在congtroller层使用注解**@Autowired**来获得数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ServerConfig serverConfig;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(serverfig)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="第三方bean绑定"><a href="#第三方bean绑定" class="headerlink" title="第三方bean绑定"></a>第三方bean绑定</h4><p><strong>@ConfigurationProperties</strong>不仅适用于自定义的bean属性还适用于第三方bean绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;datasource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DruidDataSource <span class="title function_">druidDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    <span class="keyword">return</span> ds;</span><br><span class="line">&#125;</span><br><span class="line"> System.out.println(ds.getDriverClassName());</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">driverClassName:</span> <span class="string">com.mysql.jdbc.DriverMa</span></span><br></pre></td></tr></table></figure><h4 id="ConfigurationProperties和-EnableConfigurationProperties"><a href="#ConfigurationProperties和-EnableConfigurationProperties" class="headerlink" title="@ConfigurationProperties和@EnableConfigurationProperties"></a>@ConfigurationProperties和@EnableConfigurationProperties</h4><ul><li><p>开启属性绑定并设置具体目标**@EnableConfigurationProperties(ServerConfig.class)<strong>是指定一个类或者多个类为</strong>spring容器的bean<strong>跟</strong>@Component**作用大致相同 </p><ul><li>多个类的写法@EnableConfigurationProperties({A.class,b.Blass,C.class})</li><li>@EnableConfigurationProperties和@Component不能同时使用</li><li><strong>@Component：</strong> 标注Spring管理的Bean，使用@Component注解在一个类上，表示将此类标记为Spring容器中的一个Bean。</li></ul></li><li><p><strong>@ConfigurationProperties</strong>具体的做属性绑定</p></li></ul><h5 id="松散绑定"><a href="#松散绑定" class="headerlink" title="松散绑定"></a>松散绑定</h5><ul><li><strong>@ConfigurationProperties</strong>绑定属性支持绑定属性名宽松绑定</li><li><strong>@Value</strong> 不支持宽松绑定</li><li>绑定前缀命名命名规则——&gt;<strong>建议统一小写命名</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;servers&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String idAddress;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> timeout;</span><br><span class="line">    <span class="comment">//默认时间单位为毫秒</span></span><br><span class="line">    <span class="meta">@DurationUnit(ChronoUnit.HOURS)</span> <span class="comment">//自定义时间单位</span></span><br><span class="line">    <span class="keyword">private</span> Duration serverTimeOut;</span><br><span class="line">    <span class="comment">//数据存储单位</span></span><br><span class="line">    <span class="meta">@DataSizeUnit(DataUnit.MEGABYTES)</span> <span class="comment">//自定义数据单位</span></span><br><span class="line">    <span class="keyword">private</span> DataSize dataSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">servers:</span></span><br><span class="line">  <span class="attr">idAddress:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span>       <span class="comment"># 驼峰</span></span><br><span class="line"><span class="comment">#  ipaddress: 192.168.0.1</span></span><br><span class="line"><span class="comment">#  ip_address: 192.168.0.1      # unline</span></span><br><span class="line"><span class="comment">#  ip-address: 192.168.0.1       # 烤肉串格式 主流</span></span><br><span class="line"><span class="comment">#  IPADDRESS: 192.168.0.1</span></span><br><span class="line"><span class="comment">#  IP_ADDRESS: 192.168.0.1      # 常量</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2345</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">serverTimeOut:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">dataSize:</span> <span class="number">10</span> <span class="comment"># 也可以写10MB</span></span><br></pre></td></tr></table></figure><h4 id="开启bean数据校验"><a href="#开启bean数据校验" class="headerlink" title="开启bean数据校验"></a>开启bean数据校验</h4><ul><li>添加JSR303规范坐标与hibernate校验框架坐标</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        1.导入JSR303规范--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        jdbc--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.validation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>validation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        使用hibernate校验器做实现接口--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>开启Bean校验功能 使用@Validated注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;servers&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="comment">//2.开启对当前bean的属性注入校验</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String idAddress;</span><br><span class="line">    <span class="comment">//3.开启具体校验规则</span></span><br><span class="line">    <span class="meta">@Max(value = 8888,message = &quot;最大值不超过8888&quot;)</span></span><br><span class="line">    <span class="meta">@Min(value = 202,message = &quot;最小值不低于202&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> timeout;</span><br><span class="line">    <span class="comment">//默认时间单位为毫秒</span></span><br><span class="line">    <span class="meta">@DurationUnit(ChronoUnit.HOURS)</span> <span class="comment">//自定义时间单位</span></span><br><span class="line">    <span class="keyword">private</span> Duration serverTimeOut;</span><br><span class="line">    <span class="comment">//数据存储单位</span></span><br><span class="line">    <span class="meta">@DataSizeUnit(DataUnit.MEGABYTES)</span> <span class="comment">//自定义数据单位</span></span><br><span class="line">    <span class="keyword">private</span> DataSize dataSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="进制转换规则"><a href="#进制转换规则" class="headerlink" title="进制转换规则"></a>进制转换规则</h4><p>yaml文件中对于数字的定义支持进制书写格式，如需使用字符串请使用引号明确标注</p><p><img src="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/3.png" alt="yaml语法规则"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="加载测试环境专用属性"><a href="#加载测试环境专用属性" class="headerlink" title="加载测试环境专用属性"></a>加载测试环境专用属性</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">prop:</span> <span class="string">vtb</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置临时变量属性 里面是数组类型可以添加多条</span></span><br><span class="line"><span class="comment">// properties 可以为当前属性添加一组临时属性配置</span></span><br><span class="line"><span class="comment">//@SpringBootTest(properties = &#123;&quot;test.prop=vtb1&quot;&#125;)</span></span><br><span class="line"><span class="comment">//使用args配置临时属性 模拟命令行模式 注意前面得加--</span></span><br><span class="line"><span class="comment">//@SpringBootTest(args = &#123;&quot;--test.prop=vtb2&quot;&#125;)</span></span><br><span class="line"><span class="comment">//当两个同时出现，由properties覆盖配置文件属性,再由命令行取代properties</span></span><br><span class="line"><span class="meta">@SpringBootTest(properties = &#123;&quot;test.prop=vtb1&quot;&#125;,args = &#123;&quot;--test.prop=vtb2&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertiesAndArgsTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;test.prop&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testProperties</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="引用外部资源"><a href="#引用外部资源" class="headerlink" title="引用外部资源"></a>引用外部资源</h4><ul><li>@Import(MsgConfig.class)可以导入bean</li><li>但是如果需要引用的类写了@Configuration 则springboot自动装配</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MsgConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">msg</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;bean msg&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Import(MsgConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigurationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span>  String msg;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">Configuration</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试web层"><a href="#测试web层" class="headerlink" title="测试web层"></a>测试web层</h3><h4 id="模拟web环境"><a href="#模拟web环境" class="headerlink" title="模拟web环境"></a>模拟web环境</h4><ul><li><strong>@SpringBootTest(webEnvironment &#x3D; SpringBootTest.WebEnvironment.DEFINED_PORT)</strong> 使用默认端口号进行访问</li></ul><p>模拟端口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">webTest</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="web环境模拟请求测试"><a href="#web环境模拟请求测试" class="headerlink" title="web环境模拟请求测试"></a>web环境模拟请求测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置web环境</span></span><br><span class="line"><span class="meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br><span class="line"><span class="comment">// 开启虚拟MVC调用</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">webTest</span><span class="params">(<span class="meta">@Autowired</span> MockMvc mvc)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//创建一个虚拟请求,当前访问/books</span></span><br><span class="line">        <span class="type">MockHttpServletRequestBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> MockMvcRequestBuilders.get(<span class="string">&quot;/books&quot;</span>);</span><br><span class="line">        <span class="comment">//执行对应请求</span></span><br><span class="line">        mvc.perform(builder);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="虚拟请求响应状态匹配"><a href="#虚拟请求响应状态匹配" class="headerlink" title="虚拟请求响应状态匹配"></a>虚拟请求响应状态匹配</h4><ul><li>如果与预期值匹配相等则正常运行</li><li>如果不相等则报出详细错误</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">webTest</span><span class="params">(<span class="meta">@Autowired</span> MockMvc mvc)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//创建一个虚拟请求,当前访问/books</span></span><br><span class="line">    <span class="type">MockHttpServletRequestBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> MockMvcRequestBuilders.get(<span class="string">&quot;/books&quot;</span>);</span><br><span class="line">    <span class="comment">//执行对应请求</span></span><br><span class="line">    <span class="type">ResultActions</span> <span class="variable">actions</span> <span class="operator">=</span> mvc.perform(builder);</span><br><span class="line">    <span class="comment">//设置预期值,与真实值进行比较,成功测试通过,失败测试失败\</span></span><br><span class="line">    <span class="comment">//定义本次调用的预期值</span></span><br><span class="line">    <span class="type">StatusResultMatchers</span> <span class="variable">status</span> <span class="operator">=</span> MockMvcResultMatchers.status();</span><br><span class="line">    <span class="comment">//定义具体的结果 预计本次调用时成功的状态:200</span></span><br><span class="line">    <span class="type">ResultMatcher</span> <span class="variable">ok</span> <span class="operator">=</span> status.isOk();</span><br><span class="line">    <span class="comment">//添加预期值到本次调用过程中进行匹配</span></span><br><span class="line">    actions.andExpect(ok);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/4.png" alt="错误详情"></p><h4 id="测试响应体内容"><a href="#测试响应体内容" class="headerlink" title="测试响应体内容"></a>测试响应体内容</h4><ul><li>测试结果看返回值是否匹配<ul><li>成功则正常运行</li><li>失败则报出集团错误</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testBody</span><span class="params">(<span class="meta">@Autowired</span> MockMvc mvc)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//创建一个虚拟请求,当前访问/books</span></span><br><span class="line">        <span class="type">MockHttpServletRequestBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> MockMvcRequestBuilders.get(<span class="string">&quot;/1books&quot;</span>);</span><br><span class="line">        <span class="comment">//执行对应请求</span></span><br><span class="line">        <span class="type">ResultActions</span> <span class="variable">actions</span> <span class="operator">=</span> mvc.perform(builder);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置预期值,与真实值进行比较,成功测试通过,失败测试失败</span></span><br><span class="line">        <span class="comment">//定义本次调用的预期值</span></span><br><span class="line">        <span class="type">ContentResultMatchers</span> <span class="variable">content</span> <span class="operator">=</span> MockMvcResultMatchers.content();</span><br><span class="line">        <span class="comment">//定义具体的结果 预计本次调用时成功返回内容</span></span><br><span class="line">        <span class="type">ResultMatcher</span> <span class="variable">result</span> <span class="operator">=</span> content.string(<span class="string">&quot;springboot&quot;</span>);</span><br><span class="line">        <span class="comment">//添加预期值到本次调用过程中进行匹配</span></span><br><span class="line">        actions.andExpect(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试响应体内容-JSON"><a href="#测试响应体内容-JSON" class="headerlink" title="测试响应体内容(JSON)"></a>测试响应体内容(JSON)</h4><ul><li>匹配Json返回内容是否和预期相等</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testBodyJson</span><span class="params">(<span class="meta">@Autowired</span> MockMvc mvc)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//创建一个虚拟请求,当前访问/books</span></span><br><span class="line">    <span class="type">MockHttpServletRequestBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> MockMvcRequestBuilders.get(<span class="string">&quot;/1books&quot;</span>);</span><br><span class="line">    <span class="comment">//执行对应请求</span></span><br><span class="line">    <span class="type">ResultActions</span> <span class="variable">actions</span> <span class="operator">=</span> mvc.perform(builder);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置预期值,与真实值进行比较,成功测试通过,失败测试失败</span></span><br><span class="line">    <span class="comment">//定义本次调用的预期值</span></span><br><span class="line">    <span class="type">ContentResultMatchers</span> <span class="variable">content</span> <span class="operator">=</span> MockMvcResultMatchers.content();</span><br><span class="line">    <span class="comment">//定义具体的结果 预计本次调用时成功返回内容</span></span><br><span class="line">    <span class="type">ResultMatcher</span> <span class="variable">result</span> <span class="operator">=</span> content.json(<span class="string">&quot;id1\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;namespringboot\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;typemath\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;descriptiongood book&quot;</span>);</span><br><span class="line">    <span class="comment">//添加预期值到本次调用过程中进行匹配</span></span><br><span class="line">    actions.andExpect(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试响应头"><a href="#测试响应头" class="headerlink" title="测试响应头"></a>测试响应头</h4><ul><li>name中的value是否和预计的相同</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testContentType</span><span class="params">(<span class="meta">@Autowired</span> MockMvc mvc)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//创建一个虚拟请求,当前访问/books</span></span><br><span class="line">    <span class="type">MockHttpServletRequestBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> MockMvcRequestBuilders.get(<span class="string">&quot;/1books&quot;</span>);</span><br><span class="line">    <span class="comment">//执行对应请求</span></span><br><span class="line">    <span class="type">ResultActions</span> <span class="variable">actions</span> <span class="operator">=</span> mvc.perform(builder);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置预期值,与真实值进行比较,成功测试通过,失败测试失败</span></span><br><span class="line">    <span class="comment">//定义本次调用的预期值</span></span><br><span class="line">    <span class="type">HeaderResultMatchers</span> <span class="variable">header</span> <span class="operator">=</span> MockMvcResultMatchers.header();</span><br><span class="line">    <span class="comment">//匹配响应头,name为响应头名称,value为预期结果</span></span><br><span class="line">    <span class="type">ResultMatcher</span> <span class="variable">string</span> <span class="operator">=</span> header.string(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">    <span class="comment">//添加预期值到本次调用过程中进行匹配</span></span><br><span class="line">    actions.andExpect(string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据层测试事务回滚"><a href="#数据层测试事务回滚" class="headerlink" title="数据层测试事务回滚"></a>数据层测试事务回滚</h3><ul><li>在测试数据的时候，在测试层添加**@Transactional** springboot会自动执行事务回滚，springboot知道是测试数据不将其写入数据库以免变成脏数据</li><li>如果需要数据插入到数据库加上注解**@Rollback(false)**,默认为true</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Transactional</span> <span class="comment">//操作事务的注解</span></span><br><span class="line"><span class="meta">@Rollback</span> <span class="comment">//默认回滚 不将测试数据添加到数据库</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaoTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">DaoTest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line"><span class="comment">//        book.setId(1);</span></span><br><span class="line">        book.setName(<span class="string">&quot;springboot&quot;</span>);</span><br><span class="line">        book.setType(<span class="string">&quot;math&quot;</span>);</span><br><span class="line">        book.setDescription(<span class="string">&quot;good book&quot;</span>);</span><br><span class="line">        bookService.save(book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试用例设置随机值"><a href="#测试用例设置随机值" class="headerlink" title="测试用例设置随机值"></a>测试用例设置随机值</h4><ul><li>在多环境配置中的测试环境添加测试随机值</li><li>通过创建实体封装为对象来接收</li><li>使用**@Autowired**注入bean来接收数据</li><li>设置范围没有规定使用哪种分隔符，()不唯一，可以使用各种符号分割，但不要使用 - 号</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">testcase:</span></span><br><span class="line">  <span class="attr">book:</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">$&#123;random.int(10)&#125;</span> <span class="comment"># 设置范围 10以内</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$&#123;random.value&#125;</span></span><br><span class="line">    <span class="attr">uuid:</span> <span class="string">$&#123;random.uuid&#125;</span></span><br><span class="line">    <span class="attr">publishTime:</span> <span class="string">$&#123;random.long&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;testcase.book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookCase</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String uuid;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> publishTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertiesAndArgsTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookCase bookCase;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testProperties</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(bookCase);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据层解决方案SQL"><a href="#数据层解决方案SQL" class="headerlink" title="数据层解决方案SQL"></a>数据层解决方案SQL</h2><h3 id="现有数据层解决方案技术选型"><a href="#现有数据层解决方案技术选型" class="headerlink" title="现有数据层解决方案技术选型"></a>现有数据层解决方案技术选型</h3><p><strong>Druid+MyBatis-Plus+MySQL</strong></p><ul><li>数据源：DruidDataSource</li><li>持久化技术：MyBatis-Plus&#x2F;MyBatis</li><li>数据库：MySQL</li></ul><h3 id="数据源内嵌配置"><a href="#数据源内嵌配置" class="headerlink" title="数据源内嵌配置"></a>数据源内嵌配置</h3><p>SpringBoot提供了三种内嵌的数据源对象共开发者选择</p><ul><li>HikariCP (springboot默认的配置)：默认内置数据源对象</li><li>Tomcat提供DataSource：HikariCP 不可用的情况下，且在web环境下，将使用tomcat服务器配置的数据源对象</li><li>Commons DBCP：HikariCP 不可用，tomcat数据源也不可用，将使用dbcp数据源</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># druid配置</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span>   <span class="comment"># 把druid禁用后 默认为Hikari配置</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nian0209</span></span><br><span class="line">  <span class="comment"># Hikari配置 </span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nian0209</span></span><br></pre></td></tr></table></figure><h3 id="内置持久化解决方案-JdbcTemplate"><a href="#内置持久化解决方案-JdbcTemplate" class="headerlink" title="内置持久化解决方案-JdbcTemplate"></a>内置持久化解决方案-JdbcTemplate</h3><p>在不使用MyBatis&#x2F;MyBatis-Plus的时候使用内置的JdbcTemlpate</p><ul><li><p>注意需要导入jdbc坐标</p></li><li><p>需要将mybatis相关配置关闭</p></li><li><p>jdbc依赖中携带了Hikari数据源依赖</p></li><li><p>可以在springboot配置文件中配置JdbcTemplate的相关配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/5.png" alt="Hikari数据源依赖"></p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nian0209</span></span><br><span class="line">  <span class="attr">jdbc:</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">fetch-size:</span> <span class="number">-1</span>    <span class="comment"># 缓存行数</span></span><br><span class="line">      <span class="attr">max-rows:</span> <span class="number">500</span>     <span class="comment"># 最大行数</span></span><br><span class="line">      <span class="attr">query-timeout:</span> <span class="number">-1</span> <span class="comment"># 查询超时时间</span></span><br></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcTemplateTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//由springboot容器注入JdbcTemplate数据源</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="comment">//查询 查询格式对于方法架构</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testJdbc</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from tbl_book where id =1&quot;</span>;</span><br><span class="line">        List&lt;Book&gt; qurey = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">RowMapper</span>&lt;Book&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Book <span class="title function_">mapRow</span><span class="params">(ResultSet rs,<span class="type">int</span> rowNum)</span><span class="keyword">throws</span> SQLException&#123;</span><br><span class="line">                <span class="type">Book</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">                temp.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                temp.setName(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                temp.setType(rs.getString(<span class="string">&quot;Type&quot;</span>));</span><br><span class="line">                temp.setDescription(rs.getString(<span class="string">&quot;description&quot;</span>));</span><br><span class="line">                <span class="keyword">return</span> temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(qurey);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;Insert into tbl_book values(null,&#x27;1&#x27;,&#x27;2&#x27;&#x27;3&#x27;)&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内嵌数据库"><a href="#内嵌数据库" class="headerlink" title="内嵌数据库"></a>内嵌数据库</h3><ul><li>SpringBoot提供了三种内嵌数据库共开发者选择，提高开发测试效率<ul><li>H2</li><li>HSQL</li><li>Derby</li></ul></li></ul><p>三种数据库均是Java语言编写，可以在springboot环境中运行</p><ul><li>H2是内存数据库仅在开发阶段建议测试使用，上线后树妖将配置文件里H<strong>2下的enabled改为false</strong> 如何使用：<a href="https://blog.csdn.net/qq_34845394/article/details/107190256"> H2数据库入门，看这篇就对了_不敲代码的攻城狮的博客-CSDN博客_h2数据库</a></li></ul><h2 id="NoSQL解决方案"><a href="#NoSQL解决方案" class="headerlink" title="NoSQL解决方案"></a>NoSQL解决方案</h2><ul><li>市面上常见的NoSQL解决方案<ul><li>Redis</li><li>Mongo</li><li>ES</li></ul></li></ul><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ul><li>Redis是一款key-values存储结构的内存级NoSQL数据库<ul><li>支持多中数据存储格式</li><li>支持持久化</li><li>支持集群</li></ul></li></ul><h4 id="Redis基本安装-windows"><a href="#Redis基本安装-windows" class="headerlink" title="Redis基本安装(windows)"></a>Redis基本安装(windows)</h4><ul><li><a href="https://github.com/tporadowski/redis/releases">Releases · tporadowski&#x2F;redis (github.com)</a></li><li>访问github下载windows版本的redis即可</li></ul><h4 id="Redis基本操作"><a href="#Redis基本操作" class="headerlink" title="Redis基本操作"></a>Redis基本操作</h4><ul><li>大型的哈希表 使用key-values形式</li><li><a href="https://blog.csdn.net/luna_a/article/details/107292994">Redis基本操作命令（图文详解）_进击小高的博客-CSDN博客_redis操作命令</a></li></ul><h5 id="第一次启动redis"><a href="#第一次启动redis" class="headerlink" title="第一次启动redis"></a>第一次启动redis</h5><ul><li>首先文件夹下cmd窗口运行 <strong>redis-server.exe  redis.windows.conf</strong> 运行服务器加指定配置</li><li>第一次运行会出现bug 运行出错<ul><li>所以得再另开一个cmd窗口 运行客户程序<strong>redis-cli.exe</strong>，输入shutdown 再exit退出即可</li><li>再重新运行 <strong>redis-server.exe  redis.windows.conf</strong></li></ul></li><li>服务器启动</li><li>清除数据<ul><li><a href="https://blog.csdn.net/weixin_43845597/article/details/89631540"> 如何清理Redis中的缓存_灬文羽轩灬的博客-CSDN博客_redis缓存清理</a></li></ul></li></ul><h4 id="SpirngBoot整合Redis"><a href="#SpirngBoot整合Redis" class="headerlink" title="SpirngBoot整合Redis"></a>SpirngBoot整合Redis</h4><h5 id="1-导入Redis坐标"><a href="#1-导入Redis坐标" class="headerlink" title="1.导入Redis坐标"></a>1.导入Redis坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-在springboot配置文件中加入配置-可省略"><a href="#2-在springboot配置文件中加入配置-可省略" class="headerlink" title="2.在springboot配置文件中加入配置(可省略)"></a>2.在springboot配置文件中加入配置(可省略)</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><h5 id="3-注入redisTemplate对象-操作接口对象操作"><a href="#3-注入redisTemplate对象-操作接口对象操作" class="headerlink" title="3.注入redisTemplate对象 操作接口对象操作"></a>3.注入redisTemplate对象 操作接口对象操作</h5><h4 id="Redis-两种注入方法"><a href="#Redis-两种注入方法" class="headerlink" title="Redis 两种注入方法"></a>Redis 两种注入方法</h4><h5 id="客户端：RedisTemplate以对象作为key和value，内部对数据进行序列化"><a href="#客户端：RedisTemplate以对象作为key和value，内部对数据进行序列化" class="headerlink" title="客户端：RedisTemplate以对象作为key和value，内部对数据进行序列化"></a>客户端：RedisTemplate以对象作为key和value，内部对数据进行序列化</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot12RedisApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    private StringRedisTemplate stringRedisTemplate;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ValueOperations</span> <span class="variable">ops</span> <span class="operator">=</span> redisTemplate.opsForValue();</span><br><span class="line">        <span class="type">HashOperations</span> <span class="variable">oph</span> <span class="operator">=</span> redisTemplate.opsForHash();</span><br><span class="line">        ops.set(<span class="string">&quot;age&quot;</span>,<span class="number">41</span>);</span><br><span class="line">        oph.put(<span class="string">&quot;info&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ValueOperations</span> <span class="variable">ops</span> <span class="operator">=</span> redisTemplate.opsForValue();</span><br><span class="line">        <span class="type">HashOperations</span> <span class="variable">oph</span> <span class="operator">=</span> redisTemplate.opsForHash();</span><br><span class="line">        oph.get(<span class="string">&quot;info&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">age</span> <span class="operator">=</span> ops.get(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        System.out.println(age);</span><br><span class="line">        System.out.println(oph);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="客户端StringRedisTemplate-常用-以字符串作为key和value，与Redis客户端操作等效"><a href="#客户端StringRedisTemplate-常用-以字符串作为key和value，与Redis客户端操作等效" class="headerlink" title="客户端StringRedisTemplate(常用)以字符串作为key和value，与Redis客户端操作等效"></a>客户端StringRedisTemplate(常用)以字符串作为key和value，与Redis客户端操作等效</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">sets</span><span class="params">(<span class="meta">@Autowired</span> StringRedisTemplate stringRedisTemplate)</span>&#123;</span><br><span class="line">    <span class="type">ValueOperations</span> <span class="variable">ops</span> <span class="operator">=</span> stringRedisTemplate.opsForValue();</span><br><span class="line">    ops.set(<span class="string">&quot;testKey&quot;</span>,<span class="string">&quot;TestValue&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">gets</span><span class="params">(<span class="meta">@Autowired</span> StringRedisTemplate stringRedisTemplate)</span>&#123;</span><br><span class="line">    ValueOperations&lt;String, String&gt; ops = stringRedisTemplate.opsForValue();</span><br><span class="line">    <span class="type">String</span> <span class="variable">testKey</span> <span class="operator">=</span> ops.get(<span class="string">&quot;testKey&quot;</span>);</span><br><span class="line">    System.out.println(testKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="jedis客户端"><a href="#jedis客户端" class="headerlink" title="jedis客户端"></a>jedis客户端</h4><h5 id="1-导入jedis坐标"><a href="#1-导入jedis坐标" class="headerlink" title="1.导入jedis坐标"></a>1.导入jedis坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-设置client-type"><a href="#2-设置client-type" class="headerlink" title="2.设置client-type"></a>2.设置client-type</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">client-type:</span> <span class="string">jedis</span></span><br></pre></td></tr></table></figure><h4 id="客户端：lettcus-默认-与jedis区别"><a href="#客户端：lettcus-默认-与jedis区别" class="headerlink" title="客户端：lettcus(默认)与jedis区别"></a>客户端：lettcus(默认)与jedis区别</h4><ul><li><p>jedis连接Redis服务器是直连模式，当多线程模式下使用jedis会存在线程安全问题，解决方案可以通过配置连接池使每个连接专 用，这样整体性能就大受影响。</p></li><li><p>lettcus基于Netty框架进行与Redis服务器连接，底层设计中采用StatefulRedisConnection。 StatefulRedisConnection自身是线程安全的，可以保障并发访问安全问题，所以一个连接可以被多线程复用。当然lettcus也支持多连接实例一起工作</p></li></ul><h3 id="MangoDB"><a href="#MangoDB" class="headerlink" title="MangoDB"></a>MangoDB</h3><p>支持结构化的数据存储并且访问速度很快</p><ul><li><p>一个开源，高性能，<strong>无模式</strong>的<strong>文档型</strong>数据库。NoSQL数据库产品中的一种，是最像关系型数据库的非关系型数据库</p></li><li><p>存放的数据大多数是<strong>修改频率高</strong>，临时存储</p></li></ul><h4 id="Mongodb基本安装"><a href="#Mongodb基本安装" class="headerlink" title="Mongodb基本安装"></a>Mongodb基本安装</h4><ul><li><p>windows安装mongodb <a href="https://www.mongodb.com/try/download/community">MongoDB Community Download | MongoDB</a></p></li><li><p>解压缩后配置文件目录</p></li><li><p>windows下启动Mongo</p><ul><li>服务端启动：mongd –dbpath..\data\db</li><li>客户端启动：mongo (默认端口：27017 访问地址：127.0.0.1)</li></ul></li><li><p>使用navicat连接mongo数据库</p></li></ul><h4 id="Mongodb基本操作"><a href="#Mongodb基本操作" class="headerlink" title="Mongodb基本操作"></a>Mongodb基本操作</h4><p><a href="https://blog.csdn.net/PILIpilipala/article/details/113818320"> 超级详细MongoDB 的基本操作(理论+举例)_11.28.的博客-CSDN博客</a></p><p><img src="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/6.png" alt="Mongdb操作"></p><h4 id="SpirngBoot整合MongDB"><a href="#SpirngBoot整合MongDB" class="headerlink" title="SpirngBoot整合MongDB"></a>SpirngBoot整合MongDB</h4><h5 id="1-导入对应坐标"><a href="#1-导入对应坐标" class="headerlink" title="1.导入对应坐标"></a>1.导入对应坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-配置mongodb数据库地址"><a href="#2-配置mongodb数据库地址" class="headerlink" title="2.配置mongodb数据库地址"></a>2.配置mongodb数据库地址</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">mongodb:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">mongodb://localhost/user</span></span><br></pre></td></tr></table></figure><h5 id="3-使用MongoTemplate接口客户端读写测试"><a href="#3-使用MongoTemplate接口客户端读写测试" class="headerlink" title="3.使用MongoTemplate接口客户端读写测试"></a>3.使用MongoTemplate接口客户端读写测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot13MongdbApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setId(<span class="number">1</span>);</span><br><span class="line">        book.setName(<span class="string">&quot;springboot&quot;</span>);</span><br><span class="line">        book.setType(<span class="string">&quot;math&quot;</span>);</span><br><span class="line">        book.setDescription(<span class="string">&quot;good book&quot;</span>);</span><br><span class="line">        mongoTemplate.save(book);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">find</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Book&gt; all = mongoTemplate.findAll(Book.class);</span><br><span class="line">        System.out.println(all);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Elasticesearch-ES"><a href="#Elasticesearch-ES" class="headerlink" title="Elasticesearch(ES)"></a>Elasticesearch(ES)</h3><ul><li>Elasticesearch是一个分布式全文搜索引擎</li></ul><p><img src="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/7.png" alt="多段索引"></p><h4 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h4><ul><li>创建&#x2F;查询&#x2F;删除索引<ul><li>PUT   <a href="http://localhost:9200/books">http://localhost:9200/books</a></li><li>GET   <a href="http://localhost:9200/books">http://localhost:9200/books</a></li><li>DELETE   <a href="http://localhost:9200/books">http://localhost:9200/books</a></li></ul></li></ul><h4 id="添加ik分词器"><a href="#添加ik分词器" class="headerlink" title="添加ik分词器"></a>添加ik分词器</h4><p>将ik分词器解衣后存放在es目录下的plugins里</p><h4 id="创建索引并指定规则"><a href="#创建索引并指定规则" class="headerlink" title="创建索引并指定规则"></a>创建索引并指定规则</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;mappings&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">        <span class="string">&quot;properties&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span><span class="string">:&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;name&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span><span class="string">:&quot;text&quot;</span>,</span><br><span class="line">        <span class="string">&quot;analyzer&quot;</span><span class="string">:&quot;ik_max_word&quot;</span>,</span><br><span class="line">        <span class="string">&quot;copy_to&quot;</span><span class="string">:&quot;all&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;type&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span><span class="string">:&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;decription&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span><span class="string">:&quot;text&quot;</span>,</span><br><span class="line">        <span class="string">&quot;analyzer&quot;</span><span class="string">:&quot;ik_max_word&quot;</span>,</span><br><span class="line">        <span class="string">&quot;copy_to&quot;</span><span class="string">:&quot;all&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># 设计型字段 将name和decription里的字段统一读入</span></span><br><span class="line">        <span class="string">&quot;all&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span><span class="string">:&quot;text&quot;</span>,</span><br><span class="line">        <span class="string">&quot;analyzer&quot;</span><span class="string">:&quot;ik_max_word&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h4><p>PUT   <a href="http://localhost:9200/books/_doc">http://localhost:9200/books/_doc</a></p><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><ul><li>查询文档：<ul><li>GET   <a href="http://localhost:9200/books/_doc/1">http://localhost:9200/books/_doc/1</a>    查询单个</li><li>GET   <a href="http://localhost:9200/books/_search">http://localhost:9200/books/_search</a>   查询全部</li></ul></li><li>条件查询：GET   <a href="http://localhost:9200/books/_search">http://localhost:9200/books/_search</a> ?q&#x3D;name:springboot(条件)</li></ul><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><ul><li>DELETE    <a href="http://localhost:9200/books/_doc/1">http://localhost:9200/books/_doc/1</a></li></ul><h4 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h4><ul><li><p>全量修改</p><ul><li><p>PUT   <a href="http://localhost:9200/books/_doc/1">http://localhost:9200/books/_doc/1</a></p><p>{</p><p>​        “name”:”springboot”,</p><p>​”type“:”springboot”,</p><p>​“description”:”springboot”</p><p>}</p></li></ul></li><li><p>部分修改</p><ul><li><p>POST   <a href="http://localhost:9200/books/_update/1">http://localhost:9200/books/_update/1</a></p><p>{</p><p>​“doc”:{</p><p>​“name”:”springboot”,</p><p>​}</p><p>}</p></li></ul></li></ul><h4 id="springboot整合ES"><a href="#springboot整合ES" class="headerlink" title="springboot整合ES"></a>springboot整合ES</h4><ul><li>因为视频中的方法以被springboot弃用，所以使用新的技术 在高版本的springboot中已经整合了High level client 可以使用注入bean来返回客户端</li></ul><p><a href="https://blog.csdn.net/gybshen/article/details/111469217">Spring Boot整合Elasticsearch，最新最全教程_Cloud-Future的博客-CSDN博客_springboot整合elasticsearch</a></p><p><a href="https://blog.csdn.net/weixin_45721467/article/details/107990031"> SpringBoot 整合 high-level-client_张凯生的博客-CSDN博客</a></p><h2 id="整合第三方技术"><a href="#整合第三方技术" class="headerlink" title="整合第三方技术"></a>整合第三方技术</h2><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><ul><li><p>缓存是一种介于数据永久存储介质与属于应用之间的数据临时存储介质</p></li><li><p>使用缓存可以有效的减少低速数据读取过程的次数(例如：磁盘IO)，提高系统性能</p></li><li><p>缓存不仅可以用于提高永久性存储介质的数据读取效率，还可以提高临时的数据存储空间</p></li></ul><h4 id="模拟缓存"><a href="#模拟缓存" class="headerlink" title="模拟缓存"></a>模拟缓存</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟缓存</span></span><br><span class="line"><span class="keyword">private</span> HashMap&lt;Integer,Book&gt; cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    <span class="comment">//如果当前缓存中没有本次查询的数据，则在数据库中进行查询，否则直接在缓存中读取返回</span></span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> cache.get(id);</span><br><span class="line">    <span class="keyword">if</span> (book==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">queryBook</span> <span class="operator">=</span> bookDao.selectById(id);</span><br><span class="line">        cache.put(id,queryBook);</span><br><span class="line">        <span class="keyword">return</span> queryBook;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cache.get(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Springboot提高了缓存技术，方便缓存使用"><a href="#Springboot提高了缓存技术，方便缓存使用" class="headerlink" title="Springboot提高了缓存技术，方便缓存使用"></a>Springboot提高了缓存技术，方便缓存使用</h4><h5 id="启用缓存"><a href="#启用缓存" class="headerlink" title="启用缓存"></a>启用缓存</h5><ul><li>导入缓存依赖坐标</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--cache--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在springboot启动程序入口设置启用缓存 注解 <strong>@EnableCaching</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 开启缓存功能</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot15CacheApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Springboot15CacheApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在需要使用缓存的地方设置开启缓存功能 <strong>@Cacheable</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">//开启缓存，缓存空间为cacheSpace，查找条件为key=id</span></span><br><span class="line"><span class="meta">@Cacheable(value = &quot;cacheSpace&quot;,key =&quot;#id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> bookDao.selectById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Springboot-提供的缓存技术除了默认的缓存方案，还可以对其他缓存技术进行整合，统一接口，方便缓存的开发与管理"><a href="#Springboot-提供的缓存技术除了默认的缓存方案，还可以对其他缓存技术进行整合，统一接口，方便缓存的开发与管理" class="headerlink" title="Springboot 提供的缓存技术除了默认的缓存方案，还可以对其他缓存技术进行整合，统一接口，方便缓存的开发与管理"></a>Springboot 提供的缓存技术除了默认的缓存方案，还可以对其他缓存技术进行整合，统一接口，方便缓存的开发与管理</h5><ul><li>Generic</li><li>JCache</li><li>Ehcache</li><li>Hazelacst</li><li>infinispan</li><li>Coushbase</li><li>Redis</li><li>Caffenine</li><li>Simple(默认)</li><li>memcached(市面上，常用的缓存技术)</li></ul><h5 id="缓存使用案例—手机验证码"><a href="#缓存使用案例—手机验证码" class="headerlink" title="缓存使用案例—手机验证码"></a>缓存使用案例—手机验证码</h5><ul><li><p>需求</p><ul><li>输入手机号获取验证码，组织文档以短信形式发送给用户(页面模拟)</li><li>输入手机号和验证码验证结果</li></ul></li><li><p>需求分析</p><ul><li>提供controller，传入手机号，业务层通过手机号计算出独有的六位验证码数据，存入缓存后返回此数据</li><li>提供controller，传入手机号与验证码，业务层通过手机号从缓存中读取验证码与输入的验证码进行比对</li></ul></li></ul><h3 id="springboot整合ehcache缓存"><a href="#springboot整合ehcache缓存" class="headerlink" title="springboot整合ehcache缓存"></a>springboot整合ehcache缓存</h3><p>导入坐标依赖</p><ul><li>注意springboot的版本稳定为2.5.x</li><li>添加ehcache配置文件</li><li>在springboot的配置文件中配置ehcache</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">updateCheck</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;D:\ehcache&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--默认缓存策略 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- external：是否永久存在，设置为true则不会被清除，此时与timeout冲突，通常设置为false--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- diskPersistent：是否启用磁盘持久化--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- maxElementsInMemory：最大缓存数量--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- overflowToDisk：超过最大缓存数量是否持久化到磁盘--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- timeToIdleSeconds：最大不活动间隔，设置过长缓存容易溢出，设置过短无效果，可用于记录时效性数据，例如验证码--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- timeToLiveSeconds：最大存活时间--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- memoryStoreEvictionPolicy：缓存清除策略--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">diskPersistent</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;60&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;60&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 添加其他缓存策略--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">&quot;smsCode&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">diskPersistent</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 缓存技术选择</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">ehcache</span></span><br><span class="line">    <span class="attr">ehcache:</span></span><br><span class="line">      <span class="attr">config:</span> <span class="string">classpath:ehcache.xml</span></span><br></pre></td></tr></table></figure><h3 id="转换缓存方案为Redis"><a href="#转换缓存方案为Redis" class="headerlink" title="转换缓存方案为Redis"></a>转换缓存方案为Redis</h3><p>springboot中切换缓存方案为Redis</p><ul><li>导入依赖</li><li>在springboot的配置文件中配置Redis相关内容</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="comment"># 缓存技术选择 redis配置 需要开redis服务器</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="comment"># 是否缓存空值</span></span><br><span class="line">      <span class="attr">cache-null-values:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 是否使用前缀 开启false之后 key-prefix的配置不起作用</span></span><br><span class="line">      <span class="attr">use-key-prefix:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 指定前缀</span></span><br><span class="line">      <span class="attr">key-prefix:</span> <span class="string">aa</span></span><br><span class="line">      <span class="comment"># 最大活动时间</span></span><br><span class="line">      <span class="attr">time-to-live:</span> <span class="string">10s</span></span><br></pre></td></tr></table></figure><h3 id="memchaed-需要重新配置-window下安装有问题"><a href="#memchaed-需要重新配置-window下安装有问题" class="headerlink" title="memchaed 需要重新配置 window下安装有问题"></a>memchaed 需要重新配置 window下安装有问题</h3><p><a href="https://www.cnblogs.com/ringbug/p/15595371.html">memcached 安装及集成(转) - Jsonring - 博客园 (cnblogs.com)</a></p><h3 id="缓存供应商变更jetcache"><a href="#缓存供应商变更jetcache" class="headerlink" title="缓存供应商变更jetcache"></a>缓存供应商变更jetcache</h3><ul><li><p>jetCache对SpringCache进行了封装，在原有功能的基础上实现了多级缓存，缓存统计，自动刷新，异步调用，数据报表等功能</p></li><li><p>jetCache设定了本地缓存与远程缓存的多级缓存解决方案</p><ul><li>本地缓存(local)<ul><li>LinkedHashMap</li><li>Caffeine</li></ul></li><li>远程缓存(remote)<ul><li>Redis</li><li>Tair</li></ul></li></ul></li></ul><h4 id="加入坐标依赖"><a href="#加入坐标依赖" class="headerlink" title="加入坐标依赖"></a>加入坐标依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alicp.jetcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetcache-starter-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="本地缓存也远程缓存共存"><a href="#本地缓存也远程缓存共存" class="headerlink" title="本地缓存也远程缓存共存"></a>本地缓存也远程缓存共存</h4><ul><li>remote</li><li>local</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jetcache:</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">  <span class="comment"># 默认</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">linkedhashmap</span></span><br><span class="line">      <span class="attr">keyConvertor:</span> <span class="string">fastjson</span></span><br><span class="line">  <span class="attr">remote:</span></span><br><span class="line">  <span class="comment"># 默认</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">poolConfig:</span></span><br><span class="line">        <span class="attr">maxTotal:</span> <span class="number">50</span></span><br><span class="line">    <span class="comment"># 远程配置2</span></span><br><span class="line">    <span class="attr">sms:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">poolConfig:</span></span><br><span class="line">        <span class="attr">maxTotal:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure><p><img src="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/8.png" alt="基本配置"></p><h4 id="开启使用jetCache-注解：-EnableCreateCacheAnnotation"><a href="#开启使用jetCache-注解：-EnableCreateCacheAnnotation" class="headerlink" title="开启使用jetCache 注解：**@EnableCreateCacheAnnotation**"></a>开启使用jetCache 注解：**@EnableCreateCacheAnnotation**</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//jetcache启用缓存的主开关</span></span><br><span class="line"><span class="meta">@EnableCreateCacheAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot16JetcacheApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Springboot16JetcacheApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="声明缓存对象"><a href="#声明缓存对象" class="headerlink" title="声明缓存对象"></a>声明缓存对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SMSCodeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SMSCodeService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CodeUtils codeUtils;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// remote</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置过期时间 默认为秒 设置本地访问:cacheType = CacheType.LOCAL</span></span><br><span class="line">    <span class="meta">@CreateCache(name=&quot;jetCache&quot;,expire = 3600,timeUnit =  TimeUnit.SECONDS,cacheType = CacheType.LOCAL)</span></span><br><span class="line">    <span class="keyword">private</span> Cache&lt;String,String&gt; jetCache;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置过期时间 默认为秒  方案2</span></span><br><span class="line"><span class="comment">//    @CreateCache(area = &quot;sms&quot;,name=&quot;jetCache&quot;,expire = 10,timeUnit =  TimeUnit.SECONDS)</span></span><br><span class="line"><span class="comment">//    private Cache&lt;String,String&gt; jetCache1;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendCodeToSMS</span><span class="params">(String tele)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> codeUtils.generator(tele);</span><br><span class="line">        jetCache.put(tele,code);</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkCode</span><span class="params">(SMSCode smsCode)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> jetCache.get(smsCode.getTele());</span><br><span class="line">        <span class="keyword">return</span> smsCode.getCode().equals(code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启用方法注解"><a href="#启用方法注解" class="headerlink" title="启用方法注解"></a>启用方法注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//jetcache启用缓存的主开关</span></span><br><span class="line"><span class="meta">@EnableCreateCacheAnnotation</span></span><br><span class="line"><span class="comment">//开启方法注解缓存 在方法头上设置开启缓存 指定扫描的包</span></span><br><span class="line"><span class="meta">@EnableMethodCache(basePackages = &quot;ithima&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot16JetcacheApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Springboot16JetcacheApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h5><ul><li>缓存对象必须保障可序列话</li><li>设置编码</li><li>设置增删查改的缓存操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jetcache:</span></span><br><span class="line">  <span class="comment"># 查看缓存统计报告</span></span><br><span class="line">  <span class="attr">statIntervaMinutes:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">linkedhashmap</span></span><br><span class="line">      <span class="attr">keyConvertor:</span> <span class="string">fastjson</span></span><br><span class="line">  <span class="attr">remote:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">keyConvertor:</span> <span class="string">fastjson</span></span><br><span class="line">      <span class="attr">valueEncode:</span> <span class="string">java</span></span><br><span class="line">      <span class="attr">valueDecode:</span> <span class="string">java</span></span><br><span class="line">      <span class="attr">poolConfig:</span></span><br><span class="line">        <span class="attr">maxTotal:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;BookDao, Book&gt; <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//开启缓存，缓存空间为cacheSpace，查找条件为key=id 设置为本地</span></span><br><span class="line">    <span class="meta">@Cached(name=&quot;book_&quot;,key=&quot;#id&quot;,expire = 3600,cacheType = CacheType.REMOTE)</span></span><br><span class="line">    <span class="meta">@CacheRefresh(refresh = 10,timeUnit = TimeUnit.SECONDS)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新操作 更新时将缓存中对应的数据一起更新</span></span><br><span class="line">    <span class="meta">@CacheUpdate(name=&quot;book_&quot;,key=&quot;#book.id&quot;,value=&quot;#book&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.updateById(book)&gt;<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除操作 删除时将缓存中对应的数据一起删除</span></span><br><span class="line">    <span class="meta">@CacheInvalidate(name = &quot;book_&quot;,key=&quot;#id&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.deleteById(id)&gt;<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缓存供应商变更：j2cache"><a href="#缓存供应商变更：j2cache" class="headerlink" title="缓存供应商变更：j2cache"></a>缓存供应商变更：j2cache</h3><ul><li>j2cache是一个缓存整合框架，可以提供缓存的整合方案，使各种缓存搭配使用，自身并不提供缓存功能</li><li>基于ebcache+redis进行整合</li></ul><h4 id="添加坐标"><a href="#添加坐标" class="headerlink" title="添加坐标"></a>添加坐标</h4><ul><li>加入整合坐标</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--j2cache核心坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.oschina.j2cache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>j2cache-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.5-release<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--springboot整合j2cache坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.oschina.j2cache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>j2cache-spring-boot2-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0-release<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--整合ehcache，使用其他就换其他坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在springboot配置文件中设置j2cache的配置文件"><a href="#在springboot配置文件中设置j2cache的配置文件" class="headerlink" title="在springboot配置文件中设置j2cache的配置文件"></a>在springboot配置文件中设置j2cache的配置文件</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">j2cache:</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">j2cache.properties</span></span><br></pre></td></tr></table></figure><h4 id="配置一级缓存和二级缓存以及一级缓存数据到二级缓存的发送方式"><a href="#配置一级缓存和二级缓存以及一级缓存数据到二级缓存的发送方式" class="headerlink" title="配置一级缓存和二级缓存以及一级缓存数据到二级缓存的发送方式"></a>配置一级缓存和二级缓存以及一级缓存数据到二级缓存的发送方式</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1级缓存</span></span><br><span class="line"><span class="comment"># 配置供应商</span></span><br><span class="line"><span class="attr">j2cache.L1.provider_class</span> = <span class="string">ehcache</span></span><br><span class="line"><span class="attr">ehcache.configXml</span> = <span class="string">ehcache.xml</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 设置是否启用二级缓存</span></span><br><span class="line"><span class="attr">j2cache-l2-open</span> = <span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 2级缓存</span></span><br><span class="line"><span class="comment"># 配置供应商</span></span><br><span class="line"><span class="attr">j2cache.L2.provider_class</span> = <span class="string">net.oschina.j2cache.cache.support.redis.SpringRedisProvider</span></span><br><span class="line"><span class="attr">j2cache.L2.config_section</span> = <span class="string">redis</span></span><br><span class="line"><span class="attr">redis.hosts</span> = <span class="string">localhost:6379</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 1级缓存中的数据如何到达二级缓存中</span></span><br><span class="line"><span class="comment"># 配置一级缓存数据到二级缓存数据的广播方式：可以使用redis提供的消息订阅模式，也可以使用groups 多播实现</span></span><br><span class="line"><span class="attr">j2cache.broadcast</span> =<span class="string">net.oschina.j2cache.cache.support.redis.SpringRedisPubSubPolicy</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置redis模式</span></span><br><span class="line"><span class="attr">redis.mode</span> = <span class="string">single</span></span><br></pre></td></tr></table></figure><h4 id="设置缓存对象，操作数据"><a href="#设置缓存对象，操作数据" class="headerlink" title="设置缓存对象，操作数据"></a>设置缓存对象，操作数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SMSCodeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SMSCodeService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CodeUtils codeUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CacheChannel cacheChannel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendCodeToSMS</span><span class="params">(String tele)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> codeUtils.generator(tele);</span><br><span class="line">        cacheChannel.set(<span class="string">&quot;sms&quot;</span>,tele,code);</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkCode</span><span class="params">(SMSCode smsCode)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> cacheChannel.get(<span class="string">&quot;sms&quot;</span>,smsCode.getTele()).asString();</span><br><span class="line">        <span class="keyword">return</span> smsCode.getCode().equals(code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><ul><li><p>定时任务是企业级应用中的常见操作</p><ul><li>年度报表</li><li>缓存统计报告</li><li>… …</li></ul></li><li><p>市面上流行的定时任务技术</p><ul><li>Quartz</li><li>Spring Task</li></ul></li></ul><h3 id="Springboot-整合Quartz"><a href="#Springboot-整合Quartz" class="headerlink" title="Springboot 整合Quartz"></a>Springboot 整合Quartz</h3><ul><li>相关概念<ul><li>工作(Job):用于定义具体执行的工作</li><li>工作明细(JobDetail):用于描述定时工作相关的信息</li><li>触发器(Trigger):用于描述工作的规则，通常使用cron表达定义调度规则</li><li>调度器(Scheduler):描述工作明细与触发器的对应关系</li></ul></li></ul><h4 id="导入对应坐标"><a href="#导入对应坐标" class="headerlink" title="导入对应坐标"></a>导入对应坐标</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="定义具体要执行的任务"><a href="#定义具体要执行的任务" class="headerlink" title="定义具体要执行的任务"></a>定义具体要执行的任务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyQuartz</span> <span class="keyword">extends</span> <span class="title class_">QuartzJobBean</span> &#123;</span><br><span class="line">    <span class="comment">// 具体要做的事</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">executeInternal</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Quartz job is running....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义工作明细与触发器，并绑定对应关系"><a href="#定义工作明细与触发器，并绑定对应关系" class="headerlink" title="定义工作明细与触发器，并绑定对应关系"></a>定义工作明细与触发器，并绑定对应关系</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JobDetail <span class="title function_">printJobDetail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//绑定具体工作</span></span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob(MyQuartz.class).storeDurably().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Trigger <span class="title function_">printTrigger</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//绑定具体的工作明显</span></span><br><span class="line">        ScheduleBuilder&lt;? <span class="keyword">extends</span> <span class="title class_">Trigger</span>&gt; schedBuilder = CronScheduleBuilder.cronSchedule(<span class="string">&quot;0/5 * * * * ?&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> TriggerBuilder.newTrigger().forJob(printJobDetail()).withSchedule(schedBuilder).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spring-task"><a href="#spring-task" class="headerlink" title="spring task"></a>spring task</h3><h4 id="设置开启定时任务功能开关"><a href="#设置开启定时任务功能开关" class="headerlink" title="设置开启定时任务功能开关"></a>设置开启定时任务功能开关</h4><ul><li>在springboot启动类入口使用注解 <strong>@EnableScheduling</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//开启定时任务功能</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">springboot18TaskApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(springboot18TaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设置定时执行的任务"><a href="#设置定时执行的任务" class="headerlink" title="设置定时执行的任务"></a>设置定时执行的任务</h4><ul><li>在方法上直接使用注解来指定要定时执行的任务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置执行时间</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/3 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;spring task is running.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置spring task线程前缀</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">task:</span></span><br><span class="line">    <span class="attr">execution:</span></span><br><span class="line">      <span class="attr">thread-name-prefix:</span> <span class="string">spring_task_</span></span><br></pre></td></tr></table></figure><h3 id="springboot-整合JavaMail"><a href="#springboot-整合JavaMail" class="headerlink" title="springboot 整合JavaMail"></a>springboot 整合JavaMail</h3><h4 id="发送简单邮件"><a href="#发送简单邮件" class="headerlink" title="发送简单邮件"></a>发送简单邮件</h4><ul><li>SMTP(Simple Mail Transfer Protocol):简单邮件传输协议，用于发送电子邮件的传输协议</li><li>POP3(Post Office Protocol -Version3):用于接收电子邮件的标准协议</li><li>IMAP(Internet Mail Access Protocol):互联网消息协议，是POP3的替代协议</li></ul><h5 id="导入对应Javamail坐标"><a href="#导入对应Javamail坐标" class="headerlink" title="导入对应Javamail坐标"></a>导入对应Javamail坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置smtp协议POP3协议"><a href="#配置smtp协议POP3协议" class="headerlink" title="配置smtp协议POP3协议"></a>配置smtp协议POP3协议</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="comment"># 邮件服务器供应商</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.qq.com</span></span><br><span class="line">    <span class="attr">username:</span> <span class="number">2976908</span><span class="string">***@qq.com</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxuchqhavybxde**</span></span><br></pre></td></tr></table></figure><h5 id="设置邮件客户端"><a href="#设置邮件客户端" class="headerlink" title="设置邮件客户端"></a>设置邮件客户端</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMailServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SendMailService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送人</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">from</span> <span class="operator">=</span> <span class="string">&quot;2976908***@qq.com&quot;</span>;</span><br><span class="line">    <span class="comment">//接收人</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">to</span> <span class="operator">=</span> <span class="string">&quot;129577****@qq.com&quot;</span>;</span><br><span class="line">    <span class="comment">//标题</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="string">&quot;测试邮件&quot;</span>;</span><br><span class="line">    <span class="comment">//测试邮件正文</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">context</span> <span class="operator">=</span> <span class="string">&quot;测试邮件正文内容&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender javaMailSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SendMail</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleMailMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>();</span><br><span class="line">        message.setFrom(from);</span><br><span class="line">        message.setTo(to);</span><br><span class="line">        message.setSubject(subject);</span><br><span class="line">        message.setText(context);</span><br><span class="line">        javaMailSender.send(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="发送复杂邮件"><a href="#发送复杂邮件" class="headerlink" title="发送复杂邮件"></a>发送复杂邮件</h4><ul><li>使用MimeMessageHelper对象</li><li>发送html 需要开启 helper.setText(context,true);</li><li>发送附件MimeMessageHelper(message,true);</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMailServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SendMailService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送人</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">from</span> <span class="operator">=</span> <span class="string">&quot;2976908894@qq.com&quot;</span>;</span><br><span class="line">    <span class="comment">//接收人</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">to</span> <span class="operator">=</span> <span class="string">&quot;1295773125@qq.com&quot;</span>;</span><br><span class="line">    <span class="comment">//标题</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="string">&quot;测试邮件&quot;</span>;</span><br><span class="line">    <span class="comment">//测试邮件正文</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">context</span> <span class="operator">=</span> <span class="string">&quot;&lt;a href=&#x27;https://lulyqqqq.github.io/&#x27;&gt;博客&lt;/a&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender javaMailSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SendMail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MimeMessage</span> <span class="variable">message</span> <span class="operator">=</span> javaMailSender.createMimeMessage();</span><br><span class="line">            <span class="type">MimeMessageHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(message,<span class="literal">true</span>);</span><br><span class="line">            helper.setFrom(from);</span><br><span class="line">            helper.setTo(to);</span><br><span class="line">            helper.setSubject(subject);</span><br><span class="line">            helper.setText(context,<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//添加附件</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/main/resources/111.jpg&quot;</span>);</span><br><span class="line">            helper.addAttachment(<span class="string">&quot;图片.jpg&quot;</span>,f1);</span><br><span class="line">            javaMailSender.send(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h2><ul><li>同步消息</li><li>异步消息<ul><li>企业级应用中广泛使用的三种异步消息传递技术<ul><li>JMS(Java message Service):一个规范，等同于JDBC规范，提供了与消息服务相关的API接口   <strong>规范消息相关的API</strong><ul><li>JSM消息模型<ul><li>peer-2-peer:<strong>点对点模型</strong>，消息发送到一个队列中，队列保存消息。队列的消息只能被一个消费者消费，或超时</li><li>publish-subscribe:发布订阅模型，消息可以被多个消费者消费，生产者和消费者完全独立，不需要感知对方的存在</li></ul></li></ul></li><li>AMQP(advanced message queuing protocol):一种协议(高级消息协议，也是消息代理规范)<strong>规范了网络交换的数据格式</strong>，兼容<strong>JMS</strong>  <strong>规范消息传递的格式</strong><ul><li>优点：兼容跨平台性，服务器供应商，生产者，消费者可以使用不同的语言实现</li><li>AMQP消息模型<ul><li>direct exchange</li><li>fanout exchange</li><li>topic exchange</li><li>headers exchange</li><li>system exchange</li></ul></li><li>AMQP消息种类: byte[]  字节数组类型</li><li>AMQP实现：RabbitMQ,StormMQ,RocketMQ</li></ul></li><li>MQIT(Message Queueing Telemetry Transport)消息队列遥测传输，<strong>专为小设备设计</strong>，是物联网(IOT)生态系统中主要成分之一</li><li>Kafka:一种高吞吐量的分布式发布订阅消息系统，提供实时消息功能</li></ul></li></ul></li></ul><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><ul><li>RabbitMQ</li><li>StormMQ</li><li>RocketMQ</li><li>Kafka</li></ul><h3 id="Springboot-整合ActiveMQ"><a href="#Springboot-整合ActiveMQ" class="headerlink" title="Springboot 整合ActiveMQ"></a>Springboot 整合ActiveMQ</h3><h4 id="加入activemq坐标"><a href="#加入activemq坐标" class="headerlink" title="加入activemq坐标"></a>加入activemq坐标</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--activemq--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置activemq"><a href="#配置activemq" class="headerlink" title="配置activemq"></a>配置activemq</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 配置默认的服务地址</span></span><br><span class="line">  <span class="attr">activemq:</span></span><br><span class="line">    <span class="attr">broker-url:</span> <span class="string">tcp://localhost:61616</span></span><br><span class="line">  <span class="comment"># 配置默认保存位置</span></span><br><span class="line">  <span class="attr">jms:</span></span><br><span class="line">    <span class="comment"># 开启true 设置发布订阅模型  false为点对点模型</span></span><br><span class="line">    <span class="attr">pub-sub-domain:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">default-destination:</span> <span class="string">itheima</span></span><br></pre></td></tr></table></figure><h4 id="使用JmsMessagingTemplate对象进行操作"><a href="#使用JmsMessagingTemplate对象进行操作" class="headerlink" title="使用JmsMessagingTemplate对象进行操作"></a>使用JmsMessagingTemplate对象进行操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageServiceActivemqImpl</span> <span class="keyword">implements</span> <span class="title class_">MessageService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SendMessage</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;待发送的短信已纳入处理队列：id = &quot;</span>+id);</span><br><span class="line">        <span class="comment">// 设置存放地址名称</span></span><br><span class="line">        jmsMessagingTemplate.convertAndSend(<span class="string">&quot;order.queue.id&quot;</span>,id);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 在对应地址取出数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> jmsMessagingTemplate.receiveAndConvert(<span class="string">&quot;order.queue.id&quot;</span>,String.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;已完成短信发送业务id = &quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义listener-自动处理消息队列"><a href="#定义listener-自动处理消息队列" class="headerlink" title="定义listener 自动处理消息队列"></a>定义listener 自动处理消息队列</h4><ul><li>@JmsListener(destination &#x3D; “order.queue.id”) @JmsListener注解指定自动解决哪里位置的消息</li><li>@SendTo 自动处理完后， 将方法的返回值 发送到指定的其他队列中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加上JmsListener会直接在接收到信息任务后直接处理，不需要手动进行处理</span></span><br><span class="line">    <span class="meta">@JmsListener(destination = &quot;order.queue.id&quot;)</span></span><br><span class="line">    <span class="meta">@SendTo(&quot;order.queue.other.id&quot;)</span>  <span class="comment">// 自动处理完后， 将方法的返回值 发送到指定的其他队列中</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">receive</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已完成短信发送业务id = &quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;new:&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><ul><li>RabbitMQ基于Erlang语编写，需要安装Erlang</li><li>Erlang<ul><li>需要下载</li><li>安装完成后重启电脑</li></ul></li><li>环境变量配置<ul><li>ERLANG_HOME</li><li>PATH</li></ul></li></ul><h4 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h4><ul><li>官网下载：傻瓜式安装</li></ul><h5 id="启动RabbitMQ"><a href="#启动RabbitMQ" class="headerlink" title="启动RabbitMQ"></a>启动RabbitMQ</h5><ul><li><p>管理员权限启动，在目录下启用cmd输入:rabbitmq-service.bat start</p></li><li><p>停止服务：rabbitmq-service.bat stop</p></li></ul><h5 id="开启RabbitMQ可视化界面"><a href="#开启RabbitMQ可视化界面" class="headerlink" title="开启RabbitMQ可视化界面"></a>开启RabbitMQ可视化界面</h5><ul><li>使用插件形式<ul><li>打开插件：rabbitmq-plugins.bat  enable rabbitmq_management</li><li>使用localhost：15672访问可视化界面</li><li>登录账号和密码：guest</li></ul></li></ul><h3 id="springboot整合Rabbitmq-直连交换机模式"><a href="#springboot整合Rabbitmq-直连交换机模式" class="headerlink" title="springboot整合Rabbitmq 直连交换机模式"></a>springboot整合Rabbitmq 直连交换机模式</h3><p>配置顺序基本相同</p><ul><li>使用web形式产生消息队列信息</li><li><a href="http://localhost:8080/order/1">http://localhost:8080/order/1</a></li></ul><h4 id="导入坐标"><a href="#导入坐标" class="headerlink" title="导入坐标"></a>导入坐标</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--rabbitMQ--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置rabbitmq"><a href="#配置rabbitmq" class="headerlink" title="配置rabbitmq"></a>配置rabbitmq</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 对外的服务端口为5672 管理端口为15672</span></span><br></pre></td></tr></table></figure><h4 id="定义消息队列-交换机-绑定"><a href="#定义消息队列-交换机-绑定" class="headerlink" title="定义消息队列 交换机 绑定"></a>定义消息队列 交换机 绑定</h4><ul><li>一个交换机可以绑定多个队列 处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitConfigDirect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置队列</span></span><br><span class="line"><span class="comment">     * Queue里的三个参数配置</span></span><br><span class="line"><span class="comment">     * durable:是否持久化 默认为false</span></span><br><span class="line"><span class="comment">     * exclusive:是否是当前连接专用 连接关闭后队列删除  默认为false</span></span><br><span class="line"><span class="comment">     * autoDelete:是否自动删除 当上生产者或消费者不再使用此队列 自动删除  默认为true</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">directQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//设置消息队列名称</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;direct_queue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">directExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//设置交换机名称</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;directExchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定消息队列与交换机 起名字为direct</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingDirect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue()).to(directExchange()).with(<span class="string">&quot;direct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生产与消费消息（direct）"><a href="#生产与消费消息（direct）" class="headerlink" title="生产与消费消息（direct）"></a>生产与消费消息（direct）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageRabbitmqDirectImpl</span> <span class="keyword">implements</span> <span class="title class_">MessageService</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SendMessage</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;待发送的短信已纳入处理队列(rabbitmq):id = &quot;</span>+id);</span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">&quot;directExchange&quot;</span>,<span class="string">&quot;direct&quot;</span>,id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用消息监听器对消息队列进行监听"><a href="#使用消息监听器对消息队列进行监听" class="headerlink" title="使用消息监听器对消息队列进行监听"></a>使用消息监听器对消息队列进行监听</h4><ul><li>当有两个或多个监听器监听一个消息队列时，两个监听器是轮换监听</li><li>安装字符串排序监听</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MessageListener</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: mafangnian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022/7/15 22:30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Blog</span>: null</span></span><br><span class="line"><span class="comment"> * 当有两个监听器监听一个消息队列时，两个监听器是轮换监听</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;direct_queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已完成短信发送业务(rabbitmq direct)id = &quot;</span>+id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="springboot整合Rabbitmq-主题交换机模式"><a href="#springboot整合Rabbitmq-主题交换机模式" class="headerlink" title="springboot整合Rabbitmq 主题交换机模式"></a>springboot整合Rabbitmq 主题交换机模式</h3><h4 id="定义消息队列"><a href="#定义消息队列" class="headerlink" title="定义消息队列"></a>定义消息队列</h4><p>可以采用模糊匹配的方式匹配消息队列进行监听器处理</p><p><img src="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/9.png" alt="消息队列"></p><p><img src="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/10.png" alt="匹配规则"></p><h4 id="生产与消费消息（topic）"><a href="#生产与消费消息（topic）" class="headerlink" title="生产与消费消息（topic）"></a>生产与消费消息（topic）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageRabbitmqTopicImpl</span> <span class="keyword">implements</span> <span class="title class_">MessageService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SendMessage</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;待发送的短信已纳入处理队列(rabbitmq topic):id = &quot;</span>+id);</span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">&quot;topicExchange&quot;</span>,<span class="string">&quot;topic&quot;</span>,id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消息监听器监听消息队列"><a href="#消息监听器监听消息队列" class="headerlink" title="消息监听器监听消息队列"></a>消息监听器监听消息队列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听一号消息队列 topic_queue</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;topic_queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已完成短信发送业务(rabbitmq topic)id = &quot;</span>+id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//监听二号消息队列 topic_queue2</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;topic_queue2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive1</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已完成短信发送业务(rabbitmq topic)id = &quot;</span>+id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h4><p>当发消息队列的时候(routingKey)起名遵循了两个消息队列的(routingKey)的模糊条件时，设置了监听器的消息队列匹配成功之后，均执行监听器操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SendMessage</span><span class="params">(String id)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;待发送的短信已纳入处理队列(rabbitmq topic):id = &quot;</span>+id);</span><br><span class="line">    amqpTemplate.convertAndSend(<span class="string">&quot;topicExchange&quot;</span>,<span class="string">&quot;topic.id.orders&quot;</span>,id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">bindingTopic</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(topicQueue()).to(topicExchange()).with(<span class="string">&quot;topic.*.orders&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">bindingTopic2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(topicQueue()).to(topicExchange()).with(<span class="string">&quot;topic.id.*&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h3><h4 id="安装：解压缩"><a href="#安装：解压缩" class="headerlink" title="安装：解压缩"></a>安装：解压缩</h4><ul><li>默认服务端口：9876</li><li>环境变量配置：ROCKETMQ_HOME</li><li>PATH</li><li>NAMESRV_ADDR(建议):127.0.0.1:9876</li></ul><h4 id="启动命名服务器和broker"><a href="#启动命名服务器和broker" class="headerlink" title="启动命名服务器和broker"></a>启动命名服务器和broker</h4><ul><li>配置环境变量完成后直接双击文件<ul><li>命名服务器：mqnamesrv.cmd</li><li>broker服务器：mqbroker.cmd</li></ul></li><li>启动服务器</li></ul><h4 id="测试服务器"><a href="#测试服务器" class="headerlink" title="测试服务器"></a>测试服务器</h4><p>recketmq自带测试程序 需要使用测试的话，在包路径下找对应的测试类</p><ul><li>使用tools org.apache.rocketmq.example.quickstart.Producer （产生若干条消息） 如果服务器有问题，则无法产生</li><li>使用tools org.apache.rocketmq.example.quickstart.Consumer 消费消息</li></ul><h4 id="springboot整合rocketmq"><a href="#springboot整合rocketmq" class="headerlink" title="springboot整合rocketmq"></a>springboot整合rocketmq</h4><p>需要启动rocketmq服务器</p><h5 id="导入坐标-1"><a href="#导入坐标-1" class="headerlink" title="导入坐标"></a>导入坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--rocketmq--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置rocketmq"><a href="#配置rocketmq" class="headerlink" title="配置rocketmq"></a>配置rocketmq</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rocketmq:</span></span><br><span class="line">  <span class="attr">name-server:</span> <span class="string">localhost:9876</span></span><br><span class="line">  <span class="comment"># 设置生产者所属组</span></span><br><span class="line">  <span class="attr">producer:</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">group_rocketmq</span></span><br></pre></td></tr></table></figure><h5 id="设置发送消息对象-RocketMQTemplate"><a href="#设置发送消息对象-RocketMQTemplate" class="headerlink" title="设置发送消息对象 RocketMQTemplate"></a>设置发送消息对象 RocketMQTemplate</h5><p>生产消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageServiceRocketmqImpl</span> <span class="keyword">implements</span> <span class="title class_">MessageService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RocketMQTemplate rocketMQTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SendMessage</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;待发送的短信已纳入处理队列(rocketmq):id = &quot;</span>+id);</span><br><span class="line">        <span class="comment">// 同步消息</span></span><br><span class="line"><span class="comment">//        rocketMQTemplate.convertAndSend(&quot;order_id&quot;,id);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//异步消息产生之后的回调操作 告诉你消息执行情况</span></span><br><span class="line">        <span class="type">SendCallback</span> <span class="variable">callback</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendCallback</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(SendResult sendResult)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;消息发送成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;消息发送失败！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//异步消息</span></span><br><span class="line">        <span class="comment">//三个参数 1.发送的位置即主题名称 2.发送的消息 3.发送后的结果</span></span><br><span class="line">        rocketMQTemplate.asyncSend(<span class="string">&quot;order_id&quot;</span>,id,callback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置监听器-消费消息"><a href="#配置监听器-消费消息" class="headerlink" title="配置监听器 消费消息"></a>配置监听器 消费消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//设置主题名称 消费者所属组</span></span><br><span class="line"><span class="comment">//设置消费者 必须和生产者一个组才能匹配 消费消息 consumerGroup = &quot;group_rocketmq&quot;</span></span><br><span class="line"><span class="meta">@RocketMQMessageListener(topic = &quot;order_id&quot;,consumerGroup = &quot;group_rocketmq&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageListener</span> <span class="keyword">implements</span> <span class="title class_">RocketMQListener</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已完成短信发送业务(rocketmq) = &quot;</span>+id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><ul><li>消息中间件</li></ul><p>安装解压缩：windows建议使用2.x之类的版本 3.x的版本存在bug</p><h4 id="启动Kafka服务器"><a href="#启动Kafka服务器" class="headerlink" title="启动Kafka服务器"></a>启动Kafka服务器</h4><ul><li><p>在Kafka的bin目录下的windows里启动cmd</p><ul><li>先启动注册器，在启动命名服务器</li></ul></li><li><p>启动zookeeper(注册器)</p><ul><li>zookeeper-server-start.bat ..&#x2F;..&#x2F;config&#x2F;zookeeper.properties (需要指定启动的配置文件 在config目录下)</li><li>默认端口：2181</li></ul></li><li><p>启动kafka</p><ul><li>kafka-server-start.bat ..&#x2F;..&#x2F;config&#x2F;server.properties (同样指定配置文件 在config目录下) </li><li>默认端口：9092</li></ul></li></ul><h4 id="测试kafka服务器"><a href="#测试kafka服务器" class="headerlink" title="测试kafka服务器"></a>测试kafka服务器</h4><ul><li>需要自己创建topic来测试<ul><li>创建topic: kafka-topics.bat –zookeeper 127.0.0.1:2181 –create –replication-factor 1 –partitions 1 –topic itheima（最后一个参数设置topic名称）</li></ul></li><li>查看topic<ul><li>kafka-topics.bat –zookeeper 127.0.0.1:2181 –list</li></ul></li><li>测试<ul><li>生产者功能测试<ul><li>kafka-console-producer.bat –broker-list localhost:9092 –topic itheima</li></ul></li><li>消费者功能测试<ul><li>kafka-console-consumer.bat  –bootstrap-server localhost:9092 –topic itheima –from-beginning</li></ul></li></ul></li><li>删除topic<ul><li>kafka-topics.bat –delete –zookeeper localhost:2181 –topic itheima</li></ul></li></ul><h4 id="springboot整合kafka"><a href="#springboot整合kafka" class="headerlink" title="springboot整合kafka"></a>springboot整合kafka</h4><h5 id="导入坐标-2"><a href="#导入坐标-2" class="headerlink" title="导入坐标"></a>导入坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--kafka--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置地址信息"><a href="#配置地址信息" class="headerlink" title="配置地址信息"></a>配置地址信息</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">   <span class="comment"># 指定访问服务器地址</span></span><br><span class="line">    <span class="attr">bootstrap-servers:</span> <span class="string">localhost:9092</span></span><br><span class="line">    <span class="attr">consumer:</span></span><br><span class="line">      <span class="comment"># 配置消费者所属组</span></span><br><span class="line">      <span class="attr">group-id:</span> <span class="string">order</span></span><br></pre></td></tr></table></figure><h5 id="生产消息"><a href="#生产消息" class="headerlink" title="生产消息"></a>生产消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageServiceKafkaImpl</span> <span class="keyword">implements</span> <span class="title class_">MessageService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String,String&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SendMessage</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;待发送的短信已纳入处理队列(kafka):id = &quot;</span>+id);</span><br><span class="line">        kafkaTemplate.send(<span class="string">&quot;itheima&quot;</span>,id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="监听器消费消息"><a href="#监听器消费消息" class="headerlink" title="监听器消费消息"></a>监听器消费消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@KafkaListener(&quot;itheima&quot;)</span> <span class="comment">//指定</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(ConsumerRecord&lt;String,String&gt; record)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已完成短信发送业务id(kafka) = &quot;</span> + record.value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><h3 id="监控的意义"><a href="#监控的意义" class="headerlink" title="监控的意义"></a>监控的意义</h3><ul><li>监控服务状态是否宕机</li><li>监控服务运行指标(内存，虚拟机，线程，请求等)</li><li>监控日志</li><li>管理服务(服务下线)</li></ul><h3 id="监控的实施方式"><a href="#监控的实施方式" class="headerlink" title="监控的实施方式"></a>监控的实施方式</h3><ul><li>显示监控信息的服务器：用于获得服务信息，并显示对应的信息</li><li>运行的服务：启动时主动上报，告知监控服务器自己需要受到监控</li></ul><h3 id="可视化监控平台"><a href="#可视化监控平台" class="headerlink" title="可视化监控平台"></a>可视化监控平台</h3><ul><li><strong>Spring Boot Admin</strong>，开源社区项目，用于管理和监控springboot应用程序。客户端注册到服务端，通过HTTP请求方式，服务端定期从客户端获取对应的信息，并提供ui界面展示对应信息</li><li>平台版本必须和springboot版本相一致</li></ul><p>做成web形式，使用可视化界面查看 配置个web程序端口</p><ul><li>在服务端开启监控服务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//开启监控服务</span></span><br><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot21AdminServerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Springboot21AdminServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建Admin服务端 对应坐标</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置客户端</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>客户端匹配服务端</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="comment"># 谁来监控</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://localhost:8080</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="comment"># 打开所有可查看的配置</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><h3 id="监控原理-—–Actuator"><a href="#监控原理-—–Actuator" class="headerlink" title="监控原理 —–Actuator"></a>监控原理 —–Actuator</h3><ul><li>Actuator提供了SpringBoot生产就绪功能，通过端点的配置与访问，获取端点信息 </li><li>端点描述了一组监控信息，SpringBoot提供了多个内置端点，也可以根据需要自定义端点信息 </li><li>访问当前应用所有端点信息：&#x2F;actuator 访问端点详细信息：&#x2F;actuator&#x2F;端点名称</li></ul><h3 id="端点暴露"><a href="#端点暴露" class="headerlink" title="端点暴露"></a>端点暴露</h3><p>.&#x2F;springboot开发实用篇&#x2F;9</p><p><img src="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/11.png" alt="暴露端点功能"></p><h4 id="Info端点加载数据"><a href="#Info端点加载数据" class="headerlink" title="Info端点加载数据"></a>Info端点加载数据</h4><ul><li>静态数据</li><li>动态数据</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置端点里内容 info 设置内容</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">appName:</span> <span class="string">@02@</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">@9.9@</span></span><br><span class="line">  <span class="attr">company:</span> <span class="string">Good</span> <span class="string">Company</span></span><br><span class="line">  <span class="attr">author:</span> <span class="string">XD</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过spring容器设置数据</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InfoConfig</span> <span class="keyword">implements</span> <span class="title class_">InfoContributor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contribute</span><span class="params">(Info.Builder builder)</span> &#123;</span><br><span class="line">        builder.withDetail(<span class="string">&quot;runTime&quot;</span>,System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/12.png" alt="Spring Boot Admin 可视化界面"></p><h4 id="health端点数据自定义"><a href="#health端点数据自定义" class="headerlink" title="health端点数据自定义"></a>health端点数据自定义</h4><p>继承实现数据自定义</p><p><strong>状态的设置，如果状态不是为up则会影响最终实例的状态</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HealthConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractHealthIndicator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doHealthCheck</span><span class="params">(Health.Builder builder)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        builder.withDetail(<span class="string">&quot;runTime&quot;</span>,System.currentTimeMillis());</span><br><span class="line">        <span class="type">Map</span> <span class="variable">infoMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        infoMap.put(<span class="string">&quot;buildTime&quot;</span>,<span class="string">&quot;2006&quot;</span>);</span><br><span class="line">        builder.withDetails(infoMap);</span><br><span class="line">        <span class="comment">//设置状态</span></span><br><span class="line">        builder.up();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/07/16/springboot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87/13.png" alt="自定义health指标"></p><h4 id="性能指标自定义"><a href="#性能指标自定义" class="headerlink" title="性能指标自定义"></a>性能指标自定义</h4><p>执行了多少次结果会在可视化界面上展示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Counter counter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BookServiceImpl</span><span class="params">(MeterRegistry meterRegistry)</span>&#123;</span><br><span class="line"></span><br><span class="line">    counter = meterRegistry.counter(<span class="string">&quot;用户操作付费次数:&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    <span class="comment">//每次执行删除操作相当于执行了一次付费操作</span></span><br><span class="line">    counter.increment();</span><br><span class="line">    <span class="keyword">return</span> bookDao.deleteById(id) &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义监控指标"><a href="#自定义监控指标" class="headerlink" title="自定义监控指标"></a>自定义监控指标</h4><h5 id="自定义端点"><a href="#自定义端点" class="headerlink" title="自定义端点"></a>自定义端点</h5><p>通过<a href="http://localhost:8080/actuator/pay">http://localhost:8080/actuator/pay</a> 访问</p><p>在可视化界面 <strong>Spring Boot Admin</strong>上可以查看</p><p>在使用了这个链接之后页面显示return回来的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Endpoint(id = &quot;pay&quot;,enableByDefault = true)</span> <span class="comment">//通过id访问</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">payEndPoint</span> &#123;</span><br><span class="line">    <span class="meta">@ReadOperation</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getPay</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">payMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        payMap.put(<span class="string">&quot;lever 1&quot;</span>,<span class="number">100</span>);</span><br><span class="line">        payMap.put(<span class="string">&quot;lever 2&quot;</span>,<span class="number">50</span>);</span><br><span class="line">        payMap.put(<span class="string">&quot;lever 3&quot;</span>,<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> payMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结：部分技术尚未掌握，大抵只是通过springboot整合其他技术，了解其他技术大概是怎么样使用，对各个模块有了更深层次的印象；可以加快速度学习，但是笔记总要回顾，需要不定时会看，巩固基础"><a href="#总结：部分技术尚未掌握，大抵只是通过springboot整合其他技术，了解其他技术大概是怎么样使用，对各个模块有了更深层次的印象；可以加快速度学习，但是笔记总要回顾，需要不定时会看，巩固基础" class="headerlink" title="总结：部分技术尚未掌握，大抵只是通过springboot整合其他技术，了解其他技术大概是怎么样使用，对各个模块有了更深层次的印象；可以加快速度学习，但是笔记总要回顾，需要不定时会看，巩固基础"></a>总结：部分技术尚未掌握，大抵只是通过springboot整合其他技术，了解其他技术大概是怎么样使用，对各个模块有了更深层次的印象；可以加快速度学习，但是笔记总要回顾，需要不定时会看，巩固基础</h2><h1 id="开发实用篇告一段落"><a href="#开发实用篇告一段落" class="headerlink" title="开发实用篇告一段落"></a>开发实用篇告一段落</h1>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot运维实用篇</title>
      <link href="/2022/07/04/Springboot%E8%BF%90%E7%BB%B4%E5%AE%9E%E7%94%A8%E7%AF%87/"/>
      <url>/2022/07/04/Springboot%E8%BF%90%E7%BB%B4%E5%AE%9E%E7%94%A8%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="Springboot-运维实用篇"><a href="#Springboot-运维实用篇" class="headerlink" title="Springboot 运维实用篇"></a>Springboot 运维实用篇</h1><p>分为两块程序打包 程序运行</p><h2 id="程序打包"><a href="#程序打包" class="headerlink" title="程序打包"></a>程序打包</h2><p>基于maven工程下的执行maven的生命周期进行package双击运行</p><p> 在target目录下生成工程文件.jar</p><p><img src="/2022/07/04/Springboot%E8%BF%90%E7%BB%B4%E5%AE%9E%E7%94%A8%E7%AF%87/1.png" alt="maven目录结构"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打包必须涵盖springboot自带的打包插件，在执行maven的package才能在cmd窗口正常执行否则会显示找不到主清单 因为两种打包方式压缩的文件数不同，携带的文件资源路径不对</p><p><strong>cmd快速查找80端口是否占用 netstat -nao | findstr “80”</strong></p><p><strong>查看含有字符串80任务列表tasklist | findstr “80”</strong></p><h2 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a>程序运行</h2><h3 id="windows下"><a href="#windows下" class="headerlink" title="windows下"></a>windows下</h3><ul><li>在对应项目工程文件目录下启用终端(cmd)使用java -jar 工程文件.jar 运行查看</li></ul><h3 id="linux下"><a href="#linux下" class="headerlink" title="linux下"></a>linux下</h3><ul><li><p>基于linux安装jdk和mysql的驱动jar</p></li><li><p>在对应的数据库创建相匹配的数据库表</p></li><li><p>将打包好的工厂文件的安装包保存在linux系统&#x2F;usr&#x2F;local&#x2F;自定义目录或$HOME下</p></li><li><p>在对应项目工程文件目录下启用终端(cmd)使用java -jar 工程文件.jar 运行查看</p></li></ul><h2 id="配置高级"><a href="#配置高级" class="headerlink" title="配置高级"></a>配置高级</h2><h3 id="临时属性更换端口"><a href="#临时属性更换端口" class="headerlink" title="临时属性更换端口"></a>临时属性更换端口</h3><p>java -jar 工程文件.jar –server.port&#x3D;端口号</p><p>携带多个属性启动Springboot，属性间使用空格分隔</p><h3 id="配置分级"><a href="#配置分级" class="headerlink" title="配置分级"></a>配置分级</h3><p>config目录下的application配置大于resourses下的application文件</p><p><img src="/2022/07/04/Springboot%E8%BF%90%E7%BB%B4%E5%AE%9E%E7%94%A8%E7%AF%87/2.png" alt="配置文件分级结构"></p><h4 id="配置文件分类"><a href="#配置文件分类" class="headerlink" title="配置文件分类"></a>配置文件分类</h4><h5 id="SpringBoot中4种配置文件"><a href="#SpringBoot中4种配置文件" class="headerlink" title="SpringBoot中4种配置文件"></a>SpringBoot中4种配置文件</h5><p>1，2级的配置文件是写在打包完成后在源项目路径下写的配置</p><p><img src="/2022/07/04/Springboot%E8%BF%90%E7%BB%B4%E5%AE%9E%E7%94%A8%E7%AF%87/3.png" alt="源项目文件夹"></p><p>1级：file:config&#x2F;application.yml(最高)</p><p>2级：file:application.yml</p><p>3级：classpath:config&#x2F;application.yml</p><p>4级：classpath:application.yml(最低)</p><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><ul><li>1级和2级留作系统打开设置通用属性，1常用于运维经理进行线上整体项目部署方案调控</li><li>3级和四级用于系统开发阶段设置通用属性，3级常用于项目经理进行整体项目属性调控</li></ul><h4 id="自定义配置文件"><a href="#自定义配置文件" class="headerlink" title="自定义配置文件"></a>自定义配置文件</h4><p>当配置多个文件时，配置在后面的文件配置生效</p><h2 id="多环境开发"><a href="#多环境开发" class="headerlink" title="多环境开发"></a>多环境开发</h2><h3 id="yml配置文件里配置多环境"><a href="#yml配置文件里配置多环境" class="headerlink" title="yml配置文件里配置多环境"></a>yml配置文件里配置多环境</h3><p>三个分割线把环境区分开</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#应用环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">pro</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 设置环境</span></span><br><span class="line"><span class="comment"># 生产环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 开发环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 测试环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure><p>避免泄露信息 分为四个配置信息</p><p><img src="/2022/07/04/Springboot%E8%BF%90%E7%BB%B4%E5%AE%9E%E7%94%A8%E7%AF%87/4.png" alt="多环境配置"></p><p>properties文件后缀的同上配置</p><h3 id="多环境分组开发"><a href="#多环境分组开发" class="headerlink" title="多环境分组开发"></a>多环境分组开发</h3><p><strong><u>各环境中有相同的配置，在配置的时候后加载的覆盖前加载的</u></strong></p><p>引用多环境需要使用逗号分隔</p><h4 id="单一环境"><a href="#单一环境" class="headerlink" title="单一环境"></a>单一环境</h4><p>dev只是一个环境名称 有各种不同的环境配置</p><p>将原有的yml文件分为出各个属性文件：application.dev.yml application-devDB.yml  application-devMVC.yml </p><p><strong>application.yml里引用配置即可</strong> 使用<strong>include</strong>包含其他配置</p><p>application-devDB.yml：写数据库环境配置</p><p>application-devMVC.yml ：MVC环境配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">    <span class="attr">include:</span> <span class="string">devDB,devMVC</span></span><br></pre></td></tr></table></figure><h4 id="多环境（group-主流）"><a href="#多环境（group-主流）" class="headerlink" title="多环境（group 主流）"></a>多环境（group 主流）</h4><p>使用<strong>group</strong>设定若干环境组 引用哪个环境 自动加载该环境组 </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">    <span class="attr">group:</span> </span><br><span class="line">      <span class="attr">&quot;dev&quot;:</span> <span class="string">devDB,devMVC</span></span><br><span class="line">      <span class="attr">&quot;pro&quot;:</span> <span class="string">proDB,proMVC</span></span><br></pre></td></tr></table></figure><h4 id="多环境开发控制"><a href="#多环境开发控制" class="headerlink" title="多环境开发控制"></a>多环境开发控制</h4><p>maven和springboot都有多环境配置profile</p><p>在pom文件中设置多环境 在pom文件里设置了变量 springboot来读</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置多环境--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置默认环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>当maven与Spirngboot同时对多环境进行控制时，以maven为主，springboot使用@..@占位符读取maven对应的配置属性值</strong></p><p>springboot的yml文件读取</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">@profile.active@</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">&quot;dev&quot;:</span> <span class="string">devDB,devMVC</span></span><br><span class="line">      <span class="attr">&quot;pro&quot;:</span> <span class="string">proDB,proMVC</span></span><br></pre></td></tr></table></figure><p>我们通常是写maven配置为主，让springboot(为辅)来读maven的配置</p><p>基于Springboot读取maven配置属性的前提下，如果在idea测试工程时pom.xml每次更新需要手动compile可生效</p><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h3 id="日志作用"><a href="#日志作用" class="headerlink" title="日志作用"></a>日志作用</h3><ul><li>编程时期调试代码</li><li>运营期记录信息<ul><li>记录日常运营重要信息(峰值流量,平均响应时长….)</li><li>记录应用报错信息(错误堆栈)</li><li>记录运维过程数据(扩容,宕机,报警…..)</li></ul></li></ul><h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><ul><li>trace: 运行堆栈信息，使用率低</li><li>debug：程序员调试代码使用</li><li>info：记录运维过程数据</li><li>warn：记录运维过程报警数据</li><li>error：记录错误堆栈信息</li><li>fatal：灾难信息，合并计入error</li></ul><h3 id="日志使用"><a href="#日志使用" class="headerlink" title="日志使用"></a>日志使用</h3><h4 id="创建日志对象"><a href="#创建日志对象" class="headerlink" title="创建日志对象"></a>创建日志对象</h4><p>引用包文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br></pre></td></tr></table></figure><p>创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建记录日志对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(BookController.class);</span><br></pre></td></tr></table></figure><p>对象调用，日志记录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log.debug(<span class="string">&quot;debug...&quot;</span>);</span><br><span class="line">log.info(<span class="string">&quot;info....&quot;</span>);</span><br><span class="line">log.error(<span class="string">&quot;error...&quot;</span>);</span><br><span class="line">log.warn(<span class="string">&quot;warn...&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="springboot中管理日志级别"><a href="#springboot中管理日志级别" class="headerlink" title="springboot中管理日志级别"></a>springboot中管理日志级别</h4><p>在springboot配置文件中进行配置</p><p>配置日志组，或者代码包的形式对日志进行级别控制</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一般是写全局配置日志</span></span><br><span class="line"><span class="comment"># 开启debug模式，输出调试信息，常用于检查系统状况</span></span><br><span class="line"><span class="attr">debug:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># root设置的大于debug，上面的debug值设置相关于springboot相关的</span></span><br><span class="line"><span class="comment"># root是真个包下的debug</span></span><br><span class="line"><span class="comment"># 设置日志级别，root表示根节点，即对整体应用日志级别</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="comment"># 设置分组来定义日志级别</span></span><br><span class="line">  <span class="attr">group:</span></span><br><span class="line">  <span class="comment"># 分别为哪几个包 </span></span><br><span class="line">    <span class="attr">ebank:</span> <span class="string">包1,包二,包三</span></span><br><span class="line">    <span class="comment"># 服务包的配置</span></span><br><span class="line">    <span class="attr">iservice:</span> <span class="string">com.alibaba</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="comment"># root是全代码的日志级别</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">debug</span></span><br><span class="line">    <span class="comment"># 设置某个包的日志级别</span></span><br><span class="line">    <span class="string">包名:</span> <span class="string">日志级别</span></span><br><span class="line">    <span class="comment"># 设置分组包的日志级别</span></span><br><span class="line">    <span class="attr">ebank:</span> <span class="string">warn</span></span><br></pre></td></tr></table></figure><h4 id="快速开发日志对象"><a href="#快速开发日志对象" class="headerlink" title="快速开发日志对象"></a>快速开发日志对象</h4><h5 id="1-写一个工具类-死板"><a href="#1-写一个工具类-死板" class="headerlink" title="1.写一个工具类(死板)"></a>1.写一个工具类(死板)</h5><p>让基类继承工具类来创建日志对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Class clazz;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  Logger log;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseClass</span><span class="params">()</span>&#123;</span><br><span class="line">        clazz = <span class="built_in">this</span>.getClass();</span><br><span class="line">        log = LoggerFactory.getLogger(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-pom文件中引用lombok，使用注解-Slf4j"><a href="#2-pom文件中引用lombok，使用注解-Slf4j" class="headerlink" title="2.pom文件中引用lombok，使用注解**@Slf4j**"></a>2.pom文件中引用lombok，使用注解**@Slf4j**</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用注解之后产生的日志对象为log，可以快速调用</p><p>减少日志的声明对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="comment">//Rest模式</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SpringBoot is running.....&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;debug...&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;info....&quot;</span>);</span><br><span class="line">        log.error(<span class="string">&quot;error...&quot;</span>);</span><br><span class="line">        log.warn(<span class="string">&quot;warn...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SpringBoot is running.....&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="日志的输出格式"><a href="#日志的输出格式" class="headerlink" title="日志的输出格式"></a>日志的输出格式</h4><p><img src="/2022/07/04/Springboot%E8%BF%90%E7%BB%B4%E5%AE%9E%E7%94%A8%E7%AF%87/5.png" alt="日志输出格式"></p><h4 id="日志的输出格式控制-一般公司定死，自己不需要写"><a href="#日志的输出格式控制-一般公司定死，自己不需要写" class="headerlink" title="日志的输出格式控制(一般公司定死，自己不需要写)"></a>日志的输出格式控制(一般公司定死，自己不需要写)</h4><p>在springboot的配置文件中进行修改</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">设置日志模板格式</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line"><span class="comment">#    console: &quot;%d - %m %n&quot;</span></span><br><span class="line">     <span class="attr">console:</span> <span class="string">&quot;%d %clr(%5p) --- [%16t] %clr(%-40.40c : %m)&#123;cyan&#125; %n&quot;</span></span><br></pre></td></tr></table></figure><p>**%clr(%-40.40c : %m){cyan}**表示：向左对齐截40位的类名</p><p><strong>百分号后带数字加简写字母：代表该位占多少位字符</strong></p><ul><li><p>%clr：颜色显示 给谁用包裹谁，设置颜色是在包裹的括号外加{颜色}</p></li><li><p>%d：日期</p></li><li><p>%m：消息</p></li><li><p>%n：换行</p></li><li><p>%p：日志级别</p></li><li><p>%t：线程名</p></li><li><p>%c：类名</p></li></ul><h4 id="设置日志文件"><a href="#设置日志文件" class="headerlink" title="设置日志文件"></a>设置日志文件</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">  <span class="comment">#设置日志文件名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">server.log</span></span><br></pre></td></tr></table></figure><h5 id="日志文件详细配置"><a href="#日志文件详细配置" class="headerlink" title="日志文件详细配置"></a>日志文件详细配置</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">server.log</span></span><br><span class="line">  <span class="attr">logback:</span></span><br><span class="line">    <span class="comment"># 滚动日志 日志按时间存放 或者 日志文件超出容量再创建新的存储</span></span><br><span class="line">    <span class="attr">rollingpolicy:</span></span><br><span class="line">      <span class="comment"># 规定日志文件容量大小</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">5KB</span></span><br><span class="line">      <span class="comment"># 指定日志文件名称格式</span></span><br><span class="line">      <span class="attr">file-name-pattern:</span> <span class="string">server.%d&#123;yyyy-MM-dd&#125;.%i.log</span></span><br></pre></td></tr></table></figure><h1 id="运维篇告一段落"><a href="#运维篇告一段落" class="headerlink" title="运维篇告一段落"></a>运维篇告一段落</h1>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC框架</title>
      <link href="/2022/07/03/MVC%E6%A1%86%E6%9E%B6/"/>
      <url>/2022/07/03/MVC%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="MVC框架模式与SpringMVC框架"><a href="#MVC框架模式与SpringMVC框架" class="headerlink" title="MVC框架模式与SpringMVC框架"></a>MVC框架模式与SpringMVC框架</h1><p><strong>框架通常是代码重用，而设计模式是设计重用。</strong></p><p><strong>框架的介绍：</strong><a href="https://blog.csdn.net/qq_36827957/article/details/78515403">https://blog.csdn.net/qq_36827957/article/details/78515403</a></p><p>MVC: Model View Controller 模型-视图-控制器</p><p>视图：用户看到并与之交互的界面。</p><p>模型：表示<strong>企业数据和业务规则</strong>。在MVC的3个部件中，模型拥有最多的处理任务。被模型返回的数据是独立的，与数据格式无关。这样的一个模式能够为多个视图提供数据，这样一来模型的代码只需要写一次便能够被多个视图重用，减少了代码的重复性。</p><p>控制器：接受用户的输入并调用相应的模型和视图来完成用户的需求，所以当用户点击web页面中的超链接和发送表单时，控制器本身不输出任何东西和做任何处理。它只是接收请求并根据请求来调用哪个模型去处理请求，然后在决定用哪个视图来显示返回的数据</p><h3 id="SpringMVC框架"><a href="#SpringMVC框架" class="headerlink" title="SpringMVC框架"></a><a href="https://so.csdn.net/so/search?q=SpringMVC&spm=1001.2101.3001.7020">SpringMVC</a>框架</h3><h4 id="1-1-SpringMVC简介"><a href="#1-1-SpringMVC简介" class="headerlink" title="1.1 SpringMVC简介"></a>1.1 SpringMVC简介</h4><p><strong>springMVC框架是基于Java的实现了MVC框架模式的请求驱动类型的轻量级框架</strong>。前端控制器是DispatcherServlet接口实现类，映射处理器是HandlerMapping接口实现类，视图解析器是ViewResolver接口实现类，页面控制器是Controller接口实现类。SpringMVC的工作流程图如下：<img src="/2022/07/03/MVC%E6%A1%86%E6%9E%B6/1.png" alt="img"></p><p>（1）客户端请求提交到前端控制器DispatcherServlet；<br>（2）前端控制器DispatcherServlet查找一个或者多个映射处理器HandlerMapping，从而确定调用哪个页面控制器Controller对请求进行处理；<br>（3）DispatcherServlet将请求提交给Controller；<br>（4）Controller根据业务逻辑对请求进行处理，并返回ModelAndView；<br>（5）DispatcherServlet查找一个或者多个ViewResolver，得到ModelAndView指定的视图view，并将model中的数据传入视图view中进行渲染；<br>（6）DispatcherServlet将渲染后的视图返回响应；</p><p>由上述过程可见，DispatcherServlet是Spring MVC的核心，它负责协调SpringMVC的各个组成部分对所有的Http请求进行处理，其主要工作如下：<br>（1）截获符合特定格式的Http请求；<br>（2）初始化DispatcherServlet上下文对应的WebApplicationContext，并将其与业务层、持久层的WebApplicationContext关联起来；<br>（3）初始化Spring MVC的各个组件，并装配到DispatcherServlet中；</p><h4 id="1-2-SpringMVC框架中的接口"><a href="#1-2-SpringMVC框架中的接口" class="headerlink" title="1.2 SpringMVC框架中的接口"></a>1.2 SpringMVC框架中的接口</h4><p>DispatcherServlet接口：Spring提供的前端控制器，所有的请求都是由它来进行分发。在DispatcherServlet将请求分发到对应的Controller之前，需要借助Spring提供的HandlerMapping才能定位到相应的Controller.</p><p>HandlerMapping接口：完成客户请求到Controller的映射。</p><p>Controller接口：需要为并发用户处理请求，在实现Controller接口时，必须保证线程安全且可重用。<br>在Controller完成用户请求的处理，返回ModelAndView对象给DispatcherServlet，ModelAndView对象中包含了模型Model和视图View。<br>从宏观角度进行考虑，DispatcherServlet是整个Web应用的控制器；从微观角度进行考虑，Controller是单个Http请求处理过程的控制器。</p><p>ViewResolver接口：根据ModelAndView对象在web应用查找view视图，并将model中是数据传入到view视图中进行渲染。</p><h4 id="1-3-SpringMVC框架优势"><a href="#1-3-SpringMVC框架优势" class="headerlink" title="1.3 SpringMVC框架优势"></a>1.3 SpringMVC框架优势</h4><p>（1）角色清晰，分工明确，进行更简介的web开发；<br>（2）和其他Spring框架无缝集成；<br>（3）强大的JSP标签库；<br>（4）HandlerMapping, ViewResolver等能够简单地进行定制；</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot基础篇</title>
      <link href="/2022/07/03/Springboot%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2022/07/03/Springboot%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot基础篇"><a href="#Spring-Boot基础篇" class="headerlink" title="Spring Boot基础篇"></a>Spring Boot基础篇</h1><h2 id="Restful风格"><a href="#Restful风格" class="headerlink" title="Restful风格"></a>Restful风格</h2><h3 id="REST开发"><a href="#REST开发" class="headerlink" title="REST开发"></a>REST开发</h3><p>REST，表现形式状态切换</p><ul><li><p>传统风格资源描述形式</p><p><a href="http://localhost/user/getById?id=1">http://localhost/user/getById?id=1</a></p><p><a href="http://localhost/user/saveUser">http://localhost/user/saveUser</a></p></li><li><p>REST风格描述形式</p><p><a href="http://localhost/user/1">http://localhost/user/1</a></p><p><a href="http://localhost/user">http://localhost/user</a></p></li></ul><p>优点：</p><ul><li>隐藏资源的访问行为，无法通过地址得知对资源是何种操作</li><li>书写简化</li></ul><p><strong>@RestController</strong>:将当前控制器类设置为RESTful风格，等同于@Controller与@ResponseBody两个注解组合功能</p><p><a href="https://cloud.tencent.com/developer/article/1046622">SpringMVC 常用注解 - 云+社区 - 腾讯云 (tencent.com)</a></p><p>将请求参数放入请求路径中，再由注解**@PathVariable**(“对应请求参数的名称”) 从而获得相对应的值，有多个参数就多个使用</p><p><a href="https://restfulapi.cn/">RESTful API 一种流行的 API 设计风格</a></p><p>Restful原则：行为操作(资源的访问形式)</p><ul><li>增：post请求    <strong>@PostMapping</strong></li><li>删：delete请求 <strong>@DeleteMapping</strong></li><li>改：put请求      <strong>@PutMapping</strong></li><li>查：get请求       <strong>@GetMapping</strong></li></ul><p>一般来说请求路径不要出现动词</p><p>分页，排序等操作，不需要使用斜杠传参，一般传的参数不是数据库表的字段，可以不采用斜杠</p><h3 id="RequestBody-RequestParam-PathVariable"><a href="#RequestBody-RequestParam-PathVariable" class="headerlink" title="@RequestBody  @RequestParam  @PathVariable"></a>@RequestBody  @RequestParam  @PathVariable</h3><ul><li>区别<ul><li>@RequestParam 用于接收url地址传参或者表单传参</li><li>@RequestBody用于接收json数据</li><li>@PathVariable用于接收路径参数，使用{参数名称}描述路径参数</li></ul></li><li>应用<ul><li>后期开发中，发送请求参数超过1个时，以json格式为主，@RequestBody 应用较广</li><li>如果发送非json格式数据，选用@RequestParam接收请求参数</li><li>采用RESTful进行开发，当参数较少时，例如1个，可以采用@PathVariable接收请求路径变量，通常用于传递id值</li></ul></li></ul><h2 id="springboot应用"><a href="#springboot应用" class="headerlink" title="springboot应用"></a>springboot应用</h2><p>springboot是简化Spring应用的初始搭建和开发过程  springboot简化了依赖的配置</p><p><a href="https://www.cnblogs.com/fishpro/p/spring-boot-study-restcontroller.html">Spring Boot Web 开发@Controller @RestController 使用教程 - fishpro - 博客园 (cnblogs.com)</a></p><p>将spring的配置文件和spring-mvc配置简化了</p><p>springboot的配置文件中 pom文件的继承父类的文件，父类的文件里规定了dependency坐标依赖的最好版本 自动配置</p><h3 id="starter和parent"><a href="#starter和parent" class="headerlink" title="starter和parent"></a>starter和parent</h3><ul><li>starter<ul><li>springboot中常见的项目名称，定义了当前项目使用的所有依赖坐标，以达到减少依赖配置的目的</li></ul></li><li>parent<ul><li>所有SpringBoot项目要继承的项目，定义了若干个坐标版本号(依赖管理，而非依赖)，以达到减少依赖冲突的目的</li><li>spring-boot-starter-parent各版本间存在着诸多坐标版本不同</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>实际开发    GAV(G:groupId A:artifactId V:version)<ul><li>使用任意坐标时，仅写GAV中的G和A，V由SpringBoot提供，除非SpringBoot为提供对应版本V</li><li>如果发生坐标错误，则需要手动指定Version(但要小心版本冲突)</li></ul></li></ul><h3 id="引导类"><a href="#引导类" class="headerlink" title="引导类"></a>引导类</h3><p>SpringBoot的引导类是Boot工厂的执行入口，通过mian方法就可以启动项目</p><p>加载spring容器 默认扫描对应包及其子包的内容 实例bean 放入spring容器</p><p><img src="/2022/07/03/Springboot%E5%9F%BA%E7%A1%80%E7%AF%87/1.png" alt="层次"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootQuickApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringbootQuickApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内嵌tomcat-springboot支持切换web服务器"><a href="#内嵌tomcat-springboot支持切换web服务器" class="headerlink" title="内嵌tomcat(springboot支持切换web服务器)"></a>内嵌tomcat(springboot支持切换web服务器)</h3><p>在pom文件里引入的spring-boot-starter-web里自动加载tomcat服务器</p><p>tomcat的本质是用java语言编写的执行过程 现在SpringBoot将tomcat的执行过程<strong>封装成一个对象</strong>放入spring容器里，需要使用web程序直接引用tomcat对象，从而在tomcat上执行，所以SpringBoot不用配置tomcat服务器也可以使用tomcat</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>变更内嵌服务器：是将现有的服务器去除，添加全新的服务器</p><p>SpringBoot可以支持切换内置服务器有三个</p><ul><li>tomcat(默认)        apache出品，<strong>应用面广</strong>，负载若干较重的组件</li><li>jetty                       <strong>更轻量级</strong>，可扩展性更高，负载性能远不及tomcat</li><li>undertow             负载性能<strong>勉强</strong>跑赢tomcat</li></ul><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="复制工程-快速新建模块"><a href="#复制工程-快速新建模块" class="headerlink" title="复制工程(快速新建模块)"></a>复制工程(快速新建模块)</h3><ul><li>原则<ul><li>保留工程基础结构</li><li>抹掉原始工程痕迹</li></ul></li></ul><p>在工作空间里复制对应工程，兵修改过程名称</p><p>删除与Idea相关的配置文件，仅保留src目录和pom文件</p><p>修改pom文件中的artifactId与新工程&#x2F;模块名相同</p><p>保留备份后期使用</p><p>springboot配置文件(三种)：</p><ul><li><strong>application.properties</strong> （主导）使用key-value的格式</li></ul><p>server.port&#x3D;80</p><ul><li><strong>application.yml(主流)</strong></li></ul><p>server:</p><p>​    port: 80</p><ul><li><strong>application.yaml</strong>(配置同上)</li></ul><p>不同配置文件中相同配置按照加载优先级相互覆盖，不同配置文件中不同配置全部保留</p><h3 id="yml配置文件里属性"><a href="#yml配置文件里属性" class="headerlink" title="yml配置文件里属性"></a>yml配置文件里属性</h3><h4 id="使用-Value注解读取单个属性"><a href="#使用-Value注解读取单个属性" class="headerlink" title="使用@Value注解读取单个属性"></a>使用@Value注解读取单个属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;country&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String country1;</span><br></pre></td></tr></table></figure><h4 id="使用-Autowired获得全部属性"><a href="#使用-Autowired获得全部属性" class="headerlink" title="使用@Autowired获得全部属性"></a>使用@Autowired获得全部属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自动装配 yml配置文件里的全部属性</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment env;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env.getProperty(<span class="string">&quot;user.name&quot;</span>)</span><br></pre></td></tr></table></figure><p>加载实体的get set方法使用<strong>lombok</strong>里注解**@Data<strong>自动加载，需要在pom文件加入</strong>lombok**的坐标</p><p>将一个类转换为bean用spring注解：**@Component**将其转换为bean并放入spring容器里</p><p>获得yml指定区域数据：**@ConfigurationProperties(prefix&#x3D;”字段名”)**</p><h2 id="springboot整合junit"><a href="#springboot整合junit" class="headerlink" title="springboot整合junit"></a>springboot整合junit</h2><p> 测试类需要在启动类的包或子包中，可以省略启动类的设置，也就是省略calsses的设定</p><p>否则需要使用**@SpringBootTest(calsses &#x3D; 启动类名)**注解来查找</p><p>SpringBoot整合junit相当于spring整合junit</p><p><strong>spring整合junit是 使用@RunWith()+ContextConfiguration(calsses &#x3D; 启动类名)</strong></p><p>**而springboot是使用@SpringBootTest(calsses &#x3D; 启动类名)**注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = Springboot03JunitApplication.class)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot03JunitApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="springboot整合mybatis"><a href="#springboot整合mybatis" class="headerlink" title="springboot整合mybatis"></a>springboot整合mybatis</h2><p>在yml配置文件里添加配置数据库的相对应信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置相关信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">   <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nian0209</span></span><br></pre></td></tr></table></figure><p>创建实体类domain和dao实现操作数据库的方法    注意：<strong>实体类名应该和数据库的字段名一致</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot04MybatisApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里虽是接口的注入但实际注入的对象是实现类的对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(bookDao.getById(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="至于在controller层上使用的service的接口而不是实现类"><a href="#至于在controller层上使用的service的接口而不是实现类" class="headerlink" title="至于在controller层上使用的service的接口而不是实现类"></a>至于在controller层上使用的service的接口而不是实现类</h2><p>因为通过**@Autowired<strong>的对象是通过接口的方式会使用</strong>jdk的动态代理**，jdk的动态代理针对接口产生代理，动态的产生实现类的对象，在注入到spring容器里也是实现类的对象 这样使用jdk代理的方式动态的生成接口的实现类，还可以实现对实现类的增强从而做到增强类</p><h3 id="一个接口里有多个实现类"><a href="#一个接口里有多个实现类" class="headerlink" title="一个接口里有多个实现类"></a>一个接口里有多个实现类</h3><p><a href="https://dalin.blog.csdn.net/article/details/116573967?spm=1001.2101.3001.6650.13&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-13-116573967-blog-102260648.pc_relevant_antiscanv2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-13-116573967-blog-102260648.pc_relevant_antiscanv2&utm_relevant_index=15"> Spring中如Service有多个实现类，它怎么知道该注入哪个ServiceImpl类？_Java知音_的博客-CSDN博客</a></p><p>@Primary：自动装配时当出现多个Bean候选者时，被注解为@Primary的Bean将作为首选者，否则将抛出异常 </p><p>@Autowired 默认按类型装配，如果我们想使用按名称装配，可以结合@Qualifier注解一起使用</p><p> @Autowired</p><p>@Qualifier(“personDaoBean”) 存在多个实例配合使用</p><p>在service层使用@Service(名称)来将实现方法带名称的注入到spring容器里</p><p>使用@Autowired自动注入，</p><p>**@Qualifier(“beanId”)**：beanId是指对应实现类的类名称且字母开头小写</p><ul><li><strong>方法一：</strong> Controller中注入service的时候使用**@Autowired**自动注入，<code>@Qualifier(&quot;beanId&quot;)</code>来指定注入哪一个。</li><li><strong>方法二：</strong> Controller中注入service的时候使用<code>@Resource(type = 类名.class)</code>来指定注入哪一个。</li><li><strong>方法三：</strong><ul><li>每个service的impl都可以指定名称（使用<code>@Service（“名称”）</code>）</li><li>Controller中注入service的时候使用名称来指定注入哪一个（使用<code>@Resource(name=&quot;名称&quot;)</code>）</li></ul></li></ul><p><strong>@Autowired注解的意思就是:</strong></p><p>当Spring发现<code>@Autowired</code>注解时，将自动在代码上下文中找到和其匹配（默认是类型匹配）的Bean，并自动注入到相应的地方去。</p><p><code>@Resource</code>的作用相当于<code>@Autowired</code>。</p><p><strong>@Autowired和@Resource两个注解的区别：</strong></p><p>1.<code>@Autowired</code>是Spring的注解，<code>@Resource</code>是J2EE的注解，这个看一下导入注解的时候这两个注解的包名就一清二楚了。</p><p>2.<code>@Autowired</code>默认按照byType(方法类型)方式进行bean匹配，<code>@Resource</code>默认按照byName(方法名称)方式进行bean匹配。</p><p>3.@Autowired默认情况下必须要求依赖对象必须存在，如果要允许null值，可以设置它的required属性为false，如：<code>@Autowired(required=false)</code>。</p><h2 id="springboot整合MyBatis-Plus"><a href="#springboot整合MyBatis-Plus" class="headerlink" title="springboot整合MyBatis-Plus"></a>springboot整合MyBatis-Plus</h2><ul><li>MyBatis-plus与MyBatis区别<ul><li>导入坐标不同</li><li>数据层实现简化</li></ul></li></ul><p>手动导入MP坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="springboot整合Druid"><a href="#springboot整合Druid" class="headerlink" title="springboot整合Druid"></a>springboot整合Druid</h2><p>导入Druid对应的starter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在yml配置文件中配置druid数据源</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Druid整合</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">   <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">druid:</span></span><br><span class="line">         <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">         <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line">         <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">         <span class="attr">password:</span> <span class="string">nian0209</span></span><br></pre></td></tr></table></figure><h1 id="SSMP整合案例"><a href="#SSMP整合案例" class="headerlink" title="SSMP整合案例"></a>SSMP整合案例</h1><p>基于springboot</p><ul><li>案列方案分析<ul><li>实体类开发—使用lombok快速制作实体类</li><li>Dao开发—整合MyBatisPlus，制作数据层测试类</li><li>Service开发—基于MyBatisPlus进行增量开发，制作业务层测试类</li><li>Controller开发—基于Restful开发，使用PostMan进行接口测试</li><li>Controller开发—前后端开发协议制作(前后端数据交换形式)</li><li>页面开发—基于VUE+ElementUI制作，前后端联调，页面数据处理，页面消息处理<ul><li>列表，新增，修改，删除，分页，查询</li></ul></li><li>项目异常处理</li><li>按条件查询—页面功能调整，Controller修正功能，Service修正功能</li></ul></li></ul><h2 id="准备步骤"><a href="#准备步骤" class="headerlink" title="准备步骤"></a>准备步骤</h2><p>勾选springweb 和 mysql对应坐标 </p><p>修改配置文件为yml格式并设置端口并设置自动增长的属性 开启日志</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line"><span class="comment">#      设置id自增</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>使用MP快速的查看分页的数据，但是需要指定spring拦截器 在使用语句前也需要传入分页对应的参数—-(第几页，几条数据)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">bookDao.selectPage(page,<span class="literal">null</span>);</span><br><span class="line"> <span class="comment">//打印当前页内数据</span></span><br><span class="line">System.out.println(page.getRecords());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MPConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用拦截器创建分页</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//定义MP拦截器</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//添加具体的拦截器</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span>  interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>使用QueryWrapper则需要自己去写对应匹配查询的字段，使用LambdaQueryWrapper则直接get就行了</p><p>like方法里可以添加判断条件：不为空的时候才执行条件查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按条件查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testBy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    QueryWrapper&lt;Book&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.like(<span class="literal">true</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;学&quot;</span>);</span><br><span class="line">    bookDao.selectList(queryWrapper);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按条件查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testBy2</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    LambdaQueryWrapper&lt;Book&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    lambdaQueryWrapper.like(name!=<span class="literal">null</span>,Book::getName,name);</span><br><span class="line">    bookDao.selectList(lambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层-快速开发"><a href="#业务层-快速开发" class="headerlink" title="业务层-快速开发"></a>业务层-快速开发</h2><p>实现Service接口和实现类</p><p>使用MyBatisPlus提供业务层通用接口(IService<T>)与业务层通用实现类(ServiceImpl&lt;M,T&gt;)</T></p><p>在通用类基础上做功能重载或追加</p><p>注意重载时不要覆盖原始操作，避免原始提供的功能丢失—–可以在方法名上添加@Override查看有无重名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IBookService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Book&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IBookServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;BookDao, Book&gt; <span class="keyword">implements</span> <span class="title class_">IBookService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="表现层展示"><a href="#表现层展示" class="headerlink" title="表现层展示"></a>表现层展示</h2><p>接收参数：</p><p>实体数据：@RequestBody</p><p>路径变量：@PathVariable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IBookService bookService;</span><br><span class="line"><span class="comment">//查</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.list();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//增</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.save(book);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//改</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.modify(book);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//删</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//查</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表现层信息一致性处理"><a href="#表现层信息一致性处理" class="headerlink" title="表现层信息一致性处理"></a>表现层信息一致性处理</h3><p>设计表现层返回结果的模型类，用于后端和前端进行数据格式统一，也称为前后端数据协议</p><p>flag：代表查询是否成功</p><p>data：存放数据</p><p>同意表现层数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> flag;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">    R()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">(Boolean flag)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.flag =flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">(Boolean flag,Object data)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">(Boolean flag,String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前后端-页面"><a href="#前后端-页面" class="headerlink" title="前后端 页面"></a>前后端 页面</h2><p>前后端协议联调</p><ul><li>前后端分离结构设计在页面归属前端服务器</li><li>单体工程页面在resoures目录下的static目录中(建议执行clean)</li></ul><p>发送异步请求，调用后端接口</p><p>axios.get(“&#x2F;books”).then((res)&#x3D;&gt;{</p><p>​数据连接</p><p>});</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>自定义springmvc的异常处理类来处理异常 在类上添加@RestControllerAdvice定义restful风格异常处理类且返回的数据给前端也需要和</p><p>前后端数据协议一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//作为springmvc的异常处理器</span></span><br><span class="line"><span class="comment">//@ControllerAdvice</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//拦截所有的异常信息</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">doException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        <span class="comment">//记录日志</span></span><br><span class="line">        <span class="comment">//通知运维</span></span><br><span class="line">        <span class="comment">//通知开发</span></span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="string">&quot;服务器故障，请稍后再试！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件查询-1"><a href="#条件查询-1" class="headerlink" title="条件查询"></a>条件查询</h2><p>分页部分的条件查询是根据v-model动态模型，在分页的基础上动态的添加查询数据，一起传到后端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="title function_">getAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//组织参数，拼接url请求地址</span></span><br><span class="line">    <span class="comment">// console.log(this.pagination.type);</span></span><br><span class="line">    param = <span class="string">&quot;?type=&quot;</span>+<span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">type</span>;</span><br><span class="line">    param +=<span class="string">&quot;&amp;name=&quot;</span>+<span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">name</span>;</span><br><span class="line">    param +=<span class="string">&quot;&amp;description=&quot;</span>+<span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">description</span>;</span><br><span class="line">    <span class="comment">// console.log(param);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送异步请求</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/books/&quot;</span>+<span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">currentPage</span>+<span class="string">&quot;/&quot;</span>+<span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">pageSize</span>+param).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">pageSize</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">size</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">currentPage</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">current</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">total</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">total</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dataList</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">records</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>service层判断条件查询有无值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(<span class="type">int</span> currentPage, <span class="type">int</span> pageSize, Book book)</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Book&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;Book&gt;();</span><br><span class="line">    lqw.like(Strings.isNotEmpty(book.getType()),Book::getType,book.getType());</span><br><span class="line">    lqw.like(Strings.isNotEmpty(book.getName()),Book::getName,book.getName());</span><br><span class="line">    lqw.like(Strings.isNotEmpty(book.getDescription()),Book::getDescription,book.getDescription());</span><br><span class="line">    <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(currentPage,pageSize);</span><br><span class="line">    bookDao.selectPage(page,lqw);</span><br><span class="line">    <span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="elementUI"><a href="#elementUI" class="headerlink" title="elementUI"></a>elementUI</h2><p>分页插件</p><p>分页bug：一页中只有一个数据的时候。删除这个数据后当前页不会有信息展示，例如：原来有三页，删除了一页中只有一个数据的时候，系统还是在查删除完了那页，所以不会显示数据</p><p>解决方法：一般是在后台判断当前页是不是比总页数大，为true则返回最大页数数据  ———–但这也还是有bug</p><p>较好的解决方法是直接返回第一页</p><p>根本：根据需求修改</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--分页组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pagination-container&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;pagiantion&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">            @<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">            <span class="attr">:current-page</span>=<span class="string">&quot;pagination.currentPage&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">            <span class="attr">:page-size</span>=<span class="string">&quot;pagination.pageSize&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">            <span class="attr">layout</span>=<span class="string">&quot;total, prev, pager, next, jumper&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">            <span class="attr">:total</span>=<span class="string">&quot;pagination.total&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@GetMapping(&quot;&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">getPage</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> currentPage,<span class="meta">@PathVariable</span> <span class="type">int</span> pageSize,Book book)</span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;参数==&gt;&quot;+book);</span></span><br><span class="line"></span><br><span class="line">        IPage&lt;Book&gt; page = bookService.getPage(currentPage, pageSize,book);</span><br><span class="line">        <span class="comment">//如果当前页码值大于了总页码值，那么重新执行查询操作，使用最大页码值作为当前页码值</span></span><br><span class="line">        <span class="keyword">if</span>( currentPage &gt; page.getPages())&#123;</span><br><span class="line">            page = bookService.getPage((<span class="type">int</span>)page.getPages(), pageSize,book);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="literal">true</span>, page);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在对应的实体类中，如果数据库和实体类的字段是驼峰命名MP会将其转化为下划线形式，如果需要对应有三种办法</p><ul><li><p>将数据库表字段改为下划线形式</p></li><li><p>在实体类字段上添加@tableFiled(“字段名”)</p></li><li><p>在yml配置文件中的mybatis-pus添加</p></li><li><pre><code class="yml">mybatis-plus:  configuration:    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl    map-underscore-to-camel-case: false #关闭驼峰映射</code></pre></li></ul><p>实体类有主键的需要在实体类主键字段头添加@TableId(type &#x3D; IdType.AUTO（自增长类型）)</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-Plus</title>
      <link href="/2022/07/02/MyBatis-Plus/"/>
      <url>/2022/07/02/MyBatis-Plus/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis-Plus"></a>MyBatis-Plus</h1><p><a href="https://baomidou.com/pages/24112f/#%E7%89%B9%E6%80%A7">简介 | MyBatis-Plus (baomidou.com)</a></p><h2 id="MyBatis-plus-MyBatis"><a href="#MyBatis-plus-MyBatis" class="headerlink" title="MyBatis-plus +MyBatis"></a>MyBatis-plus +MyBatis</h2><p>简单的整合mybatis里操作数据库的方法</p><ul><li>将对应的Mapper对象继承BaseMapper<T>(使其能调用BaseMpper里的操作方法)</T></li><li>使用MyBatis-plus 的方式产生SqlSessionFactory</li><li>最后调用BaseMapper的方法操作数据库</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUserList</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">            <span class="comment">//这里使用的是MP中的MybatisSqlSessionFactoryBuilder</span></span><br><span class="line">            MybatisSqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">// 可以调用BaseMapper中定义的方法</span></span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子项目都继承了父项目来引用mybatis-plus</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MyBatis-plus-Spring"><a href="#MyBatis-plus-Spring" class="headerlink" title="MyBatis-plus +Spring"></a>MyBatis-plus +Spring</h2><p>整合Spring+MyBatis-plus主要是解析数据源，将配置信息写在spring的配置文件中</p><p>pom文件中需要导入spring的mybatis-plus的配置</p><p><artifactId>itcast-mybatis-plus-spring</artifactId></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--扫描配置源    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:*.properties&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里使用MP提供的sqlSessionFactory，完成了Spring与MP的整合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--扫描mapper接口，使用的依然是Mybatis原生的扫描器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cn.itcast.mp.simple.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring也是同样引用mybatis-plus</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Springboot-Mybatis-plus"><a href="#Springboot-Mybatis-plus" class="headerlink" title="Springboot+Mybatis-plus"></a>Springboot+Mybatis-plus</h2><p>需要在application.yml的配置文件中配置数据源，而其他的映射或者扫描器springboot已经注解封装完成不需要自己重复写</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置数据源</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">   <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nian0209</span></span><br></pre></td></tr></table></figure><p>pom文件里springboot项目需要引用父类文件</p><p><strong><u>spring-boot-starter-parent</u></strong> 里面封装了springboot项目的启动对应的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引用mybatis-plus需要引用springboot对应的mybatis-plus配置信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="BaseMapper提供的CRUD"><a href="#BaseMapper提供的CRUD" class="headerlink" title="BaseMapper提供的CRUD"></a>BaseMapper提供的CRUD</h3><h4 id="TableField"><a href="#TableField" class="headerlink" title="@TableField"></a>@TableField</h4><p>在MP中通过@TableField注解可以指定字段的一些属性，常常解决的问题有2个：<br>1、对象中的属性名和字段名不一致的问题（非驼峰）<br>2、对象中的属性字段在表中不存在的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span> <span class="comment">//指定数据库表名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span> <span class="comment">//主键自增长</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@TableField(select = false)</span> <span class="comment">//查询不显示详细值</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField(value = &quot;email&quot;)</span> <span class="comment">//字段名不一样</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> String address; <span class="comment">//该字段在数据库中不存在</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h4><p>在MP中，更新操作有2种，一种是根据id更新，另一种是根据条件更新</p><h5 id="根据id更新"><a href="#根据id更新" class="headerlink" title="根据id更新"></a>根据id更新</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id更新</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateById</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">6L</span>); <span class="comment">//主键</span></span><br><span class="line">        user.setAge(<span class="number">21</span>); <span class="comment">//更新的字段</span></span><br><span class="line">        <span class="comment">//根据id更新，更新不为null的字段</span></span><br><span class="line">        <span class="built_in">this</span>.userMapper.updateById(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="根据条件更新"><a href="#根据条件更新" class="headerlink" title="根据条件更新"></a>根据条件更新</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据条件更新</span></span><br><span class="line"><span class="comment">//QueryWrapper进行更新 封装成对象 匹配条件进行更新</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setAge(<span class="number">22</span>); <span class="comment">//更新的字段</span></span><br><span class="line">    <span class="comment">//更新的条件</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;id&quot;</span>, <span class="number">6</span>);</span><br><span class="line">    <span class="comment">//执行更新操作</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.update(user, wrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//UpdateWrapper进行更新 可以设置set---更新内容的操作</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//更新的条件以及字段</span></span><br><span class="line">    UpdateWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;id&quot;</span>, <span class="number">6</span>).set(<span class="string">&quot;age&quot;</span>, <span class="number">23</span>);</span><br><span class="line">    <span class="comment">//set的字段是数据库表字段</span></span><br><span class="line">    <span class="comment">//执行更新操作</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.update(<span class="literal">null</span>, wrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><h5 id="根据id删除deleteById"><a href="#根据id删除deleteById" class="headerlink" title="根据id删除deleteById"></a>根据id删除deleteById</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//执行删除操作</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.deleteById(<span class="number">6L</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="根据条件删除deleteByMap"><a href="#根据条件删除deleteByMap" class="headerlink" title="根据条件删除deleteByMap"></a>根据条件删除deleteByMap</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByMap</span><span class="params">()</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; columnMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    columnMap.put(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    columnMap.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    <span class="comment">//将columnMap中的元素设置为删除的条件，多个之间为and关系</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.deleteByMap(columnMap);</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h5><p>更加情况分为两种不同参数的删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//用法一:</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;user_name&quot;</span>,<span class="string">&quot;caocao&quot;</span>).eq(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用法二:</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUserName(<span class="string">&quot;caocao&quot;</span>);</span><br><span class="line">    user,setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.delete(wrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="deleyeBetchIds"><a href="#deleyeBetchIds" class="headerlink" title="deleyeBetchIds"></a>deleyeBetchIds</h5><p>批量删除 传入的参数需要是一个数组类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//根据id集合批量删除</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.deleteBatchIds(Arrays.asList(<span class="number">1L</span>,<span class="number">10L</span>,<span class="number">20L</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h4><h5 id="根据id查询selectById"><a href="#根据id查询selectById" class="headerlink" title="根据id查询selectById"></a>根据id查询selectById</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//根据id查询数据</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.selectById(<span class="number">2L</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="根据数组集合查询数据"><a href="#根据数组集合查询数据" class="headerlink" title="根据数组集合查询数据"></a>根据数组集合查询数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectBatchIds</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//根据id集合批量查询</span></span><br><span class="line">    List&lt;User&gt; users = <span class="built_in">this</span>.userMapper.selectBatchIds(Arrays.asList(<span class="number">2L</span>, <span class="number">3L</span>, <span class="number">10L</span>));</span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="根据条件查询一条数据selectOne"><a href="#根据条件查询一条数据selectOne" class="headerlink" title="根据条件查询一条数据selectOne"></a>根据条件查询一条数据selectOne</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectOne</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    <span class="comment">//根据条件查询一条数据，如果结果超过一条会报错</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.selectOne(wrapper);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="根据条件查询总记录数"><a href="#根据条件查询总记录数" class="headerlink" title="根据条件查询总记录数"></a>根据条件查询总记录数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectCount</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    wrapper.gt(<span class="string">&quot;age&quot;</span>, <span class="number">23</span>); <span class="comment">//年龄大于23岁</span></span><br><span class="line">    <span class="comment">//根据条件查询数据条数</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.selectCount(wrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;count = &quot;</span> + count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="分页查询selectPage"><a href="#分页查询selectPage" class="headerlink" title="分页查询selectPage"></a>分页查询selectPage</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 entity 条件，查询全部记录（并翻页）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page 分页查询条件（可以为 RowBounds.DEFAULT）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">IPage&lt;T&gt; <span class="title function_">selectPage</span><span class="params">(IPage&lt;T&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure><p>需要进行分页必须写一个mybatis提供的分页插件</p><p><strong>MybatisPlusInterceptor</strong> MybatisPlus的分页拦截器</p><p>MybatisPlus自带的分页插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//标记为配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MPConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectPage</span><span class="params">()</span> &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//分页条件</span></span><br><span class="line">      QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">      wrapper.gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>); <span class="comment">//年龄大于20岁</span></span><br><span class="line">      </span><br><span class="line">      Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>,<span class="number">1</span>);<span class="comment">//参数1:第几页，参数二：每页但是条数据</span></span><br><span class="line"><span class="comment">//根据条件查询数据</span></span><br><span class="line">      IPage&lt;User&gt; iPage = <span class="built_in">this</span>.userMapper.selectPage(page, wrapper);</span><br><span class="line">      System.out.println(<span class="string">&quot;数据总条数：&quot;</span> + iPage.getTotal());</span><br><span class="line">      System.out.println(<span class="string">&quot;总页数：&quot;</span> + iPage.getPages());</span><br><span class="line">      </span><br><span class="line">      List&lt;User&gt; users = iPage.getRecords();<span class="comment">//获得当前页集合数据</span></span><br><span class="line">      <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="QueryWrapper各参数"><a href="#QueryWrapper各参数" class="headerlink" title="QueryWrapper各参数"></a>QueryWrapper各参数</h3><p><img src="/2022/07/02/MyBatis-Plus/1.png" alt="参数"></p><h3 id="SQL注入原理"><a href="#SQL注入原理" class="headerlink" title="SQL注入原理"></a>SQL注入原理</h3><p>MP在启动后会将BaseMapper中的一系列的方法注册到meppedStatements中</p><p>在MP中，ISqlInjector负责SQL的注入工作，它是一个接口，AbstractSqlInjector是它的实现类</p><p><img src="/2022/07/02/MyBatis-Plus/2.png" alt="img"></p><p>在AbstractSqlInjector中，主要是由inspectInject()方法进行注入的，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inspectInject</span><span class="params">(MapperBuilderAssistant builderAssistant, Class&lt;?&gt;</span></span><br><span class="line"><span class="params">        mapperClass)</span> &#123;</span><br><span class="line">    Class&lt;?&gt; modelClass = extractModelClass(mapperClass);</span><br><span class="line">    <span class="keyword">if</span> (modelClass != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> mapperClass.toString();</span><br><span class="line">        Set&lt;String&gt; mapperRegistryCache =</span><br><span class="line">                GlobalConfigUtils.getMapperRegistryCache(builderAssistant.getConfiguration());</span><br><span class="line">        <span class="keyword">if</span> (!mapperRegistryCache.contains(className)) &#123;</span><br><span class="line">            List&lt;AbstractMethod&gt; methodList = <span class="built_in">this</span>.getMethodList();</span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isNotEmpty(methodList)) &#123;</span><br><span class="line">                <span class="type">TableInfo</span> <span class="variable">tableInfo</span> <span class="operator">=</span> TableInfoHelper.initTableInfo(builderAssistant,</span><br><span class="line">                        modelClass);</span><br><span class="line">                <span class="comment">// 循环注入自定义方法</span></span><br><span class="line">                methodList.forEach(m -&gt; m.inject(builderAssistant, mapperClass,</span><br><span class="line">                        modelClass, tableInfo));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.debug(mapperClass.toString() + <span class="string">&quot;, No effective injection method</span></span><br><span class="line"><span class="string">                        was found.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            mapperRegistryCache.add(className);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实现方法中， methodList.forEach(m -&gt; m.inject(builderAssistant, mapperClass, modelClass,<br>tableInfo)); 是关键，循环遍历方法，进行注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注入自定义 MappedStatement</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mapperClass mapper 接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> modelClass mapper 泛型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tableInfo 数据库表反射信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> MappedStatement</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> MappedStatement <span class="title function_">injectMappedStatement</span><span class="params">(Class&lt;?&gt; mapperClass, Class&lt;?</span></span><br><span class="line"><span class="params">        &gt; modelClass, TableInfo tableInfo)</span>;</span><br></pre></td></tr></table></figure><h1 id="后置内容再添加"><a href="#后置内容再添加" class="headerlink" title="后置内容再添加"></a>后置内容再添加</h1>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis-Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>期末复习</title>
      <link href="/2022/06/18/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
      <url>/2022/06/18/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="期末考试"><a href="#期末考试" class="headerlink" title="期末考试"></a>期末考试</h1><h3 id="大多以背为主"><a href="#大多以背为主" class="headerlink" title="大多以背为主"></a>大多以背为主</h3><h3 id="分个时间段"><a href="#分个时间段" class="headerlink" title="分个时间段"></a>分个时间段</h3><h4 id="1-18-19号主要是复习毛概-大英-大学生心理健康-抽空看一下-设计模式"><a href="#1-18-19号主要是复习毛概-大英-大学生心理健康-抽空看一下-设计模式" class="headerlink" title="1. 18 19号主要是复习毛概 大英 大学生心理健康 抽空看一下 设计模式"></a>1. 18 19号主要是复习毛概 大英 大学生心理健康 抽空看一下 设计模式</h4><h5 id="毛概"><a href="#毛概" class="headerlink" title="毛概"></a>毛概</h5><p>复习pdf文档 混个眼熟为主</p><h5 id="大学生心理健康"><a href="#大学生心理健康" class="headerlink" title="大学生心理健康"></a>大学生心理健康</h5><p>查看学习通上课程选择题 眼熟为主</p><h5 id="大英"><a href="#大英" class="headerlink" title="大英"></a>大英</h5><p>背诵U1-5的txtA课后习题</p><p>记牢对应单词匹配</p><p>无听了</p><h4 id="2-22号上午复习设计模式-以国王游戏-糖果-解释器模式为主"><a href="#2-22号上午复习设计模式-以国王游戏-糖果-解释器模式为主" class="headerlink" title="2. 22号上午复习设计模式 以国王游戏 糖果  解释器模式为主"></a>2. 22号上午复习设计模式 以国王游戏 糖果  解释器模式为主</h4><p>设计模式复习文档 大概率出原题 </p><h4 id="3-23号复习linux"><a href="#3-23号复习linux" class="headerlink" title="3. 23号复习linux"></a>3. 23号复习linux</h4><p>主要为课堂ppt</p><h4 id="4-25号考计算机组成原理"><a href="#4-25号考计算机组成原理" class="headerlink" title="4. 25号考计算机组成原理"></a>4. 25号考计算机组成原理</h4><p>计组开卷 适当复习即可</p><h4 id="5-26号复习数据库"><a href="#5-26号复习数据库" class="headerlink" title="5. 26号复习数据库"></a>5. 26号复习数据库</h4><p>复习期末大纲 要回看平时作业 数据库范式和er图绘制</p>]]></content>
      
      
      <categories>
          
          <category> 状态 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> day 3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java命名规范</title>
      <link href="/2022/06/16/Java%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
      <url>/2022/06/16/Java%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA命名规范"><a href="#JAVA命名规范" class="headerlink" title="JAVA命名规范"></a>JAVA命名规范</h1><p><strong>JAVA编码规范</strong></p><p>1 <strong>目的</strong></p><p>为了保证所每个项目组编写出的程序都符合相同的规范，便于理解和维护，便于检查、减少出错概率，有助于成员间交流，保证一致性、统一性而建立的java程序编码规范。</p><p>2 <strong>范围</strong></p><p>该规范适用于所有基于JAVA开发的项目。</p><p>3 <strong>规范内容</strong></p><p><strong>3.1 命名规范</strong></p><p><strong>包(package)命名</strong></p><ol><li><p>package名字必须由小写字母组成的英文单词或拼音组成</p></li><li><p>英文单词或拼音的含义必须能够大致表示该package的用途</p></li><li><p>多个单词或拼音的构成命名，第一个单词(可缩写)全部小写，第二个单词(可缩写)的首字母必须大写，其余字母小写</p></li><li><p>所有的package都必须使用com.philwong.package1Name的命名结构</p></li></ol><p><strong>类(class)命名</strong></p><ol><li><p>Class命名必须由大写字母开头，后面的字母由小写字母组成的英文单词或拼音组成</p></li><li><p>英文单词或拼音的含义必须能够大致表示该class的用途</p></li><li><p>多个单词或拼音的构成命名，第一个单词或拼音(可缩写)全部小写，第二个单词或拼音(可缩写)的首字母必须大写，其余字母小写</p></li><li><p>servlet 类必须使用类名 + Servlet的结构</p></li><li><p>实体类(entity class)必须使用实体名称的英文单词或拼音命名</p></li><li><p>实体管理类(entity Manager)必须使用实体名称的英文单词或拼音+Manager的结构</p></li><li><p>仅返回结果集的用于数据库查询的servlet使用dso + 英文单词或拼音 + Servlet</p></li><li><p>用于初始化服务器或数据库或者在服务器启动时执行的servlet使用init + 英文单词或拼音 + Servlet</p></li><li><p>返回业务逻辑的servlet使用logic + 英文单词或拼音 + Servlet</p></li></ol><p><strong>类变量和常量的命名</strong></p><ol><li><p>类变量和常量的命名必须使用小写字母构成的英文单词或拼音</p></li><li><p>多个单词或拼音的构成命名，第一个单词(可缩写)全部小写，第二个单词(可缩写)的首字母必须大写，其余字母小写</p></li><li><p>静态变量的命名必须使用static标示</p></li><li><p>必须使用protect、public、private标示类变量和常量；缺省可省略的public标示符也必须注明，不能省略</p></li><li><p>常量命名全部使用大写字母构成的英文单词和拼音</p></li><li><p>同名类变量或常量使用变量名或者常量命的英文单词或拼音+下划线+阿拉伯数字构成用于区分</p></li></ol><p><strong>参数命名</strong></p><ol><li><p>参数的命名必须使用小写字母构成的英文单词或拼音</p></li><li><p>多个单词或拼音的构成命名，第一个单词(可缩写)全部小写，第二个单词(可缩写)的首字母必须大写，其余字母小写</p></li><li><p>同名参数的英文单词或拼音+下划线+阿拉伯数字构成用于区分</p></li><li><p>参数命名必须能够标示其含义</p></li></ol><p><strong>数组命名</strong></p><ol><li><p>数组必须使用小写字母构成的英文单词或拼音+[ ]</p></li><li><p>多个单词或拼音的构成命名，第一个单词(可缩写)全部小写，第二个单词(可缩写)的首字母必须大写，其余字母小写</p></li><li><p>数组总是使用：String arrary[ ] 命名，而不是 String[] array</p></li><li><p>数组命名必须能够标示其含义</p></li></ol><p><strong>方法的命名</strong></p><ol><li><p>方法必须使用小写字母构成的英文单词或拼音</p></li><li><p>多个单词或拼音的构成命名，第一个单词(可缩写)全部小写，第二个单词(可缩写)的首字母必须大写，其余字母小写</p></li><li><p>方法的命名必须能够标示其含义</p></li><li><p>静态方法必须使用static标示</p></li><li><p>必须使用protect、public、private标示方法；缺省可省略的public标示符也必须注明，不能省略</p></li></ol><p><strong>其它相关文件的命名</strong></p><p>(jsp文件、javaScript文件、图片文件、css文件、xml文件、DTD文件、xsl文件、属性配置文件、HTML文件)</p><ol><li><p>文件的命名必须使用小写字母构成的英文单词或拼音</p></li><li><p>多个单词或拼音的构成命名，第一个单词(可缩写)全部小写，第二个单词(可缩写)的首字母必须大写，其余字母小写</p></li><li><p>文件的命名必须能够标示其含义</p></li><li><p>属性配置文件名后缀使用 *.property</p></li><li><p>jsp文件的</p></li></ol><p><strong>HTML相关对象的命名</strong></p><ol><li><p>命名必须使用小写字母构成的英文单词或拼音</p></li><li><p>多个单词或拼音的构成命名，第一个单词(可缩写)全部小写，第二个单词(可缩写)的首字母必须大写，其余字母小写</p></li><li><p>命名必须能够标示其含义</p></li><li><p>field： fld + 单词或拼音</p></li><li><p>textArea：ta + 单词或拼音</p></li><li><p>checkbox: cb + 单词或拼音</p></li><li><p>radioBox: rb + + 单词或拼音</p></li><li><p>image : img + 单词或拼音</p></li><li><p>link : lk + 单词或拼音</p></li><li><p>hiddenFileld : hiddenFld + 单词或拼音</p></li><li><p>pullDownSelection: ps + 单词或拼音</p></li><li><p>horizonLine: hl + 单词或拼音</p></li><li><p>button : btn + 单词或拼音</p></li><li><p>imageButton : imgBtn + 单词或拼音</p></li><li><p>banner : ban + 单词或拼音</p></li></ol><p><strong>3.2 文件样式规范</strong></p><p><strong>版权信息</strong></p><p>&#x2F;**</p><p>*Copyright 2003 电子计算技术研究所</p><p>*All Right Reserved</p><p>*Author ：作者姓名</p><p>*编码日期格式：YYYY-MM-DD</p><p>*&#x2F;</p><p><strong>package&#x2F;import</strong></p><p>package行要在import之前，import中标准的包名要在本地的包名之前，而且字母顺序排列；如果import行中包括同一包中的不同子目录，则应该使用*来处理;二者之间应该空一行</p><p>package com.philwong.system.configManager;</p><p>import com.philwong.philwongException.*;</p><p>import java.io.*;</p><p>import java.util.Observable;</p><p><strong>类注释和类定义</strong></p><p>类注释用于解释类的结构和主要功能</p><p>&#x2F;**</p><p>*编码实现的功能简要描述以及注意事项</p><ul><li></li></ul><p>*&#x2F;</p><p>类定义：</p><p>public configManager</p><p>extend Property</p><p>implements Cloneable {</p><p>}</p><p><strong>成员变量</strong></p><p>public 类型的成员变量必须做出注释说明;同一变量类型定义在一起；不同类型变量之间空一行</p><p>&#x2F;**</p><p>*配置文件的文件名和路径</p><p>*&#x2F;</p><p>public String fileName &#x3D; “”;</p><p>public String filePath &#x3D; “”;</p><p>protected java.sql.Date createdDate &#x3D; null;</p><p>…</p><p><strong>成员变量存取方法(不是必需的)</strong></p><p>&#x2F;**</p><p>*成员变量存取方法注释说明</p><p>*&#x2F;</p><p>public String getFileName(){ return filename };</p><p>…</p><p><strong>构造函数</strong></p><p>构造函数采取递增的方式，参数多的放在后面</p><p>public configManager() {</p><p>..</p><p>}</p><p>public configManager(String fileName) {</p><p>..</p><p>}</p><p>public configManager(String filename,String filePath) {</p><p>..</p><p>}</p><p><strong>成员方法</strong></p><ol><li><p>每一个类尽可能都定义一个toString()方法</p></li><li><p>如果有main()方法，那么应该放在类的底部</p></li><li><p>每个方法之间空一行</p></li></ol><p><strong>修改注释说明</strong></p><p><strong>&#x2F;*</strong>*</p><p>*****修改说明：</p><p>*****修改人： 修改日期：</p><p>*****修改原因：</p><p>***&#x2F;**</p><p>public setFilePath(String filePath) {</p><p>&#x2F;&#x2F;old code remark line 124</p><p>&#x2F;&#x2F;this.filePath &#x3D; filePath;</p><p>&#x2F;&#x2F;new code 126 –130</p><p>if (filePath &#x3D; &#x3D; null) {</p><p>this.filePath &#x3D; “”;</p><p>} else {</p><p>this.filePath &#x3D; filePath;</p><p>}</p><p>}</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Day 2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BS CS架构了解</title>
      <link href="/2022/06/16/BS-CS%E6%9E%B6%E6%9E%84%E4%BA%86%E8%A7%A3/"/>
      <url>/2022/06/16/BS-CS%E6%9E%B6%E6%9E%84%E4%BA%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="B-x2F-S-C-x2F-S架构了解"><a href="#B-x2F-S-C-x2F-S架构了解" class="headerlink" title="B&#x2F;S C&#x2F;S架构了解"></a>B&#x2F;S C&#x2F;S架构了解</h1><p><a href="https://blog.csdn.net/sea_snow/article/details/81187804"> 深入理解B&#x2F;S与C&#x2F;S架构_雪飞_海的博客-CSDN博客_b&#x2F;s架构</a></p><p>一、什么是C&#x2F;S架构<br>C&#x2F;S架构是第一种比较早的软件架构，主要用于局域网内。也叫 客户机&#x2F;服务器模式。</p><p>它可以分为客户机和服务器两层：</p><p>第一层:  在客户机系统上结合了界面显示与业务逻辑；</p><p>第二层:  通过网络结合了数据库服务器。</p><p>简单的说就是第一层是用户表示层，第二层是数据库层。</p><p>　 这里需要补充的是，客户端不仅仅是一些简单的操作，它也是会处理一些运算，业务逻辑的处理等。也就是说，客户端也做着一些本该由服务器来做的一些事情，如图所示：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvMTA0NjA3NS8yMDE3MTEvMTA0NjA3NS0yMDE3MTEwMzEzMjExOTE4NS0yMDk2MzA0NDY4LnBuZw?x-oss-process=image/format,png" alt="img"></p><p>C&#x2F;S架构软件有一个特点，就是如果用户要使用的话，需要下载一个客户端，安装后就可以使用。比如QQ,OFFICE软件等。</p><p>1、C&#x2F;S架构的优点：</p><p>1 C&#x2F;S架构的界面和操作可以很丰富。（客户端操作界面可以随意排列，满足客户的需要）</p><p>2 安全性能可以很容易保证。（因为只有两层的传输，而不是中间有很多层。</p><p>3 由于只有一层交互，因此响应速度较快。（直接相连，中间没有什么阻隔或岔路，比如QQ，每天那么多人在线，也不觉得慢）</p><p>2、C&#x2F;S架构的缺点：</p><p>可以将QQ作为类比：</p><p>1 适用面窄，通常用于局域网中。</p><p>2 用户群固定。由于程序需要安装才可使用，因此不适合面向一些不可知的用户。</p><p>3 维护成本高，发生一次升级，则所有客户端的程序都需要改变。</p><p>二、什么是B&#x2F;S架构<br>B&#x2F;S架构的全称为Browser&#x2F;Server，即浏览器&#x2F;服务器结构。</p><p>Browser指的是Web浏览器，极少数事务逻辑在前端实现，但主要事务逻辑在服务器端实现。</p><p>B&#x2F;S架构的系统无须特别安装，只有Web浏览器即可。</p><p>其实就是我们前端现在做的一些事情，大部分的逻辑交给后台来实现，我们前端大部分是做一些数据渲染，请求等比较少的逻辑。</p><p>B&#x2F;S架构的分层：</p><p>与C&#x2F;S架构只有两层不同的是，B&#x2F;S架构有三层，分别为：</p><p>第一层表现层：主要完成用户和后台的交互及最终查询结果的输出功能。</p><p>第二层逻辑层：主要是利用服务器完成客户端的应用逻辑功能。</p><p>第三层数据层：主要是接受客户端请求后独立进行各种运算。</p><p>如图所示：</p><p><img src="https://img-blog.csdnimg.cn/20200118143816483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NlYV9zbm93,size_16,color_FFFFFF,t_70" alt="img"></p><p>B&#x2F;S架构的优点：</p><p>1、客户端无需安装，有Web浏览器即可。<br>2、BS架构可以直接放在广域网上，通过一定的权限控制实现多客户访问的目的，交互性较强。<br>3、BS架构无需升级多个客户端，升级服务器即可。可以随时更新版本，而无需用户重新下载啊什么的。</p><p>B&#x2F;S架构的缺点：</p><p>1、在跨浏览器上，BS架构不尽如人意。<br>2、表现要达到CS程序的程度需要花费不少精力。<br>3、在速度和安全性上需要花费巨大的设计成本，这是BS架构的最大问题。<br>4、客户端服务器端的交互是请求-响应模式，通常需要刷新页面，这并不是客户乐意看到的。（在Ajax风行后此问题得到了一定程度的缓解）</p><p>三、B&#x2F;S架构的几种形式<br>第一种：客户端-服务器-数据库</p><p><img src="https://img-blog.csdnimg.cn/20200118152126513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NlYV9zbm93,size_16,color_FFFFFF,t_70" alt="img"></p><p>这个应该是我们平时比较常用的一种模式：</p><p>1、客户端向服务器发起Http请求</p><p>2、服务器中的web服务层能够处理Http请求</p><p>3、服务器中的应用层部分调用业务逻辑，调用业务逻辑上的方法</p><p>4、如果有必要，服务器会和数据库进行数据交换. 然后将模版＋数据渲染成最终的Html, 返送给客户端</p><p>第二种：客户端－web服务器－应用服务器－数据库</p><p><img src="https://img-blog.csdnimg.cn/20200118151926798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NlYV9zbm93,size_16,color_FFFFFF,t_70" alt="img"></p><p> 类似于第一种方法，只是将web服务和应用服务解耦</p><p>1 客户端向web服务器发起Http请求</p><p>2 web服务能够处理Http请求，并且调用应用服务器暴露在外的RESTFUL接口</p><p>3 应用服务器的RESTFUL接口被调用，会执行对应的暴露方法.如果有必要和数据库进行数据交互，应用服务器会和数据库进行交互后，将json数据返回给web服务器</p><p>4 web服务器将模版＋数据组合渲染成html返回给客户端</p><p>第三种方法：客户端－负载均衡器(Nginx)－中间服务器(Node)－应用服务器－数据库</p><p>这种模式一般用在有大量的用户，高并发的应用中。<img src="https://img-blog.csdnimg.cn/20200118152234550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NlYV9zbm93,size_16,color_FFFFFF,t_70" alt="img"></p><p>1、整正暴露在外的不是真正web服务器的地址，而是负载均衡器器的地址</p><p>2、客户向负载均衡器发起Http请求</p><p>3、负载均衡器能够将客户端的Http请求均匀的转发给Node服务器集群</p><p>4、Node服务器接收到Http请求之后，能够对其进行解析，并且能够调用应用服务器暴露在外的RESTFUL接口</p><p>5、应用服务器的RESTFUL接口被调用，会执行对应的暴露方法.如果有必要和数据库进行数据交互，应用服务器会和数据库进行交互后，将json数据返回给Node</p><p>6、Node层将模版＋数据组合渲染成html返回反向代理服务器</p><p>7、反向代理服务器将对应html返回给客户端</p><p>Nginx的优点有:</p><p>1、它能够承受、高并发的大量的请求，然后将这些请求均匀的转发给内部的服务器，分摊压力.</p><p>2、反向代理能够解决跨域引起的问题，因为Nginx，Node,应用服务器，数据库都处于内网段中。</p><p>3、Nginx非常擅长处理静态资源(img,css,js,video)，所以也经常作为静态资源服务器，也就是我们平时所说的CDN</p><p>　　比如：前一个用户访问index.html, 经过Nginx－Node－应用服务器－数据库链路之后，Nginx会把index.html返回给用户，并且会把index.html缓存在Nginx上，</p><p>　　下一个用户再想请求index.html的时候，请求Nginx服务器，Nginx发现有index.html的缓存，于是就不用去请求Node层了，会直接将缓存的页面(如果没过期的话)返回给用户。</p><p>四、发展前景</p><p>1、 C&#x2F;S和B&#x2F;S各有优势，C&#x2F;S在图形的表现能力上以及运行的速度上肯定是强于B&#x2F;S模式的，不过缺点就是他需要运行专门的客户端，而且更重要的是它不能跨平台，用c++在windows下写的程序肯定是不能在linux下跑的。</p><p>2、B&#x2F;S模式就，它不需要专门的客户端，只要浏览器，而浏览器是随操作系统就有的，方便就是他的优势了。<br>而且，B&#x2F;S是基于网页语言的、与操作系统无关，所以跨平台也是它的优势，而且以后随着网页语言以及浏览器的进步，<br>B&#x2F;S在表现能力上的处理以及运行的速度上会越来越快，它的缺点将会越来越少。尤其是HTML5的普及，在图形的渲染方面以及音频、文件的处理上已经非常强大了。 </p>]]></content>
      
      
      <categories>
          
          <category> 交流架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Day 2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应状态码</title>
      <link href="/2022/06/16/%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81/"/>
      <url>/2022/06/16/%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="一、状态码大类"><a href="#一、状态码大类" class="headerlink" title="一、状态码大类"></a>一、状态码大类</h2><table><thead><tr><th>状态码分类</th><th>说明</th></tr></thead><tbody><tr><td>1xx</td><td><strong>响应中</strong>——临时状态码，表示请求已经接受，告诉客户端应该继续请求或者如果它已经完成则忽略它</td></tr><tr><td>2xx</td><td><strong>成功</strong>——表示请求已经被成功接收，处理已完成</td></tr><tr><td>3xx</td><td><strong>重定向</strong>——重定向到其它地方：它让客户端再发起一个请求以完成整个处理。</td></tr><tr><td>4xx</td><td><strong>客户端错误</strong>——处理发生错误，责任在客户端，如：客户端的请求一个不存在的资源，客户端未被授权，禁止访问等</td></tr><tr><td>5xx</td><td><strong>服务器端错误</strong>——处理发生错误，责任在服务端，如：服务端抛出异常，路由出错，HTTP版本不支持等</td></tr></tbody></table><p>状态码大全：<a href="https://cloud.tencent.com/developer/chapter/13553">https://cloud.tencent.com/developer/chapter/13553</a> </p><h2 id="二、常见的响应状态码"><a href="#二、常见的响应状态码" class="headerlink" title="二、常见的响应状态码"></a>二、常见的响应状态码</h2><table><thead><tr><th>状态码</th><th>英文描述</th><th>解释</th></tr></thead><tbody><tr><td>200</td><td><strong><code>OK</code></strong></td><td>客户端请求成功，即<strong>处理成功</strong>，这是我们最想看到的状态码</td></tr><tr><td>302</td><td><strong><code>Found</code></strong></td><td>指示所请求的资源已移动到由<code>Location</code>响应头给定的 URL，浏览器会自动重新访问到这个页面</td></tr><tr><td>304</td><td><strong><code>Not Modified</code></strong></td><td>告诉客户端，你请求的资源至上次取得后，服务端并未更改，你直接用你本地缓存吧。隐式重定向</td></tr><tr><td>400</td><td><strong><code>Bad Request</code></strong></td><td>客户端请求有<strong>语法错误</strong>，不能被服务器所理解</td></tr><tr><td>403</td><td><strong><code>Forbidden</code></strong></td><td>服务器收到请求，但是<strong>拒绝提供服务</strong>，比如：没有权限访问相关资源</td></tr><tr><td>404</td><td><strong><code>Not Found</code></strong></td><td><strong>请求资源不存在</strong>，一般是URL输入有误，或者网站资源被删除了</td></tr><tr><td>428</td><td><strong><code>Precondition Required</code></strong></td><td><strong>服务器要求有条件的请求</strong>，告诉客户端要想访问该资源，必须携带特定的请求头</td></tr><tr><td>429</td><td><strong><code>Too Many Requests</code></strong></td><td><strong>太多请求</strong>，可以限制客户端请求某个资源的数量，配合 Retry-After(多长时间后可以请求)响应头一起使用</td></tr><tr><td>431</td><td><strong><code> Request Header Fields Too Large</code></strong></td><td><strong>请求头太大</strong>，服务器不愿意处理请求，因为它的头部字段太大。请求可以在减少请求头域的大小后重新提交。</td></tr><tr><td>405</td><td><strong><code>Method Not Allowed</code></strong></td><td>请求方式有误，比如应该用GET请求方式的资源，用了POST</td></tr><tr><td>500</td><td><strong><code>Internal Server Error</code></strong></td><td><strong>服务器发生不可预期的错误</strong>。服务器出异常了，赶紧看日志去吧</td></tr><tr><td>503</td><td><strong><code>Service Unavailable</code></strong></td><td><strong>服务器尚未准备好处理请求</strong>，服务器刚刚启动，还未初始化好</td></tr><tr><td>511</td><td><strong><code>Network Authentication Required</code></strong></td><td><strong>客户端需要进行身份验证才能获得网络访问权限</strong></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> web页面响应 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Day 2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2022/06/15/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/06/15/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="标语"><a href="#标语" class="headerlink" title="标语"></a>标语</h1><h2 id="记录我的第一篇博客-开设编写对fluid主题的配置进行完善"><a href="#记录我的第一篇博客-开设编写对fluid主题的配置进行完善" class="headerlink" title="记录我的第一篇博客 开设编写对fluid主题的配置进行完善"></a>记录我的第一篇博客 开设编写对fluid主题的配置进行完善</h2><p>我的第一篇博客</p><ul><li>学习fluid主题配置的更新</li><li>完善对对应图片更换</li><li>学习博客的使用</li></ul>]]></content>
      
      
      <categories>
          
          <category> first blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Day 1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/06/07/hello-world/"/>
      <url>/2022/06/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
